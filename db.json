{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/bitmapIndex.1.png","path":"images/bitmapIndex.1.png","modified":0,"renderable":0},{"_id":"source/images/ad_time.gif","path":"images/ad_time.gif","modified":0,"renderable":0},{"_id":"source/images/bitmapIndex.2.png","path":"images/bitmapIndex.2.png","modified":0,"renderable":0},{"_id":"source/images/bitmapIndex.3.png","path":"images/bitmapIndex.3.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/react_fiber.png","path":"images/react_fiber.png","modified":0,"renderable":0},{"_id":"source/images/flex-main.gif","path":"images/flex-main.gif","modified":0,"renderable":0},{"_id":"source/images/iptables_hooks.png","path":"images/iptables_hooks.png","modified":0,"renderable":0},{"_id":"source/images/iptables_tables_chains.png","path":"images/iptables_tables_chains.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"74a7956c2a311aa14037db5bf591479d22c8d60f","modified":1568549269492},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1568293384885},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1568293384885},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1568293384885},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1568293384885},{"_id":"themes/landscape/_config.yml","hash":"6191aa439957c86256afe34cdc7624845833bf86","modified":1568549610607},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1568293384889},{"_id":"source/_posts/2019-09-13-begin.md","hash":"430e56db4ec73f5fc8968097cc618732b05a9662","modified":1573126537813},{"_id":"source/_posts/2019-09-15-Ubuntu-语言设置.md","hash":"5917ab089280ec131e26542798a576fa1ef88eb3","modified":1568530223185},{"_id":"source/_posts/2019-09-15-SQL-XACT-ABORT.md","hash":"b5bd0c4c3cb0133072eec6986dc54499c7963f76","modified":1568551895380},{"_id":"source/_posts/2019-09-15-node-安装和升级.md","hash":"9583184c5ec561d204876644ace378650269dde6","modified":1568531602074},{"_id":"source/_posts/2019-09-15-收集的网站地址.md","hash":"c9b6963ae254a3675d44809163fb5586a49a58cd","modified":1568550278552},{"_id":"source/_posts/2019-09-16-Set-TimeZone-NTP-In-Ubuntu.md","hash":"09ecbba36f282b833571f088bdfd79c279f01918","modified":1629011476962},{"_id":"source/_posts/2019-09-16-shell-Example.md","hash":"fad48a460c11752657491089c7496ae71ef9467d","modified":1568640476120},{"_id":"source/_posts/2019-09-16-vim-plugin.md","hash":"a8ba403d8c9fabe63c87e92df4eac42e1bd8868d","modified":1591627855407},{"_id":"source/_posts/2019-09-18-KMS.md","hash":"a27d6890938dce2eb6779de938997b099b65dcdd","modified":1568982346414},{"_id":"source/_posts/2019-09-18-Windows-AD-Time.md","hash":"26682c2b8d947fc0f8e8f5313b1c220b180af1bc","modified":1568894666739},{"_id":"source/_posts/2019-09-21-SQL2000-孤立用户修复.md","hash":"ee9475b7a6005d70c3273e31e922943c8e686d1b","modified":1569065433600},{"_id":"source/_posts/2019-09-21-js-this.md","hash":"1fcaff73d0757fee894deed1567dc127df39212c","modified":1569066757995},{"_id":"source/_posts/2019-09-21-sed.md","hash":"c4936389f48aec0eaefcb809187b17d8c8508e97","modified":1570275961910},{"_id":"source/_posts/2019-09-22-Bash-For-Loop-Examples-转载.md","hash":"18ebda21b418065156c705cb976bc6b238db4ef8","modified":1569153050419},{"_id":"source/_posts/2019-09-22-Bash中的环境变量拼接.md","hash":"21daf2bdc24cbfafa1a50c8b50ed5c60d65d81e4","modified":1569149132149},{"_id":"source/_posts/2019-09-22-JS-函数上下文-闭包.md","hash":"6b49c4f6ab7fe8463f818391a981616c5756429b","modified":1569148842155},{"_id":"source/_posts/2019-09-22-Linux-Find-Example.md","hash":"31d36b55e8311cf4488d1cba22fdc64aa21a3e25","modified":1569151635533},{"_id":"source/_posts/2019-09-22-SQL-Server中的Collations和Unicode.md","hash":"59985f74af52729fe0ccf35afad16c3a6025fbd6","modified":1569148138633},{"_id":"source/_posts/2019-09-22-设计原理-SOLID.md","hash":"e79990611b46385964a68c5371f2710328f5cb18","modified":1569141651742},{"_id":"source/_posts/2019-09-24-Vim-8-1-On-Ubuntu-install.md","hash":"460183d29209a6bdd0090592dd6a5f0c6af9aa8d","modified":1569329167181},{"_id":"source/_posts/2019-09-26-Linux-Shell-set-vs-env.md","hash":"17352e5e62826d992b30dddccd74ea80235d3994","modified":1570711400189},{"_id":"source/_posts/2019-09-27-PostgreSQL-client-Connection-options.md","hash":"a7ef4a0bd2dd7f5182a459b8a8780eb878a40cea","modified":1570343026678},{"_id":"source/_posts/2019-09-29-PostgreSQL-Move-Data-Directory.md","hash":"0a2678cd7ea2f87d82662b3593aa71ddeb1dd034","modified":1570343026678},{"_id":"source/_posts/2019-09-29-PostgreSQL-Schema.md","hash":"d0e43a989321a45cc95822fc02bb7e5bcb24d4d0","modified":1570343026678},{"_id":"source/_posts/2019-10-04-postgresql-bitmap-heap-index-scan.md","hash":"35a3400e27c96f1d4c534e76e39b47bf4acccef7","modified":1570343026678},{"_id":"source/_posts/2019-10-04-postgresql-reload-config.md","hash":"6772ebaba7bcf6a6f3dc24c679199a365dceabd1","modified":1570343026678},{"_id":"source/_posts/2019-10-04-postgresql-show-file-loaction.md","hash":"aedd595953c9b1e2bb2c33c057a7556cef269ec3","modified":1570343026678},{"_id":"source/_posts/2019-10-06-Postgresql-join.md","hash":"e2d5d2afeeeb855cd79b682b069169e11a7e9531","modified":1570430121155},{"_id":"source/_posts/2019-10-08-华为交换机-ACL-单向流量控制.md","hash":"85b8e99ab4010c0797fb0dfefa0de33a6269235d","modified":1570535890828},{"_id":"source/_posts/2019-10-06-Postgresql-static-sys-view-性能.md","hash":"2b43008ae6d3edd65aa6c953c64b982af785f092","modified":1570430249292},{"_id":"source/_posts/2019-10-09-Docker-entrypoint-vs-cmd.md","hash":"df5d172f6620d6a37486d32edc2cbe74012cadcf","modified":1570707910470},{"_id":"source/_posts/2019-10-26-set-timezone-in-pg.md","hash":"4df8b16e1fa244ca14611f1993803744ccfce46e","modified":1572069856542},{"_id":"source/_posts/2019-11-04-Unix-and-Windows-文本文件转换.md","hash":"5508ae30e2adb9d3123307a58e38dfc377f20529","modified":1572870056388},{"_id":"source/_posts/2019-11-03-windows中sha1-md5校验.md","hash":"ddcc8ae0909ee564b599d2af0884b76e3863d575","modified":1572866579615},{"_id":"source/_posts/2019-11-06-netsh-命令行修改网络配置.md","hash":"213f650f5f0c645db5d2bb433c014b8112c7cab4","modified":1573041843530},{"_id":"source/_posts/2019-11-07-PowerShell-FireWall.md","hash":"e5bde1ab70698bf4a12d90c4468d61edda5c6a1b","modified":1573271287757},{"_id":"source/_posts/2019-12-06-kubenetes-安装.md","hash":"eb147fdc77f36fc8f5a8bd518607edd33d0bb6af","modified":1575721414603},{"_id":"source/_posts/2020-06-08-yarn-reinstall-package.md","hash":"ef021d70dce21d691cb1b777119fdd01168dccbc","modified":1647433232264},{"_id":"source/_posts/2019-11-09-PowerShell-Remoting.md","hash":"9e69ee2fd0fa44b7b29d2e87fcc766a4ec142edc","modified":1573302069043},{"_id":"source/_posts/2019-11-20-NFS-权限.md","hash":"47c14c1f21ae936c77122967011b836698560f2a","modified":1574259047239},{"_id":"source/_posts/2019-11-25-Docker-按名称批量删除image.md","hash":"d7cf575702afa83e31e4c8cb5683b86baae7c25b","modified":1574683282664},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1568293250919},{"_id":"source/images/bitmapIndex.1.png","hash":"0224841bab209efe83ee370b494ec01f2997b0b7","modified":1570162117320},{"_id":"source/images/ad_time.gif","hash":"ede1e1e6d9a52f9b821c9d058d16f509e681b04a","modified":1568894149559},{"_id":"source/images/bitmapIndex.2.png","hash":"370643229278190f3aa2c5fa215c662770ab5e57","modified":1570162117328},{"_id":"source/images/bitmapIndex.3.png","hash":"a1103c9cdfc4a206470e0a0804c380ffe64004b0","modified":1570162117336},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1568293384885},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1568293384885},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1568293384885},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1568293384885},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1568293384885},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1568293384885},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1568293384885},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1568293384889},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1568293384889},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1568293384885},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1568293384889},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1568293384889},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1568293384889},{"_id":"source/_posts/2019-11-21-NFS-Mount.md","hash":"56343dcf3fa223396eeb1dd4347b9ceda33d572c","modified":1574339798932},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1568293384889},{"_id":"source/_posts/2019-11-21-Set-TimeZone.md","hash":"e0dc14ac6adffea666d8a0bfca1da470712325dc","modified":1574340548684},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1568293384889},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1568293384889},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1568293384889},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1568293384889},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1568293384889},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1568293384889},{"_id":"source/_posts/2019-11-24-阿里源.md","hash":"867c5b48255168f756a1ebbf20bd06dfbd85c19b","modified":1574598402544},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1568293384889},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1568293384889},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1568293384889},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1568293384889},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1568293384889},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1568293384889},{"_id":"themes/landscape/source/css/_variables.styl","hash":"3c68df4f15197156b5f49cbee5f9117d8efffe0d","modified":1569588180657},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1568293384889},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1568293384897},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1568293384897},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1568293384897},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1568293384889},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1568293384889},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1568293384889},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1568293384889},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1568293384893},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1568293384893},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1568293384889},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1568293384889},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1568293384893},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1568293384889},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1568293384893},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1568293384893},{"_id":"public/atom.xml","hash":"656f1019f0d51a0c18845b02bbdb386a086fe61a","modified":1738657374828},{"_id":"public/2019/11/21/Set-TimeZone/index.html","hash":"fb98112fb385c0b3fa9d06b82dfd0b35cde4ed01","modified":1738657374828},{"_id":"public/2019/11/25/Docker-按名称批量删除image/index.html","hash":"214019fb138ac293537d12d94a3eb0bae4803ed5","modified":1738657374828},{"_id":"public/2019/11/24/阿里源/index.html","hash":"831bea135902e4d195e7a59ca6e57db097c92869","modified":1650717131029},{"_id":"public/2020/06/08/yarn-reinstall-package/index.html","hash":"8cc989968456e783a567d4637538d33d9413b676","modified":1738657374828},{"_id":"public/2019/11/21/NFS-Mount/index.html","hash":"7244fcb7c7b3d477e45147d119d6a44b87742417","modified":1738657374828},{"_id":"public/2019/12/06/kubenetes-安装/index.html","hash":"a0a3dfc13d04a26a709327fb27b6d63f4aae8ca3","modified":1738657374828},{"_id":"public/2019/11/20/NFS-权限/index.html","hash":"9eb2a4da5874fc065cf9af7070f1378330b673ef","modified":1738657374828},{"_id":"public/2019/11/09/PowerShell-Remoting/index.html","hash":"8aaf6c1c5ff0a60dfbd731359d3ed29e67c6aacb","modified":1738657374828},{"_id":"public/2019/11/07/PowerShell-FireWall/index.html","hash":"9ecd8730f6abd3eddf1173dd4e34e61457cb5e92","modified":1738657374828},{"_id":"public/2019/11/06/netsh-命令行修改网络配置/index.html","hash":"df80d36749879631085ac73ad47b96f81a75555e","modified":1738657374828},{"_id":"public/2019/11/04/Unix-and-Windows-文本文件转换/index.html","hash":"3179075f46482e52ecdef51b26e50ada0ac7a455","modified":1738657374828},{"_id":"public/2019/11/03/windows中sha1-md5校验/index.html","hash":"f2ef6b639def46310e28ae399a63a700f4106067","modified":1738657374828},{"_id":"public/2019/10/26/set-timezone-in-pg/index.html","hash":"4d134ba9917d717bfa926cf7a889d53b0144c8da","modified":1738657374828},{"_id":"public/2019/10/08/华为交换机-ACL-单向流量控制/index.html","hash":"836d13f74f1dfca93fd8d91ec2a6a509b2fd74d8","modified":1738657374828},{"_id":"public/2019/10/06/Postgresql-join/index.html","hash":"a4ae7a5e55e132b40f2ef06ac8e945869582541f","modified":1738657374828},{"_id":"public/2019/10/09/Docker-entrypoint-vs-cmd/index.html","hash":"b475e26274ddcf37181ee2a50916ace8a94adc4d","modified":1738657374828},{"_id":"public/2019/10/06/Postgresql-static-sys-view-性能/index.html","hash":"7ba76847940dbf0d4b81623624b2ac37a75fb8eb","modified":1738657374828},{"_id":"public/2019/10/04/postgresql-show-file-loaction/index.html","hash":"b73f05ff89457cbe68a96679790dfb5b9b2190c3","modified":1738657374828},{"_id":"public/2019/10/04/postgresql-reload-config/index.html","hash":"955baa7272e2e8dca7165636dcd8ac5577609251","modified":1738657374828},{"_id":"public/2019/10/04/postgresql-bitmap-heap-index-scan/index.html","hash":"6d83b1cea0d8bfd9971429dfc01b242963f83886","modified":1738657374828},{"_id":"public/2019/09/29/PostgreSQL-Schema/index.html","hash":"1d875bf04e652f7ed65ffceb07886765130a2873","modified":1738657374828},{"_id":"public/2019/09/29/PostgreSQL-Move-Data-Directory/index.html","hash":"0e933bb1b663ca7bd89a1fe112a2e718bac674f3","modified":1738657374828},{"_id":"public/2019/09/27/PostgreSQL-client-Connection-options/index.html","hash":"b4964c83b25f399f07cc23f0d0488cb0daf24337","modified":1738657374828},{"_id":"public/2019/09/22/Linux-Find-Example/index.html","hash":"1ee1e28ed6e1ded145bfb82f5513d5799b0ff209","modified":1738657374828},{"_id":"public/2019/09/26/Linux-Shell-set-vs-env/index.html","hash":"fa80b66346fdf479ff222281242abb6b0db34e43","modified":1738657374828},{"_id":"public/2019/09/22/Bash中的环境变量拼接/index.html","hash":"bfcbd49d2abe80bd5fe16d5526f05b8a65f31ff3","modified":1738657374828},{"_id":"public/2019/09/22/JS-函数上下文-闭包/index.html","hash":"16922e25a0505772dc2f441b589aa6ff21d0b063","modified":1738657374828},{"_id":"public/2019/09/24/Vim-8-1-On-Ubuntu-install/index.html","hash":"042b7ece79f3ac80a13051df8dfb53c11a21c15f","modified":1738657374828},{"_id":"public/2019/09/22/SQL-Server中的Collations和Unicode/index.html","hash":"77dfd41ecf05cdc9b926d6cd0bf439ca3db7ca5e","modified":1738657374828},{"_id":"public/2019/09/22/设计原理-SOLID/index.html","hash":"ab343d506b495bb61180ee6e37b5858b777ea1a6","modified":1738657374828},{"_id":"public/2019/09/21/js-this/index.html","hash":"9e23a09b968a92649b6fb0690218ed04c1f72323","modified":1738657374828},{"_id":"public/2019/09/21/sed/index.html","hash":"ee773c67c8b9fff9889db0f1160339abbc346b80","modified":1738657374828},{"_id":"public/2019/09/21/SQL2000-孤立用户修复/index.html","hash":"ec63110597afe175a1fd6ca9f84380650f280a88","modified":1738657374828},{"_id":"public/2019/09/18/KMS/index.html","hash":"c47c22af563c85fcdea753e5fed75b60c93e4e18","modified":1738657374828},{"_id":"public/2019/09/18/Windows-AD-Time/index.html","hash":"2406a8ad4c527fbffd11440e543eb4cfc8e3547c","modified":1738657374828},{"_id":"public/2019/09/16/Set-TimeZone-NTP-In-Ubuntu/index.html","hash":"44ee11ac45bb810b8869b1ab707af8a4df58b388","modified":1738657374828},{"_id":"public/2019/09/16/shell-Example/index.html","hash":"f7355c72fe2b02b8a27f90c1bcfba3e1a2d35ea4","modified":1738657374828},{"_id":"public/2019/09/16/vim-plugin/index.html","hash":"442ff05a44ede537f6a0ae2304a6947871df6fae","modified":1738657374828},{"_id":"public/2019/09/15/SQL-XACT-ABORT/index.html","hash":"2dc23e9cb65619a44d3f1147245ad45409b819ed","modified":1738657374828},{"_id":"public/2019/09/15/node-安装和升级/index.html","hash":"d8af1f38f380060dd16be7c482f654ee1d8b1cdc","modified":1738657374828},{"_id":"public/2019/09/15/收集的网站地址/index.html","hash":"d0b0b5c44a1ad42a7abdfddba08ba5808ed54722","modified":1738657374828},{"_id":"public/2019/09/15/Ubuntu-语言设置/index.html","hash":"46cd78a27f1cc70248bac75cccf78728036e916c","modified":1738657374828},{"_id":"public/archives/index.html","hash":"425a88b37ba585bb6f42a737882631f3f125e0e4","modified":1738657374828},{"_id":"public/2019/09/12/hello-world/index.html","hash":"2e13392ec7af4b693b798fc37190ff389c6e5ab5","modified":1738657374828},{"_id":"public/2019/09/13/begin/index.html","hash":"fd62b3262932156865aff1dbe5474cba5c6b9e31","modified":1738657374828},{"_id":"public/archives/page/3/index.html","hash":"c450c53b5c94f56dd6ef2ca04df3c35895b0a1e9","modified":1738657374828},{"_id":"public/archives/page/2/index.html","hash":"52d216322d6c396e98c7e910a6000adfbb596787","modified":1738657374828},{"_id":"public/archives/page/4/index.html","hash":"f3c82d7f30b9941d9213ee87be4d346e0bcccd7e","modified":1738657374828},{"_id":"public/archives/page/5/index.html","hash":"da4ffa1086e1ff99dc0f58a4878362c335145678","modified":1738657374828},{"_id":"public/archives/2019/index.html","hash":"89eae851a686d95589e13732d04c778d4f775ed0","modified":1738657374828},{"_id":"public/archives/2019/page/5/index.html","hash":"6e3bf5c67ad4e85f69985a1d49b9b819746942f1","modified":1738657374828},{"_id":"public/archives/2019/page/2/index.html","hash":"7797842562a19e5d8e625f12bd8b6b539b6cc5f5","modified":1738657374828},{"_id":"public/archives/2019/page/3/index.html","hash":"ac8dba922ee08414f708b9887ba6d79396216a57","modified":1738657374828},{"_id":"public/archives/2019/09/index.html","hash":"8d6fdae1c43af52049f99bb723b30429d426c536","modified":1738657374828},{"_id":"public/archives/2019/10/index.html","hash":"05150a728810b0e27154cdbd33bafd238475d373","modified":1738657374828},{"_id":"public/archives/2019/page/4/index.html","hash":"a3f2d6eabfe3b2194b8042c184774262cd47bcd4","modified":1738657374828},{"_id":"public/archives/2019/09/page/2/index.html","hash":"e1aca67a4d9d9a5c3642c98ae6a6b51d92fc4c88","modified":1738657374828},{"_id":"public/archives/2019/09/page/3/index.html","hash":"0bef4f674ff560e782e8a219cf50db20a9245f1d","modified":1738657374828},{"_id":"public/archives/2019/11/index.html","hash":"e9225bb9056ff4f1b1fcd9b7f0a54d15c9856c53","modified":1738657374828},{"_id":"public/archives/2019/12/index.html","hash":"576197f7d57d252cf03802a70260d69a9a63cfad","modified":1738657374828},{"_id":"public/categories/computer/index.html","hash":"b613f4e0af3023080328800f1d96c7357d33abc4","modified":1738657374828},{"_id":"public/categories/computer/page/2/index.html","hash":"fd714c3d32370fd2efc816838516c4c1689d0eb0","modified":1738657374828},{"_id":"public/categories/computer/page/3/index.html","hash":"fe2fecb2b7ca60f2b42181f4db9eff8103374d2f","modified":1738657374828},{"_id":"public/categories/computer/page/5/index.html","hash":"d11667cbbbb19d5969bd8a9c38bf37fbc1bd8d49","modified":1738657374828},{"_id":"public/categories/computer/page/4/index.html","hash":"ef66b9e76f6e76a148bd3db3acf9e6fe452b62e1","modified":1738657374828},{"_id":"public/categories/computer/linux/index.html","hash":"4bae5a5410644539b682dd00da2913420a8c6c77","modified":1738657374828},{"_id":"public/categories/computer/other/index.html","hash":"a4f667a17ad1aa2f8f47dec3c197b0ec4bb51515","modified":1738657374828},{"_id":"public/categories/computer/linux/page/2/index.html","hash":"1bcb172be79f49a3b52df5244eadf18a4520c7d2","modified":1738657374828},{"_id":"public/categories/computer/windows/index.html","hash":"c706ee0df7fd42324244b62d16a8d5b884e0452e","modified":1738657374828},{"_id":"public/categories/computer/linux/page/3/index.html","hash":"461b15d9220894e7f69939a16a582fe099bcb817","modified":1738657374828},{"_id":"public/categories/computer/linux/page/4/index.html","hash":"18978ba60623044d2731395b0f04c1cf18ea70ac","modified":1738657374828},{"_id":"public/tags/system/index.html","hash":"0dc97a16c01c5a526dbba20fb84ff41ddf6fb287","modified":1738657374828},{"_id":"public/tags/shell/index.html","hash":"98138a2ca15b51c17ed8e0da7d1cdbe3103c0132","modified":1738657374828},{"_id":"public/tags/sql/index.html","hash":"bd5dfce0f77bf5c6653538d61d4836f401a022c0","modified":1738657374828},{"_id":"public/tags/software/index.html","hash":"a86c1bef49d1fb34f3698c60282f57097739cec1","modified":1738657374828},{"_id":"public/tags/url/index.html","hash":"e71e7dc0dd5ec8d2a4a17e4f30aa6f72b17b4b3f","modified":1738657374828},{"_id":"public/tags/grep/index.html","hash":"83afb343d8927c1111ca5f008f16e3dcd30290c4","modified":1738657374828},{"_id":"public/tags/shell/page/2/index.html","hash":"c238cb4782c877b9c5394252f2727a035cbf32c3","modified":1738657374828},{"_id":"public/tags/vim/index.html","hash":"bf297a4c33e417d2ac3c2c1958b963d2089193a1","modified":1738657374828},{"_id":"public/tags/program/index.html","hash":"65b49972a5af2bde1c26b43897e6ca9983199a8d","modified":1738657374828},{"_id":"public/tags/postgresql/index.html","hash":"cbc67a2f67cf0ae9009870a51f2cd3e15b4d2f25","modified":1738657374828},{"_id":"public/tags/network/index.html","hash":"f1e372873690bec6e2a80dd87e08636a6a04445e","modified":1738657374828},{"_id":"public/tags/docker/index.html","hash":"c1c1626ff4021e02fe056d732ae280dea7189d0d","modified":1738657374828},{"_id":"public/tags/kubenetes/index.html","hash":"5823387984e42d0245b9f6056485664ba93e85c6","modified":1738657374828},{"_id":"public/2019/09/22/Bash-For-Loop-Examples-转载/index.html","hash":"523c1f67e93642fc5adde0e567e78bf2253ddda1","modified":1738657374828},{"_id":"public/index.html","hash":"5563e6cb4a02d524d050d271c91c9bbcbd21e94a","modified":1738657374828},{"_id":"public/page/4/index.html","hash":"2649d0ade50f323d05ae3d79988cdc8a5c2f34e3","modified":1738657374828},{"_id":"public/page/3/index.html","hash":"2f99e84df595c753ab01168c7950831e428a2b34","modified":1738657374828},{"_id":"public/page/2/index.html","hash":"2a3824a95ee1fa7610dd4111abef1afaf3bf28bf","modified":1738657374828},{"_id":"public/page/5/index.html","hash":"bee1f41de6f64cd53c8c6f6f1e40a76d889e613c","modified":1738657374828},{"_id":"public/archives/2020/index.html","hash":"7255f9c662db5244b6db769723806106b1931e2e","modified":1738657374828},{"_id":"public/archives/2020/06/index.html","hash":"003dc2bf91b91a6b4e57ff46a6526ad608bc1f0c","modified":1738657374828},{"_id":"public/images/bitmapIndex.1.png","hash":"0224841bab209efe83ee370b494ec01f2997b0b7","modified":1591625205794},{"_id":"public/images/ad_time.gif","hash":"ede1e1e6d9a52f9b821c9d058d16f509e681b04a","modified":1591625205794},{"_id":"public/images/bitmapIndex.3.png","hash":"a1103c9cdfc4a206470e0a0804c380ffe64004b0","modified":1591625205794},{"_id":"public/images/bitmapIndex.2.png","hash":"370643229278190f3aa2c5fa215c662770ab5e57","modified":1591625205794},{"_id":"public/favicon.ico","hash":"74a7956c2a311aa14037db5bf591479d22c8d60f","modified":1591625205794},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1591625205794},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1591625205794},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1591625205794},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1591625205794},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1591625205794},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1591625205794},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1591625205794},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1591625205794},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1591625205794},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1591625205794},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1591625205794},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1591625205794},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1591625205794},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1591625205794},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1591625205794},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1591625205794},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1591625205794},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1591625205794},{"_id":"public/css/style.css","hash":"d99153ef5797ae26367fa001d000a60275ed5a0f","modified":1591625205794},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1591625205794},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1591625205794},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1591625205794},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1591625205794},{"_id":"source/_posts/2021-08-08-组策略启动脚本.md","hash":"54a306ad10375a3d5bed288347794b772f074874","modified":1630121564497},{"_id":"public/2021/08/08/组策略启动脚本/index.html","hash":"8871b7a8e82606b2735596ebe42d910e76f1f1b2","modified":1738657374828},{"_id":"public/archives/2021/index.html","hash":"dbf021323d017813eeb63112e090ff973fb3d31b","modified":1738657374828},{"_id":"public/archives/2021/08/index.html","hash":"b6f011403706b90a7578a73936af26388eabd779","modified":1738657374828},{"_id":"source/_posts/2021-08-28-LinuxProcessView.md","hash":"de6fc9828a6d73477a48af1305209ebd6caf2f92","modified":1630143223437},{"_id":"public/2021/08/28/LinuxProcessView/index.html","hash":"d35d594c653acd68dc1340b4681c66a4a278a007","modified":1738657374828},{"_id":"source/_posts/2021-08-28-Linux-netstat-ss.md","hash":"71d80da599852aa3e6d90c512a473eb820ae22d1","modified":1630154482555},{"_id":"public/2021/08/28/Linux-netstat-ss/index.html","hash":"f288601e1320e84cc7103e276bc34726ee0e8c24","modified":1738657374828},{"_id":"source/_posts/2022-02-23-vlan-pvid-trunk.md","hash":"bdb844690b20061f754a474e34083cf5a6e3110c","modified":1645703500969},{"_id":"public/2022/02/23/vlan-pvid-trunk/index.html","hash":"69ddcfda655af0b8644cf7a0626d8cfa3b8e9a3a","modified":1738657374828},{"_id":"public/archives/2022/index.html","hash":"23aba9c66745fbc20f3434d7198652b584728f08","modified":1738657374828},{"_id":"public/archives/2022/02/index.html","hash":"23f03d4115fd479b51fd69aafca5f0c7edf9361c","modified":1738657374828},{"_id":"source/_posts/2022-02-26-ipv6-address.md","hash":"d8018d044edc35c4b72efbb5fef13f2353c298a6","modified":1646051163203},{"_id":"public/2022/02/26/ipv6-address/index.html","hash":"a19bccbe7fc00a520d862d70d6747ce66cecdd87","modified":1738657374828},{"_id":"source/_posts/2022-03-16-redis-primary.md","hash":"079bd5e32c7da73850797b0877f475e3bd1d95e8","modified":1647433572097},{"_id":"public/2022/03/16/redis-primary/index.html","hash":"59cb18f2f41cbf0f9c7b58b28603d23f49b6a879","modified":1738657374828},{"_id":"public/archives/page/6/index.html","hash":"827a3431e70951c93bd178073159093e16625a51","modified":1738657374828},{"_id":"public/archives/2022/03/index.html","hash":"d60460e520f55a729ec1537e0a08c66b83d74929","modified":1738657374828},{"_id":"public/page/6/index.html","hash":"8bc5d0ff0ea6ab7e2753c6299d072e2a5cf816da","modified":1738657374828},{"_id":"source/_posts/2022-03-18-OpenSSL.md","hash":"7fcd35d7e6955c8220be9a86123f97420fcd1839","modified":1647604847423},{"_id":"public/2022/03/18/OpenSSL/index.html","hash":"10f4017fc884bb367ed8edee297e6ff01245a992","modified":1738657374828},{"_id":"public/categories/computer/page/6/index.html","hash":"aeb28c2e5c023eabbaa4f7e9f09d053f8d6eddc3","modified":1738657374828},{"_id":"source/_posts/2022-03-20-javascript-new-operator.md","hash":"e58df7b86b0d75e67a1077e308454e4c7868bff6","modified":1649052125735},{"_id":"public/2022/03/20/javascript-new-operator/index.html","hash":"e40af99849424119a9aff88914df18bb2b3cdf03","modified":1738657374828},{"_id":"source/_posts/2022-04-04-react-hook-interal.md","hash":"e717362113cd077dd94b05eafd5809ebc83e7058","modified":1649467163013},{"_id":"source/images/react_fiber.png","hash":"71e6ac3114769ad559dd741e907af5c723d83d48","modified":1649137358485},{"_id":"public/2022/04/04/react-hook-interal/index.html","hash":"2c5bfedc9027ca8a21974edb43af4f075fe240ee","modified":1738657374828},{"_id":"public/archives/2022/04/index.html","hash":"bbe3720b9ee497b698161cbe826835b8727a9ecd","modified":1738657374828},{"_id":"public/categories/linux/index.html","hash":"a7391788c41c881f712ae83da69d8b884493aa58","modified":1677307585927},{"_id":"public/categories/linux/other/index.html","hash":"62a65e50c5975b697f5748c4027ea4b19bf0b44a","modified":1649148979142},{"_id":"public/images/react_fiber.png","hash":"71e6ac3114769ad559dd741e907af5c723d83d48","modified":1649147963172},{"_id":"source/_posts/2022-04-09-postgresql-lock-md.md","hash":"5073a95d2dd05916dcb74c242f0b53a0ad0ba293","modified":1649555564163},{"_id":"public/2022/04/09/postgresql-lock-md/index.html","hash":"51f2ef1131fd59ff4278824f042917774e2db747","modified":1738657374828},{"_id":"source/_posts/2022-04-17-get-public-ip.md","hash":"787cf33b06039c2b13185a558ba95a13d5547584","modified":1651146779831},{"_id":"public/2022/04/17/get-public-ip/index.html","hash":"693113c7b3ff85601b41fca54f5b93db4f3bc3e2","modified":1738657374828},{"_id":"source/_posts/2022-04-23-react-my-components.md","hash":"deb54c11cd0659a0c8ae84aca662080a8e941f14","modified":1652967822745},{"_id":"public/2022/04/23/react-my-components/index.html","hash":"103ee49e710a9566ad256f70ccfda5954ef2de28","modified":1738657374828},{"_id":"source/_posts/2022-06-03-python-venv.md","hash":"f504d9d549e2fd783bde41020b55d5c6db4aa052","modified":1654234861383},{"_id":"public/2022/06/03/python-venv/index.html","hash":"f7411c9126026b9c056c1abf12031235c17fb394","modified":1738657374828},{"_id":"public/archives/2022/06/index.html","hash":"1873c298aa727b2d99ef9a38de9c55044d4ec8d6","modified":1738657374828},{"_id":"source/_posts/2022-08-21-css-flex.md","hash":"32f8b5b53b11772a6263a8c713b8f8a18ae597ac","modified":1677386995317},{"_id":"source/images/flex-main.gif","hash":"7aeebdfc9f1f04d11aa329d03b9fbbf4d7ba1417","modified":1661066197286},{"_id":"public/2022/08/21/css-flex/index.html","hash":"db74bcd93c25b28aa11549d3bf330a0b85d763a6","modified":1738657374828},{"_id":"public/archives/2022/page/2/index.html","hash":"44017fd8a3229b83238cb4c481a144a9ea8398b8","modified":1738657374828},{"_id":"public/archives/2022/08/index.html","hash":"331fdf152f8d3d0f92388ccc405793b90168270e","modified":1738657374828},{"_id":"public/categories/computer/program/index.html","hash":"0b15f01b93b0136f31e347d1bd13834d7d66139a","modified":1738657374828},{"_id":"public/images/flex-main.gif","hash":"7aeebdfc9f1f04d11aa329d03b9fbbf4d7ba1417","modified":1661066249542},{"_id":"source/_posts/2022-10-23-ssh-example.md","hash":"fe6cdfa03f91f945d0e78b1b5f64b3c7a47e9ab6","modified":1679099694529},{"_id":"public/2022/10/23/ssh-example/index.html","hash":"b6bf5bf18a5c4ab603d98e85fbb97f5c8065f072","modified":1738657374828},{"_id":"public/archives/2022/10/index.html","hash":"c67706acfc20afe6fed10fa3afc8fdb02e84b80e","modified":1738657374828},{"_id":"source/_posts/2022-10-30-promise-error.md","hash":"b42fbcf43a0b7aab1019f8bff558f69c904072bc","modified":1679099674668},{"_id":"public/2022/10/30/promise-error/index.html","hash":"f5ed763dd109167cdb456732726fb437c9fbb266","modified":1738657374828},{"_id":"public/categories/program/index.html","hash":"ceb3af3eaf0c40b471d649e3d15ce41599d03ada","modified":1677307585927},{"_id":"public/tags/javascript/index.html","hash":"bc93bcc67be1e216400b458548a585e2d34aaf86","modified":1738657374828},{"_id":"source/_posts/2023-03-18-markdown.md","hash":"8bdd590cb69c511f5265f825745ba1947558eac9","modified":1679186220000},{"_id":"public/2023/03/18/markdown/index.html","hash":"f6519f9b4eb5c763cb25057386b1fcc15c725f41","modified":1738657374828},{"_id":"public/archives/page/7/index.html","hash":"7851a3c5b0fe79c4257d317ed71817ff2e89931c","modified":1738657374828},{"_id":"public/archives/2023/index.html","hash":"513fa9fcc2c5db6b193e100a803d9a8b9f9b9d7b","modified":1738657374828},{"_id":"public/archives/2023/03/index.html","hash":"90c40ee192f3c0cfb24ca63e083e11f2ac4de3a7","modified":1738657374828},{"_id":"public/page/7/index.html","hash":"5341b67dc3531f20c73af7c24579bcf9b9ec17ca","modified":1738657374828},{"_id":"public/tags/other/index.html","hash":"dc352096c446c4d5a45227929d1afec219d15139","modified":1738657374828},{"_id":"source/_posts/2025-02-04-iptables.md","hash":"485fd15130b20798a0c418a1805c5664b6cbe281","modified":1738627323783},{"_id":"source/images/iptables_hooks.png","hash":"47de30273a393a95feb197ce1823d65f857bbcc6","modified":1738625342864},{"_id":"source/images/iptables_tables_chains.png","hash":"80b82ad5372cb484a9d395df61b0321f842f2006","modified":1738625342864},{"_id":"public/2025/02/04/iptables/index.html","hash":"03e15506c5d3f8dcfb00ab06be8afdc47a9d7ff7","modified":1738657374828},{"_id":"public/archives/2025/index.html","hash":"9bdef404c402fa8c8c2a13535abf50375fce912f","modified":1738657374828},{"_id":"public/archives/2025/02/index.html","hash":"b77d74ecd7d91ad12f13d33c0ca7452c6982d4db","modified":1738657374828},{"_id":"public/categories/computer/page/7/index.html","hash":"c6ae1ce72c6526012726ec85ab11661318d2c04c","modified":1738657374828},{"_id":"public/categories/computer/linux/page/5/index.html","hash":"1d82a15ec17563fbbf4e1fe19497a38c1aed4cd8","modified":1738657374828},{"_id":"public/images/iptables_tables_chains.png","hash":"80b82ad5372cb484a9d395df61b0321f842f2006","modified":1738657374828},{"_id":"public/images/iptables_hooks.png","hash":"47de30273a393a95feb197ce1823d65f857bbcc6","modified":1738657374828}],"Category":[{"name":"computer","_id":"ckb6kjx0q0002pspwafuu2w0i"},{"name":"linux","parent":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx16000ipspw7vp1d2bx"},{"name":"other","parent":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1d000tpspwehryfe9u"},{"name":"windows","parent":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1u001ypspw3eumb0st"},{"name":"windows","_id":"cks62weno00001apwfqnsd49h"},{"name":"windows","parent":"cks62weno00001apwfqnsd49h","_id":"cks62wenp00011apwh8vcavzh"},{"name":"linux","_id":"cl1kb3pyc000149pw5t843caz"},{"name":"other","parent":"cl1kb3pyc000149pw5t843caz","_id":"cl1kb3pyr000349pwci7dbqg5"},{"name":"program","parent":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl72zyha10002vapw9fdvdopm"},{"name":"program","_id":"cl9uzmasy0001ljpwfs4jbn4w"}],"Data":[],"Page":[],"Post":[{"title":"Linux终端 拷贝 粘贴","date":"2019-09-13T01:25:15.000Z","updated":"2019-09-13T07:30:15.000Z","_content":"*不比Windows差哦*\n\n1. 在Linux中，使用光标选择要复制的文本，它会自动将文本复制到剪贴板。\n2. 右键点击鼠标，完成粘贴.\n\n\n","source":"_posts/2019-09-13-begin.md","raw":"---\ntitle: Linux终端 拷贝 粘贴\ndate: 2019-09-13 09:25:15\nupdated: 2019-09-13 15:30:15\ntags: \n- shell\ncategories: \n- computer\n- linux\n---\n*不比Windows差哦*\n\n1. 在Linux中，使用光标选择要复制的文本，它会自动将文本复制到剪贴板。\n2. 右键点击鼠标，完成粘贴.\n\n\n","slug":"begin","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx0i0000pspwcdj2ctyo","content":"<p><em>不比Windows差哦</em></p>\n<ol>\n<li>在Linux中，使用光标选择要复制的文本，它会自动将文本复制到剪贴板。</li>\n<li>右键点击鼠标，完成粘贴.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><em>不比Windows差哦</em></p>\n<ol>\n<li>在Linux中，使用光标选择要复制的文本，它会自动将文本复制到剪贴板。</li>\n<li>右键点击鼠标，完成粘贴.</li>\n</ol>\n"},{"title":"Ubuntu 语言设置","date":"2019-09-14T22:47:18.000Z","_content":"* 查看当前系统语言环境: locale / locale -a\n* 编辑配置文件 sudo vim /etc/default/locale (中文:zh_CN.UTF-8 ,英文:en_US:UTF-8).\n* 安装编码: sudo locale-gen zh_CN.UTF-8.\n* 重启.\n\n","source":"_posts/2019-09-15-Ubuntu-语言设置.md","raw":"---\ntitle: Ubuntu 语言设置\ndate: 2019-09-15 06:47:18\ncategories:\n- computer\n- linux\ntags:\n- system\n---\n* 查看当前系统语言环境: locale / locale -a\n* 编辑配置文件 sudo vim /etc/default/locale (中文:zh_CN.UTF-8 ,英文:en_US:UTF-8).\n* 安装编码: sudo locale-gen zh_CN.UTF-8.\n* 重启.\n\n","slug":"Ubuntu-语言设置","published":1,"updated":"2019-09-15T06:50:23.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx0o0001pspw17udh8q0","content":"<ul>\n<li>查看当前系统语言环境: locale / locale -a</li>\n<li>编辑配置文件 sudo vim /etc/default/locale (中文:zh_CN.UTF-8 ,英文:en_US:UTF-8).</li>\n<li>安装编码: sudo locale-gen zh_CN.UTF-8.</li>\n<li>重启.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>查看当前系统语言环境: locale / locale -a</li>\n<li>编辑配置文件 sudo vim /etc/default/locale (中文:zh_CN.UTF-8 ,英文:en_US:UTF-8).</li>\n<li>安装编码: sudo locale-gen zh_CN.UTF-8.</li>\n<li>重启.</li>\n</ul>\n"},{"title":"SQL XACT_ABORT","date":"2019-09-15T04:48:34.000Z","_content":"When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time error, the entire transaction is terminated and rolled back. When SET XACT_ABORT is OFF, in some cases only the Transact-SQL statement that raised the error is rolled back and the transaction continues processing.\n","source":"_posts/2019-09-15-SQL-XACT-ABORT.md","raw":"---\ntitle: SQL XACT_ABORT\ndate: 2019-09-15 12:48:34\ncategories: \n- computer\n- windows\ntags:\n- sql\n---\nWhen SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time error, the entire transaction is terminated and rolled back. When SET XACT_ABORT is OFF, in some cases only the Transact-SQL statement that raised the error is rolled back and the transaction continues processing.\n","slug":"SQL-XACT-ABORT","published":1,"updated":"2019-09-15T12:51:35.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx0t0004pspw9zrmhk3u","content":"<p>When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time error, the entire transaction is terminated and rolled back. When SET XACT_ABORT is OFF, in some cases only the Transact-SQL statement that raised the error is rolled back and the transaction continues processing.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>When SET XACT_ABORT is ON, if a Transact-SQL statement raises a run-time error, the entire transaction is terminated and rolled back. When SET XACT_ABORT is OFF, in some cases only the Transact-SQL statement that raised the error is rolled back and the transaction continues processing.</p>\n"},{"title":"node 安装和升级","date":"2019-09-14T23:10:05.000Z","_content":"推荐使用nvm来管理node,[GitHub](https://github.com/creationix/nvm)\n\n","source":"_posts/2019-09-15-node-安装和升级.md","raw":"---\ntitle: node 安装和升级\ndate: 2019-09-15 07:10:05\ntags:\n- software\ncategories:\n- computer\n- linux\n---\n推荐使用nvm来管理node,[GitHub](https://github.com/creationix/nvm)\n\n","slug":"node-安装和升级","published":1,"updated":"2019-09-15T07:13:22.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx0v0005pspwfi2f2sy1","content":"<p>推荐使用nvm来管理node,<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>推荐使用nvm来管理node,<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n"},{"title":"收集的网站地址","date":"2019-09-15T04:16:56.000Z","_content":"|内容\t| 备注\t\t|\n|-------|---------------|\n|[Favicon](https://favicon.io/favicon-generator/)|生成Favicon |\n","source":"_posts/2019-09-15-收集的网站地址.md","raw":"---\ntitle: 收集的网站地址\ndate: 2019-09-15 12:16:56\ntags:\n- url\ncategories:\n- computer\n- other\n---\n|内容\t| 备注\t\t|\n|-------|---------------|\n|[Favicon](https://favicon.io/favicon-generator/)|生成Favicon |\n","slug":"收集的网站地址","published":1,"updated":"2019-09-15T12:24:38.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx0w0006pspw34az3nez","content":"<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://favicon.io/favicon-generator/\" target=\"_blank\" rel=\"noopener\">Favicon</a></td>\n<td>生成Favicon</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>内容</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://favicon.io/favicon-generator/\" target=\"_blank\" rel=\"noopener\">Favicon</a></td>\n<td>生成Favicon</td>\n</tr>\n</tbody></table>\n"},{"title":"Set TimeZone & NTP In Ubuntu","date":"2019-09-16T11:57:48.000Z","_content":"### TimeZone\n\n1. timedatectl list-timezones\n2. sudo timedatectl set-timezone Asia/Shanghai\n3. timedatectl\n\n### NTP\n\n1. sudo apt-get install ntp\n2. sntp --version\n3. sudo vim /etc/ntp.conf 选择[NTP server](https://support.ntp.org/bin/view/Servers/NTPPoolServers)\n4. sudo service ntp restart\n5. sudo service ntp status\n","source":"_posts/2019-09-16-Set-TimeZone-NTP-In-Ubuntu.md","raw":"---\ntitle: Set TimeZone & NTP In Ubuntu\ndate: 2019-09-16 19:57:48\ncategories: \n- computer\n- linux\ntags:\n- system\n---\n### TimeZone\n\n1. timedatectl list-timezones\n2. sudo timedatectl set-timezone Asia/Shanghai\n3. timedatectl\n\n### NTP\n\n1. sudo apt-get install ntp\n2. sntp --version\n3. sudo vim /etc/ntp.conf 选择[NTP server](https://support.ntp.org/bin/view/Servers/NTPPoolServers)\n4. sudo service ntp restart\n5. sudo service ntp status\n","slug":"Set-TimeZone-NTP-In-Ubuntu","published":1,"updated":"2021-08-15T07:11:16.962Z","_id":"ckb6kjx0z000apspwcpls7nig","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"TimeZone\"><a href=\"#TimeZone\" class=\"headerlink\" title=\"TimeZone\"></a>TimeZone</h3><ol>\n<li>timedatectl list-timezones</li>\n<li>sudo timedatectl set-timezone Asia/Shanghai</li>\n<li>timedatectl</li>\n</ol>\n<h3 id=\"NTP\"><a href=\"#NTP\" class=\"headerlink\" title=\"NTP\"></a>NTP</h3><ol>\n<li>sudo apt-get install ntp</li>\n<li>sntp –version</li>\n<li>sudo vim /etc/ntp.conf 选择<a href=\"https://support.ntp.org/bin/view/Servers/NTPPoolServers\">NTP server</a></li>\n<li>sudo service ntp restart</li>\n<li>sudo service ntp status</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TimeZone\"><a href=\"#TimeZone\" class=\"headerlink\" title=\"TimeZone\"></a>TimeZone</h3><ol>\n<li>timedatectl list-timezones</li>\n<li>sudo timedatectl set-timezone Asia/Shanghai</li>\n<li>timedatectl</li>\n</ol>\n<h3 id=\"NTP\"><a href=\"#NTP\" class=\"headerlink\" title=\"NTP\"></a>NTP</h3><ol>\n<li>sudo apt-get install ntp</li>\n<li>sntp –version</li>\n<li>sudo vim /etc/ntp.conf 选择<a href=\"https://support.ntp.org/bin/view/Servers/NTPPoolServers\">NTP server</a></li>\n<li>sudo service ntp restart</li>\n<li>sudo service ntp status</li>\n</ol>\n"},{"title":"Linux Shell Example","date":"2019-09-16T12:55:44.000Z","_content":"### grep\n```bash\n#-r 递归目录\n#-i 大小写不敏感\n#--exclude-dir 排除目录\n#--include 包含指定文件 \n#-l 只显示搜索到内容的文件名\n#-L 只显示搜索不到内容的文件名\ngrep -r --exclude-dir=node_modules --exclude-dir=build --include  \\*.js 'deve' ./\n","source":"_posts/2019-09-16-shell-Example.md","raw":"---\ntitle: Linux Shell Example\ndate: 2019-09-16 20:55:44\ntags:\n- shell\n- grep\ncategories: \n- computer\n- linux\n---\n### grep\n```bash\n#-r 递归目录\n#-i 大小写不敏感\n#--exclude-dir 排除目录\n#--include 包含指定文件 \n#-l 只显示搜索到内容的文件名\n#-L 只显示搜索不到内容的文件名\ngrep -r --exclude-dir=node_modules --exclude-dir=build --include  \\*.js 'deve' ./\n","slug":"shell-Example","published":1,"updated":"2019-09-16T13:27:56.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx12000bpspw5tgrdgrx","content":"<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><pre><code class=\"bash\"><span class=\"comment\">#-r 递归目录</span>\n<span class=\"comment\">#-i 大小写不敏感</span>\n<span class=\"comment\">#--exclude-dir 排除目录</span>\n<span class=\"comment\">#--include 包含指定文件 </span>\n<span class=\"comment\">#-l 只显示搜索到内容的文件名</span>\n<span class=\"comment\">#-L 只显示搜索不到内容的文件名</span>\ngrep -r --exclude-dir=node_modules --exclude-dir=build --include  \\*.js <span class=\"string\">'deve'</span> ./</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><pre><code class=\"bash\"><span class=\"comment\">#-r 递归目录</span>\n<span class=\"comment\">#-i 大小写不敏感</span>\n<span class=\"comment\">#--exclude-dir 排除目录</span>\n<span class=\"comment\">#--include 包含指定文件 </span>\n<span class=\"comment\">#-l 只显示搜索到内容的文件名</span>\n<span class=\"comment\">#-L 只显示搜索不到内容的文件名</span>\ngrep -r --exclude-dir=node_modules --exclude-dir=build --include  \\*.js <span class=\"string\">'deve'</span> ./</code></pre>\n"},{"title":"vim plugin","date":"2019-09-16T12:25:36.000Z","_content":"插件管理使用[pathogen](https://github.com/tpope/vim-pathogen)\n插件列表:\n- camelcasemotion\n- nerdcommenter\n- undotree\n- vim-airline\n- vim-bufonly\n- vim-easymotion\n- vim-markdown\n- vim-surround\n- ag\n- auto-pairs\n- deoplete.nvim\n- vim-prettier\n- awesome-vim-colorschemes\n- nerdtree\n- vim-gitgutter\n","source":"_posts/2019-09-16-vim-plugin.md","raw":"---\ntitle: vim plugin\ndate: 2019-09-16 20:25:36\ncategories:\n- computer\n- linux\ntags:\n- vim\n---\n插件管理使用[pathogen](https://github.com/tpope/vim-pathogen)\n插件列表:\n- camelcasemotion\n- nerdcommenter\n- undotree\n- vim-airline\n- vim-bufonly\n- vim-easymotion\n- vim-markdown\n- vim-surround\n- ag\n- auto-pairs\n- deoplete.nvim\n- vim-prettier\n- awesome-vim-colorschemes\n- nerdtree\n- vim-gitgutter\n","slug":"vim-plugin","published":1,"updated":"2020-06-08T14:50:55.407Z","_id":"ckb6kjx14000fpspw24pe5poa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>插件管理使用<a href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"noopener\">pathogen</a><br>插件列表:</p>\n<ul>\n<li>camelcasemotion</li>\n<li>nerdcommenter</li>\n<li>undotree</li>\n<li>vim-airline</li>\n<li>vim-bufonly</li>\n<li>vim-easymotion</li>\n<li>vim-markdown</li>\n<li>vim-surround</li>\n<li>ag</li>\n<li>auto-pairs</li>\n<li>deoplete.nvim</li>\n<li>vim-prettier</li>\n<li>awesome-vim-colorschemes</li>\n<li>nerdtree</li>\n<li>vim-gitgutter</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>插件管理使用<a href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"noopener\">pathogen</a><br>插件列表:</p>\n<ul>\n<li>camelcasemotion</li>\n<li>nerdcommenter</li>\n<li>undotree</li>\n<li>vim-airline</li>\n<li>vim-bufonly</li>\n<li>vim-easymotion</li>\n<li>vim-markdown</li>\n<li>vim-surround</li>\n<li>ag</li>\n<li>auto-pairs</li>\n<li>deoplete.nvim</li>\n<li>vim-prettier</li>\n<li>awesome-vim-colorschemes</li>\n<li>nerdtree</li>\n<li>vim-gitgutter</li>\n</ul>\n"},{"title":"KMS","date":"2019-09-18T12:10:13.000Z","_content":"**命令行激活,请使用管理员权限**\n\n激活WINDOWS\n1. slmgr /skms X.X.X.X. 设置kms服务器\n2. slmgr /ipk xxxx-xxxx-xxxx-xxxx 更换Key\n3. slmgr /ato 激活\n\n激活OFFICE\n1. ospp.vbs(C:\\program files\\microsoft office\\officeXX) 注意32位版x86目录\n2. cscript ospp.vbs /sethst:X.X.X.X\n3. cscript ospp.vbs /act\n\n其他\n* wmic os get caption 查看系统版本\n* slmgr /dlv 详细许可证信息\n* [kms服务器](https://github.com/Wind4/vlmcsd)\n* [序列号](https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys)\n\n\n","source":"_posts/2019-09-18-KMS.md","raw":"---\ntitle: KMS\ndate: 2019-09-18 20:10:13\ntags: \n- system\ncategories: \n- computer\n- windows\n---\n**命令行激活,请使用管理员权限**\n\n激活WINDOWS\n1. slmgr /skms X.X.X.X. 设置kms服务器\n2. slmgr /ipk xxxx-xxxx-xxxx-xxxx 更换Key\n3. slmgr /ato 激活\n\n激活OFFICE\n1. ospp.vbs(C:\\program files\\microsoft office\\officeXX) 注意32位版x86目录\n2. cscript ospp.vbs /sethst:X.X.X.X\n3. cscript ospp.vbs /act\n\n其他\n* wmic os get caption 查看系统版本\n* slmgr /dlv 详细许可证信息\n* [kms服务器](https://github.com/Wind4/vlmcsd)\n* [序列号](https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys)\n\n\n","slug":"KMS","published":1,"updated":"2019-09-20T12:25:46.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx16000hpspw2uny17st","content":"<p><strong>命令行激活,请使用管理员权限</strong></p>\n<p>激活WINDOWS</p>\n<ol>\n<li>slmgr /skms X.X.X.X. 设置kms服务器</li>\n<li>slmgr /ipk xxxx-xxxx-xxxx-xxxx 更换Key</li>\n<li>slmgr /ato 激活</li>\n</ol>\n<p>激活OFFICE</p>\n<ol>\n<li>ospp.vbs(C:\\program files\\microsoft office\\officeXX) 注意32位版x86目录</li>\n<li>cscript ospp.vbs /sethst:X.X.X.X</li>\n<li>cscript ospp.vbs /act</li>\n</ol>\n<p>其他</p>\n<ul>\n<li>wmic os get caption 查看系统版本</li>\n<li>slmgr /dlv 详细许可证信息</li>\n<li><a href=\"https://github.com/Wind4/vlmcsd\" target=\"_blank\" rel=\"noopener\">kms服务器</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys\" target=\"_blank\" rel=\"noopener\">序列号</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>命令行激活,请使用管理员权限</strong></p>\n<p>激活WINDOWS</p>\n<ol>\n<li>slmgr /skms X.X.X.X. 设置kms服务器</li>\n<li>slmgr /ipk xxxx-xxxx-xxxx-xxxx 更换Key</li>\n<li>slmgr /ato 激活</li>\n</ol>\n<p>激活OFFICE</p>\n<ol>\n<li>ospp.vbs(C:\\program files\\microsoft office\\officeXX) 注意32位版x86目录</li>\n<li>cscript ospp.vbs /sethst:X.X.X.X</li>\n<li>cscript ospp.vbs /act</li>\n</ol>\n<p>其他</p>\n<ul>\n<li>wmic os get caption 查看系统版本</li>\n<li>slmgr /dlv 详细许可证信息</li>\n<li><a href=\"https://github.com/Wind4/vlmcsd\" target=\"_blank\" rel=\"noopener\">kms服务器</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys\" target=\"_blank\" rel=\"noopener\">序列号</a></li>\n</ul>\n"},{"title":"Windows AD Time","date":"2019-09-18T13:16:54.000Z","_content":"![](/images/ad_time.gif)\n### Windows AD域(单域)内的时间同步只需掌握以下几点:\n*** 域内工作站/服务器与登陆时的联络的DC同步时间，此DC与Root PDC角色的DC同步时间。***\n\n*有效的时间服务器可查询 http://www.pool.ntp.org/*\n\n1. 域控(Root PDC角色)上需要与外部时间源同步,命令如下:\n  W32tm /config /manualpeerlist:time.nrc.ca /syncfromflags:manual /reliable:yes /update  \n  W32tm /resync /rediscover  \n  net stop w32time && net start w32time  \n\n2. 域控(非PDC角色),运行以下命令:\n  w32tm /config /syncfromflags:domhier /update  \n  w32tm /resync /rediscover  \n  net stop w32time && net start w32time  \n\n3. 遇到问题，重建时间配置：\n  net stop w32time\n  w32tm /unregister\n  w32tm /register\n  net start w32time\n\n\n* 域内机器同步: net time \\DC Name或ip /set /y\n* 查看时间源: w32tm /monitor\n* 查看登录服务器: echo %logonserver%\n","source":"_posts/2019-09-18-Windows-AD-Time.md","raw":"---\ntitle: Windows AD Time\ndate: 2019-09-18 21:16:54\ntags: \n- system\ncategories: \n- computer\n- windows\n---\n![](/images/ad_time.gif)\n### Windows AD域(单域)内的时间同步只需掌握以下几点:\n*** 域内工作站/服务器与登陆时的联络的DC同步时间，此DC与Root PDC角色的DC同步时间。***\n\n*有效的时间服务器可查询 http://www.pool.ntp.org/*\n\n1. 域控(Root PDC角色)上需要与外部时间源同步,命令如下:\n  W32tm /config /manualpeerlist:time.nrc.ca /syncfromflags:manual /reliable:yes /update  \n  W32tm /resync /rediscover  \n  net stop w32time && net start w32time  \n\n2. 域控(非PDC角色),运行以下命令:\n  w32tm /config /syncfromflags:domhier /update  \n  w32tm /resync /rediscover  \n  net stop w32time && net start w32time  \n\n3. 遇到问题，重建时间配置：\n  net stop w32time\n  w32tm /unregister\n  w32tm /register\n  net start w32time\n\n\n* 域内机器同步: net time \\DC Name或ip /set /y\n* 查看时间源: w32tm /monitor\n* 查看登录服务器: echo %logonserver%\n","slug":"Windows-AD-Time","published":1,"updated":"2019-09-19T12:04:26.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx18000kpspwe95l09a2","content":"<p><img src=\"/images/ad_time.gif\" alt=\"\"></p>\n<h3 id=\"Windows-AD域-单域-内的时间同步只需掌握以下几点\"><a href=\"#Windows-AD域-单域-内的时间同步只需掌握以下几点\" class=\"headerlink\" title=\"Windows AD域(单域)内的时间同步只需掌握以下几点:\"></a>Windows AD域(单域)内的时间同步只需掌握以下几点:</h3><p><strong>* 域内工作站/服务器与登陆时的联络的DC同步时间，此DC与Root PDC角色的DC同步时间。*</strong></p>\n<p><em>有效的时间服务器可查询 <a href=\"http://www.pool.ntp.org/\" target=\"_blank\" rel=\"noopener\">http://www.pool.ntp.org/</a></em></p>\n<ol>\n<li><p>域控(Root PDC角色)上需要与外部时间源同步,命令如下:<br>W32tm /config /manualpeerlist:time.nrc.ca /syncfromflags:manual /reliable:yes /update<br>W32tm /resync /rediscover<br>net stop w32time &amp;&amp; net start w32time  </p>\n</li>\n<li><p>域控(非PDC角色),运行以下命令:<br>w32tm /config /syncfromflags:domhier /update<br>w32tm /resync /rediscover<br>net stop w32time &amp;&amp; net start w32time  </p>\n</li>\n<li><p>遇到问题，重建时间配置：<br>net stop w32time<br>w32tm /unregister<br>w32tm /register<br>net start w32time</p>\n</li>\n</ol>\n<ul>\n<li>域内机器同步: net time \\DC Name或ip /set /y</li>\n<li>查看时间源: w32tm /monitor</li>\n<li>查看登录服务器: echo %logonserver%</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/ad_time.gif\" alt=\"\"></p>\n<h3 id=\"Windows-AD域-单域-内的时间同步只需掌握以下几点\"><a href=\"#Windows-AD域-单域-内的时间同步只需掌握以下几点\" class=\"headerlink\" title=\"Windows AD域(单域)内的时间同步只需掌握以下几点:\"></a>Windows AD域(单域)内的时间同步只需掌握以下几点:</h3><p><strong>* 域内工作站/服务器与登陆时的联络的DC同步时间，此DC与Root PDC角色的DC同步时间。*</strong></p>\n<p><em>有效的时间服务器可查询 <a href=\"http://www.pool.ntp.org/\" target=\"_blank\" rel=\"noopener\">http://www.pool.ntp.org/</a></em></p>\n<ol>\n<li><p>域控(Root PDC角色)上需要与外部时间源同步,命令如下:<br>W32tm /config /manualpeerlist:time.nrc.ca /syncfromflags:manual /reliable:yes /update<br>W32tm /resync /rediscover<br>net stop w32time &amp;&amp; net start w32time  </p>\n</li>\n<li><p>域控(非PDC角色),运行以下命令:<br>w32tm /config /syncfromflags:domhier /update<br>w32tm /resync /rediscover<br>net stop w32time &amp;&amp; net start w32time  </p>\n</li>\n<li><p>遇到问题，重建时间配置：<br>net stop w32time<br>w32tm /unregister<br>w32tm /register<br>net start w32time</p>\n</li>\n</ol>\n<ul>\n<li>域内机器同步: net time \\DC Name或ip /set /y</li>\n<li>查看时间源: w32tm /monitor</li>\n<li>查看登录服务器: echo %logonserver%</li>\n</ul>\n"},{"title":"SQL2000 孤立用户修复","date":"2019-09-21T11:23:55.000Z","_content":"### 孤立用户的产生\n\n*当我们把备份的数据库恢复到新服务器时，原有的数据库用户名没有对应的登录名。就产生了孤立用户。*\n\n解决方法之一：使登录用户和数据库的孤立用户对应起来\n**存储过程- sp_change_users_login. 可使用3种操作(report, update_one ,auto_fix)**\n– 列出孤立用户\n  sp_change_users_login ‘report’\n– 连接孤立用户(登录名已建)\n  sp_change_users_login ‘update_one’,’用户名’,’登录名’\n– 自动连接孤立用户\n  sp_change_users_login ‘Auto_Fix’,’用户名’,NULL,’登录密码’\n\n","source":"_posts/2019-09-21-SQL2000-孤立用户修复.md","raw":"---\ntitle: SQL2000 孤立用户修复\ndate: 2019-09-21 19:23:55\ntags: \n- sql\ncategories: \n- computer\n- windows\n---\n### 孤立用户的产生\n\n*当我们把备份的数据库恢复到新服务器时，原有的数据库用户名没有对应的登录名。就产生了孤立用户。*\n\n解决方法之一：使登录用户和数据库的孤立用户对应起来\n**存储过程- sp_change_users_login. 可使用3种操作(report, update_one ,auto_fix)**\n– 列出孤立用户\n  sp_change_users_login ‘report’\n– 连接孤立用户(登录名已建)\n  sp_change_users_login ‘update_one’,’用户名’,’登录名’\n– 自动连接孤立用户\n  sp_change_users_login ‘Auto_Fix’,’用户名’,NULL,’登录密码’\n\n","slug":"SQL2000-孤立用户修复","published":1,"updated":"2019-09-21T11:30:33.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx19000mpspw6zfgeru3","content":"<h3 id=\"孤立用户的产生\"><a href=\"#孤立用户的产生\" class=\"headerlink\" title=\"孤立用户的产生\"></a>孤立用户的产生</h3><p><em>当我们把备份的数据库恢复到新服务器时，原有的数据库用户名没有对应的登录名。就产生了孤立用户。</em></p>\n<p>解决方法之一：使登录用户和数据库的孤立用户对应起来<br><strong>存储过程- sp_change_users_login. 可使用3种操作(report, update_one ,auto_fix)</strong><br>– 列出孤立用户<br>  sp_change_users_login ‘report’<br>– 连接孤立用户(登录名已建)<br>  sp_change_users_login ‘update_one’,’用户名’,’登录名’<br>– 自动连接孤立用户<br>  sp_change_users_login ‘Auto_Fix’,’用户名’,NULL,’登录密码’</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"孤立用户的产生\"><a href=\"#孤立用户的产生\" class=\"headerlink\" title=\"孤立用户的产生\"></a>孤立用户的产生</h3><p><em>当我们把备份的数据库恢复到新服务器时，原有的数据库用户名没有对应的登录名。就产生了孤立用户。</em></p>\n<p>解决方法之一：使登录用户和数据库的孤立用户对应起来<br><strong>存储过程- sp_change_users_login. 可使用3种操作(report, update_one ,auto_fix)</strong><br>– 列出孤立用户<br>  sp_change_users_login ‘report’<br>– 连接孤立用户(登录名已建)<br>  sp_change_users_login ‘update_one’,’用户名’,’登录名’<br>– 自动连接孤立用户<br>  sp_change_users_login ‘Auto_Fix’,’用户名’,NULL,’登录密码’</p>\n"},{"title":"JS THIS","date":"2019-09-21T11:46:11.000Z","_content":"Javascript 的this绑定使用时容易混淆，是语言的一个设计失误。而Js的闭包是这门语言的精髓。其实this是由函数的调用方式决定的，this代表函数执行时的上下文，而函数的调用有五种\n\n```javascript\nfunction ex1(name) {}\nfunction Obj(name) {}\nvar obj = {\n  ex1: function() {}\n};\n\nex1('li'); //直接调用\nobj.ex1('li'); //方法调用\nobjnew = new Obj('li'); //构造器\nex1.call(objnew ,'li'); //call方法\nex1.apply(objnew ,['li']);&nbsp; // apply 方法\n```\n+ 函数直接执行: 严格模式下是undefine,非严格模式是global context.(浏览器中是Window对象).\n+ 函数做为对象的方法被调用: this绑定到对象.\n+ 函数做为构造器被调用(new): this绑定到创建的对象\n+ call / apply 调用时可指定this对象.\n\n","source":"_posts/2019-09-21-js-this.md","raw":"---\ntitle: JS THIS\ndate: 2019-09-21 19:46:11\ntags:\n- program\ncategories: \n- computer\n- linux\n---\nJavascript 的this绑定使用时容易混淆，是语言的一个设计失误。而Js的闭包是这门语言的精髓。其实this是由函数的调用方式决定的，this代表函数执行时的上下文，而函数的调用有五种\n\n```javascript\nfunction ex1(name) {}\nfunction Obj(name) {}\nvar obj = {\n  ex1: function() {}\n};\n\nex1('li'); //直接调用\nobj.ex1('li'); //方法调用\nobjnew = new Obj('li'); //构造器\nex1.call(objnew ,'li'); //call方法\nex1.apply(objnew ,['li']);&nbsp; // apply 方法\n```\n+ 函数直接执行: 严格模式下是undefine,非严格模式是global context.(浏览器中是Window对象).\n+ 函数做为对象的方法被调用: this绑定到对象.\n+ 函数做为构造器被调用(new): this绑定到创建的对象\n+ call / apply 调用时可指定this对象.\n\n","slug":"js-this","published":1,"updated":"2019-09-21T11:52:37.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1b000qpspwel9l37ze","content":"<p>Javascript 的this绑定使用时容易混淆，是语言的一个设计失误。而Js的闭包是这门语言的精髓。其实this是由函数的调用方式决定的，this代表函数执行时的上下文，而函数的调用有五种</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ex1</span>(<span class=\"params\">name</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">name</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  ex1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ex1(<span class=\"string\">'li'</span>); <span class=\"comment\">//直接调用</span></span><br><span class=\"line\">obj.ex1(<span class=\"string\">'li'</span>); <span class=\"comment\">//方法调用</span></span><br><span class=\"line\">objnew = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'li'</span>); <span class=\"comment\">//构造器</span></span><br><span class=\"line\">ex1.call(objnew ,<span class=\"string\">'li'</span>); <span class=\"comment\">//call方法</span></span><br><span class=\"line\">ex1.apply(objnew ,[<span class=\"string\">'li'</span>]);&amp;nbsp; <span class=\"comment\">// apply 方法</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数直接执行: 严格模式下是undefine,非严格模式是global context.(浏览器中是Window对象).</li>\n<li>函数做为对象的方法被调用: this绑定到对象.</li>\n<li>函数做为构造器被调用(new): this绑定到创建的对象</li>\n<li>call / apply 调用时可指定this对象.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Javascript 的this绑定使用时容易混淆，是语言的一个设计失误。而Js的闭包是这门语言的精髓。其实this是由函数的调用方式决定的，this代表函数执行时的上下文，而函数的调用有五种</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ex1</span>(<span class=\"params\">name</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">name</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  ex1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ex1(<span class=\"string\">'li'</span>); <span class=\"comment\">//直接调用</span></span><br><span class=\"line\">obj.ex1(<span class=\"string\">'li'</span>); <span class=\"comment\">//方法调用</span></span><br><span class=\"line\">objnew = <span class=\"keyword\">new</span> Obj(<span class=\"string\">'li'</span>); <span class=\"comment\">//构造器</span></span><br><span class=\"line\">ex1.call(objnew ,<span class=\"string\">'li'</span>); <span class=\"comment\">//call方法</span></span><br><span class=\"line\">ex1.apply(objnew ,[<span class=\"string\">'li'</span>]);&amp;nbsp; <span class=\"comment\">// apply 方法</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数直接执行: 严格模式下是undefine,非严格模式是global context.(浏览器中是Window对象).</li>\n<li>函数做为对象的方法被调用: this绑定到对象.</li>\n<li>函数做为构造器被调用(new): this绑定到创建的对象</li>\n<li>call / apply 调用时可指定this对象.</li>\n</ul>\n"},{"title":"SED","date":"2019-09-21T11:33:04.000Z","_content":"**两种执行方式**\n-n 禁止默认输出\n```bash\nsed [-n] [-e] 'command' file(s)\nsed [-n] -f scriptfile file(s)\n```\ncommand结构\n```\n- [addr [,addr]] [!] action [arguments]\n- [/pattern/[,/pattern/]] {\n  cmd\n  cmd\n}\n```\n\naction\n- a 拼接\n- c 替换\n- i 插入\n- d 删除\n- s 替换\n- y 翻译\n- p 打印\n\n**举例**\n```Bash\n# only print\nsed -ne '/regexp/p' inputfile(s)\nsed -n '/GREEN/,$p' inputfile(s)\n\n# append after the pattern (-i 直接修改源文件)\nsed -i '/pattern/a \\\nline1 \\\nline2' inputfile\n\n# insert before the pattern\nsed -i '/This is line two/i\\your text 1\\nyout text 2' inputfile(s)\n```\n\n\n","source":"_posts/2019-09-21-sed.md","raw":"---\ntitle: SED\ndate: 2019-09-21 19:33:04\ntags: \n- shell\ncategories: \n- computer\n- linux\n---\n**两种执行方式**\n-n 禁止默认输出\n```bash\nsed [-n] [-e] 'command' file(s)\nsed [-n] -f scriptfile file(s)\n```\ncommand结构\n```\n- [addr [,addr]] [!] action [arguments]\n- [/pattern/[,/pattern/]] {\n  cmd\n  cmd\n}\n```\n\naction\n- a 拼接\n- c 替换\n- i 插入\n- d 删除\n- s 替换\n- y 翻译\n- p 打印\n\n**举例**\n```Bash\n# only print\nsed -ne '/regexp/p' inputfile(s)\nsed -n '/GREEN/,$p' inputfile(s)\n\n# append after the pattern (-i 直接修改源文件)\nsed -i '/pattern/a \\\nline1 \\\nline2' inputfile\n\n# insert before the pattern\nsed -i '/This is line two/i\\your text 1\\nyout text 2' inputfile(s)\n```\n\n\n","slug":"sed","published":1,"updated":"2019-10-05T11:46:01.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1d000spspw4iwja9yv","content":"<p><strong>两种执行方式</strong><br>-n 禁止默认输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [-n] [-e] <span class=\"string\">'command'</span> file(s)</span><br><span class=\"line\">sed [-n] -f scriptfile file(s)</span><br></pre></td></tr></table></figure>\n<p>command结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [addr [,addr]] [!] action [arguments]</span><br><span class=\"line\">- [&#x2F;pattern&#x2F;[,&#x2F;pattern&#x2F;]] &#123;</span><br><span class=\"line\">  cmd</span><br><span class=\"line\">  cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action</p>\n<ul>\n<li>a 拼接</li>\n<li>c 替换</li>\n<li>i 插入</li>\n<li>d 删除</li>\n<li>s 替换</li>\n<li>y 翻译</li>\n<li>p 打印</li>\n</ul>\n<p><strong>举例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># only print</span></span><br><span class=\"line\">sed -ne <span class=\"string\">'/regexp/p'</span> inputfile(s)</span><br><span class=\"line\">sed -n <span class=\"string\">'/GREEN/,$p'</span> inputfile(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># append after the pattern (-i 直接修改源文件)</span></span><br><span class=\"line\">sed -i <span class=\"string\">'/pattern/a \\</span></span><br><span class=\"line\"><span class=\"string\">line1 \\</span></span><br><span class=\"line\"><span class=\"string\">line2'</span> inputfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># insert before the pattern</span></span><br><span class=\"line\">sed -i <span class=\"string\">'/This is line two/i\\your text 1\\nyout text 2'</span> inputfile(s)</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>两种执行方式</strong><br>-n 禁止默认输出</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [-n] [-e] <span class=\"string\">'command'</span> file(s)</span><br><span class=\"line\">sed [-n] -f scriptfile file(s)</span><br></pre></td></tr></table></figure>\n<p>command结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [addr [,addr]] [!] action [arguments]</span><br><span class=\"line\">- [&#x2F;pattern&#x2F;[,&#x2F;pattern&#x2F;]] &#123;</span><br><span class=\"line\">  cmd</span><br><span class=\"line\">  cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>action</p>\n<ul>\n<li>a 拼接</li>\n<li>c 替换</li>\n<li>i 插入</li>\n<li>d 删除</li>\n<li>s 替换</li>\n<li>y 翻译</li>\n<li>p 打印</li>\n</ul>\n<p><strong>举例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># only print</span></span><br><span class=\"line\">sed -ne <span class=\"string\">'/regexp/p'</span> inputfile(s)</span><br><span class=\"line\">sed -n <span class=\"string\">'/GREEN/,$p'</span> inputfile(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># append after the pattern (-i 直接修改源文件)</span></span><br><span class=\"line\">sed -i <span class=\"string\">'/pattern/a \\</span></span><br><span class=\"line\"><span class=\"string\">line1 \\</span></span><br><span class=\"line\"><span class=\"string\">line2'</span> inputfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># insert before the pattern</span></span><br><span class=\"line\">sed -i <span class=\"string\">'/This is line two/i\\your text 1\\nyout text 2'</span> inputfile(s)</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Bash For Loop Examples(转载)","date":"2019-09-22T11:25:08.000Z","_content":"[转载](http://www.cyberciti.biz/faq/bash-for-loop/)\n```Bash\nfor VARIABLE in 1 2 3 4 5 .. N\ndo\n  command1\n  command2\n  commandN\ndone\n```\n```Bash\nfor VARIABLE in file1 file2 file3\ndo\n  command1 on $VARIABLE\n  command2\n  commandN\ndone\n```\n```Bash\nfor OUTPUT in $(Linux-Or-Unix-Command-Here)\ndo\n  command1 on $OUTPUT\n  command2 on $OUTPUT\n  commandN\ndone\n```\n```Bash\nfor (( EXP1; EXP2; EXP3 ))\ndo\n  command1\n  command2\n  command3\ndone\n```\n```Bash\n#!/bin/bash\nfor (( c=1; c&lt;=5; c++ ))\ndo\n echo \"Welcome $c times\"\ndone\n```\n```Bash\n#infinite loops\nfor (( ; ; ))\ndo\n  echo \"infinite loops [ hit CTRL+C to stop]\"\ndone\n```\n```Bash\n#!/bin/bash\nfor file in /etc/*\ndo\n  if [ \"${file}\" == \"/etc/resolv.conf\" ]\n  then\n    countNameservers=$(grep -c nameserver /etc/resolv.conf)\n    echo \"Total  ${countNameservers} nameservers defined in ${file}\"\n    break\n  fi\ndone\n```\n```Bash\n#!/bin/bash\nFILES=\"$@\"\nfor f in $FILES\ndo\n  # if .bak backup file exists, read next file\n  if [ -f ${f}.bak ]\n  then\n    echo \"Skiping $f file...\"\n    continue  # read next file and skip cp command\n  fi\n  # we are hear means no backup file exists, just use cp command to copy file\n  /bin/cp $f $f.bak\ndone\n```\n","source":"_posts/2019-09-22-Bash-For-Loop-Examples-转载.md","raw":"---\ntitle: Bash For Loop Examples(转载)\ndate: 2019-09-22 19:25:08\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n[转载](http://www.cyberciti.biz/faq/bash-for-loop/)\n```Bash\nfor VARIABLE in 1 2 3 4 5 .. N\ndo\n  command1\n  command2\n  commandN\ndone\n```\n```Bash\nfor VARIABLE in file1 file2 file3\ndo\n  command1 on $VARIABLE\n  command2\n  commandN\ndone\n```\n```Bash\nfor OUTPUT in $(Linux-Or-Unix-Command-Here)\ndo\n  command1 on $OUTPUT\n  command2 on $OUTPUT\n  commandN\ndone\n```\n```Bash\nfor (( EXP1; EXP2; EXP3 ))\ndo\n  command1\n  command2\n  command3\ndone\n```\n```Bash\n#!/bin/bash\nfor (( c=1; c&lt;=5; c++ ))\ndo\n echo \"Welcome $c times\"\ndone\n```\n```Bash\n#infinite loops\nfor (( ; ; ))\ndo\n  echo \"infinite loops [ hit CTRL+C to stop]\"\ndone\n```\n```Bash\n#!/bin/bash\nfor file in /etc/*\ndo\n  if [ \"${file}\" == \"/etc/resolv.conf\" ]\n  then\n    countNameservers=$(grep -c nameserver /etc/resolv.conf)\n    echo \"Total  ${countNameservers} nameservers defined in ${file}\"\n    break\n  fi\ndone\n```\n```Bash\n#!/bin/bash\nFILES=\"$@\"\nfor f in $FILES\ndo\n  # if .bak backup file exists, read next file\n  if [ -f ${f}.bak ]\n  then\n    echo \"Skiping $f file...\"\n    continue  # read next file and skip cp command\n  fi\n  # we are hear means no backup file exists, just use cp command to copy file\n  /bin/cp $f $f.bak\ndone\n```\n","slug":"Bash-For-Loop-Examples-转载","published":1,"updated":"2019-09-22T11:50:50.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1e000wpspw5g6e6nnk","content":"<p><a href=\"http://www.cyberciti.biz/faq/bash-for-loop/\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> VARIABLE <span class=\"keyword\">in</span> 1 2 3 4 5 .. N</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1</span><br><span class=\"line\">  command2</span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> VARIABLE <span class=\"keyword\">in</span> file1 file2 file3</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1 on <span class=\"variable\">$VARIABLE</span></span><br><span class=\"line\">  command2</span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> OUTPUT <span class=\"keyword\">in</span> $(Linux-Or-Unix-Command-Here)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1 on <span class=\"variable\">$OUTPUT</span></span><br><span class=\"line\">  command2 on <span class=\"variable\">$OUTPUT</span></span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( EXP1; EXP2; EXP3 ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1</span><br><span class=\"line\">  command2</span><br><span class=\"line\">  command3</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( c=1; c&amp;lt;=5; c++ ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"Welcome <span class=\"variable\">$c</span> times\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#infinite loops</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"infinite loops [ hit CTRL+C to stop]\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> /etc/*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;file&#125;</span>\"</span> == <span class=\"string\">\"/etc/resolv.conf\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    countNameservers=$(grep -c nameserver /etc/resolv.conf)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Total  <span class=\"variable\">$&#123;countNameservers&#125;</span> nameservers defined in <span class=\"variable\">$&#123;file&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">FILES=<span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$FILES</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># if .bak backup file exists, read next file</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$&#123;f&#125;</span>.bak ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Skiping <span class=\"variable\">$f</span> file...\"</span></span><br><span class=\"line\">    <span class=\"built_in\">continue</span>  <span class=\"comment\"># read next file and skip cp command</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"comment\"># we are hear means no backup file exists, just use cp command to copy file</span></span><br><span class=\"line\">  /bin/cp <span class=\"variable\">$f</span> <span class=\"variable\">$f</span>.bak</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cyberciti.biz/faq/bash-for-loop/\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> VARIABLE <span class=\"keyword\">in</span> 1 2 3 4 5 .. N</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1</span><br><span class=\"line\">  command2</span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> VARIABLE <span class=\"keyword\">in</span> file1 file2 file3</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1 on <span class=\"variable\">$VARIABLE</span></span><br><span class=\"line\">  command2</span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> OUTPUT <span class=\"keyword\">in</span> $(Linux-Or-Unix-Command-Here)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1 on <span class=\"variable\">$OUTPUT</span></span><br><span class=\"line\">  command2 on <span class=\"variable\">$OUTPUT</span></span><br><span class=\"line\">  commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( EXP1; EXP2; EXP3 ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  command1</span><br><span class=\"line\">  command2</span><br><span class=\"line\">  command3</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( c=1; c&amp;lt;=5; c++ ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"Welcome <span class=\"variable\">$c</span> times\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#infinite loops</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( ; ; ))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"infinite loops [ hit CTRL+C to stop]\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> /etc/*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;file&#125;</span>\"</span> == <span class=\"string\">\"/etc/resolv.conf\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    countNameservers=$(grep -c nameserver /etc/resolv.conf)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Total  <span class=\"variable\">$&#123;countNameservers&#125;</span> nameservers defined in <span class=\"variable\">$&#123;file&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">FILES=<span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$FILES</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># if .bak backup file exists, read next file</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$&#123;f&#125;</span>.bak ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Skiping <span class=\"variable\">$f</span> file...\"</span></span><br><span class=\"line\">    <span class=\"built_in\">continue</span>  <span class=\"comment\"># read next file and skip cp command</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"comment\"># we are hear means no backup file exists, just use cp command to copy file</span></span><br><span class=\"line\">  /bin/cp <span class=\"variable\">$f</span> <span class=\"variable\">$f</span>.bak</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Bash中的环境变量拼接","date":"2019-09-22T10:44:27.000Z","_content":"  我们知道在Linux中取出变量使用$符号，当我第一次看到表达式PATH=$PATH:/usr/game时，我不能理解Shell是如何将字符串连接起来的,按照使用其他语言的经验，没有字符串连接运算符啊，后来偶然查到资料，前述表达式实际上就是PATH=\"$PATH:/usr/game\"，省略害死人。\n","source":"_posts/2019-09-22-Bash中的环境变量拼接.md","raw":"---\ntitle: Bash中的环境变量拼接\ndate: 2019-09-22 18:44:27\ntags: \n- shell\ncategories: \n- computer\n- linux\n---\n  我们知道在Linux中取出变量使用$符号，当我第一次看到表达式PATH=$PATH:/usr/game时，我不能理解Shell是如何将字符串连接起来的,按照使用其他语言的经验，没有字符串连接运算符啊，后来偶然查到资料，前述表达式实际上就是PATH=\"$PATH:/usr/game\"，省略害死人。\n","slug":"Bash中的环境变量拼接","published":1,"updated":"2019-09-22T10:45:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1g0010pspwbojab5no","content":"<p>  我们知道在Linux中取出变量使用$符号，当我第一次看到表达式PATH=$PATH:/usr/game时，我不能理解Shell是如何将字符串连接起来的,按照使用其他语言的经验，没有字符串连接运算符啊，后来偶然查到资料，前述表达式实际上就是PATH=”$PATH:/usr/game”，省略害死人。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  我们知道在Linux中取出变量使用$符号，当我第一次看到表达式PATH=$PATH:/usr/game时，我不能理解Shell是如何将字符串连接起来的,按照使用其他语言的经验，没有字符串连接运算符啊，后来偶然查到资料，前述表达式实际上就是PATH=”$PATH:/usr/game”，省略害死人。</p>\n"},{"title":"JS 函数上下文 闭包","date":"2019-09-22T10:37:48.000Z","_content":"* 在传统的OO语言中，函数的上下文是由声明函数时确定的，例如静态函数通过类名调用，上下文是类。非静态函数通过类的实例调用，上下文是类的实例。而在javascript中函数首先是一个对象，**它的上下文不能由声明时确定，而是由谁来调用来确定**。也可通过使用call()和apply()来强行指定上下文。\n* **闭包就是一个函数实例，该实例执行时需要的局部变量，来自其声明处。**\n","source":"_posts/2019-09-22-JS-函数上下文-闭包.md","raw":"---\ntitle: JS 函数上下文 闭包\ndate: 2019-09-22 18:37:48\ntags: \n- program\ncategories: \n- computer\n- linux\n---\n* 在传统的OO语言中，函数的上下文是由声明函数时确定的，例如静态函数通过类名调用，上下文是类。非静态函数通过类的实例调用，上下文是类的实例。而在javascript中函数首先是一个对象，**它的上下文不能由声明时确定，而是由谁来调用来确定**。也可通过使用call()和apply()来强行指定上下文。\n* **闭包就是一个函数实例，该实例执行时需要的局部变量，来自其声明处。**\n","slug":"JS-函数上下文-闭包","published":1,"updated":"2019-09-22T10:40:42.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1i0014pspw4c0h91ht","content":"<ul>\n<li>在传统的OO语言中，函数的上下文是由声明函数时确定的，例如静态函数通过类名调用，上下文是类。非静态函数通过类的实例调用，上下文是类的实例。而在javascript中函数首先是一个对象，<strong>它的上下文不能由声明时确定，而是由谁来调用来确定</strong>。也可通过使用call()和apply()来强行指定上下文。</li>\n<li><strong>闭包就是一个函数实例，该实例执行时需要的局部变量，来自其声明处。</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在传统的OO语言中，函数的上下文是由声明函数时确定的，例如静态函数通过类名调用，上下文是类。非静态函数通过类的实例调用，上下文是类的实例。而在javascript中函数首先是一个对象，<strong>它的上下文不能由声明时确定，而是由谁来调用来确定</strong>。也可通过使用call()和apply()来强行指定上下文。</li>\n<li><strong>闭包就是一个函数实例，该实例执行时需要的局部变量，来自其声明处。</strong></li>\n</ul>\n"},{"title":"Linux Find Example","date":"2019-09-22T10:55:20.000Z","_content":"* 名字\n  ```Bash\n  find . -name \"lizhen.c\"; \n  find / -iname \"lizhen.c\"\n  ```\n* 目录深度\n  ```Bash\n  find -maxdepth 2 -name passwd ; \n  find / -mindepth 3 - maxdepth 5 -name passwd\n  ```\n* 反向\n  ```Bash\n  find -not -iname \"lizhen.c\"\n  ```\n* 执行命令\n  ```Bash\n  find -iname \"lizhen.c\" -exec md5sum {} \\;\n  ```\n* 文件权限\n  ```Bash\n  find. -perm -g=r -type f -exec ls -l {} \\;\n  ```\n* 空文件\n  ```Bash\n  find ~ -empty\n  ```\n* 大小\n  ```Bash\n  find ~ -size +100M\n  ```\n* Top 5 Big files\n  ```Bash\n  find . -type f -exec ls -s {} \\; | sort  -n -r | head -5\n  ```\n* find files by comaring with the modification time of other file\n  ```Bash\n  find -newer ordinary_file\n  ```\n+ 最近几天没有修改的文件\n  ```Bash\n  find . -mtime +60\n  ```\n+ xargs \n  ```Bash\n  find ~ -name '*.log' -print0 | xargs -0 cat\n  ```\n  *备注: xargs 默认是以空白字符 (空格, TAB, 换行符) 来分割记录的,当这些不能分割时需设置为NULL分割.*\n","source":"_posts/2019-09-22-Linux-Find-Example.md","raw":"---\ntitle: Linux Find Example\ndate: 2019-09-22 18:55:20\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n* 名字\n  ```Bash\n  find . -name \"lizhen.c\"; \n  find / -iname \"lizhen.c\"\n  ```\n* 目录深度\n  ```Bash\n  find -maxdepth 2 -name passwd ; \n  find / -mindepth 3 - maxdepth 5 -name passwd\n  ```\n* 反向\n  ```Bash\n  find -not -iname \"lizhen.c\"\n  ```\n* 执行命令\n  ```Bash\n  find -iname \"lizhen.c\" -exec md5sum {} \\;\n  ```\n* 文件权限\n  ```Bash\n  find. -perm -g=r -type f -exec ls -l {} \\;\n  ```\n* 空文件\n  ```Bash\n  find ~ -empty\n  ```\n* 大小\n  ```Bash\n  find ~ -size +100M\n  ```\n* Top 5 Big files\n  ```Bash\n  find . -type f -exec ls -s {} \\; | sort  -n -r | head -5\n  ```\n* find files by comaring with the modification time of other file\n  ```Bash\n  find -newer ordinary_file\n  ```\n+ 最近几天没有修改的文件\n  ```Bash\n  find . -mtime +60\n  ```\n+ xargs \n  ```Bash\n  find ~ -name '*.log' -print0 | xargs -0 cat\n  ```\n  *备注: xargs 默认是以空白字符 (空格, TAB, 换行符) 来分割记录的,当这些不能分割时需设置为NULL分割.*\n","slug":"Linux-Find-Example","published":1,"updated":"2019-09-22T11:27:15.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1j0018pspwdokv5ass","content":"<ul>\n<li>名字<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"lizhen.c\"</span>; </span><br><span class=\"line\">find / -iname <span class=\"string\">\"lizhen.c\"</span></span><br></pre></td></tr></table></figure></li>\n<li>目录深度<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -maxdepth 2 -name passwd ; </span><br><span class=\"line\">find / -mindepth 3 - maxdepth 5 -name passwd</span><br></pre></td></tr></table></figure></li>\n<li>反向<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -not -iname <span class=\"string\">\"lizhen.c\"</span></span><br></pre></td></tr></table></figure></li>\n<li>执行命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -iname <span class=\"string\">\"lizhen.c\"</span> -<span class=\"built_in\">exec</span> md5sum &#123;&#125; \\;</span><br></pre></td></tr></table></figure></li>\n<li>文件权限<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find. -perm -g=r -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -l &#123;&#125; \\;</span><br></pre></td></tr></table></figure></li>\n<li>空文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -empty</span><br></pre></td></tr></table></figure></li>\n<li>大小<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -size +100M</span><br></pre></td></tr></table></figure></li>\n<li>Top 5 Big files<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -s &#123;&#125; \\; | sort  -n -r | head -5</span><br></pre></td></tr></table></figure></li>\n<li>find files by comaring with the modification time of other file<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -newer ordinary_file</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>最近几天没有修改的文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -mtime +60</span><br></pre></td></tr></table></figure></li>\n<li>xargs <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -name <span class=\"string\">'*.log'</span> -print0 | xargs -0 cat</span><br></pre></td></tr></table></figure>\n<em>备注: xargs 默认是以空白字符 (空格, TAB, 换行符) 来分割记录的,当这些不能分割时需设置为NULL分割.</em></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>名字<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"lizhen.c\"</span>; </span><br><span class=\"line\">find / -iname <span class=\"string\">\"lizhen.c\"</span></span><br></pre></td></tr></table></figure></li>\n<li>目录深度<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -maxdepth 2 -name passwd ; </span><br><span class=\"line\">find / -mindepth 3 - maxdepth 5 -name passwd</span><br></pre></td></tr></table></figure></li>\n<li>反向<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -not -iname <span class=\"string\">\"lizhen.c\"</span></span><br></pre></td></tr></table></figure></li>\n<li>执行命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -iname <span class=\"string\">\"lizhen.c\"</span> -<span class=\"built_in\">exec</span> md5sum &#123;&#125; \\;</span><br></pre></td></tr></table></figure></li>\n<li>文件权限<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find. -perm -g=r -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -l &#123;&#125; \\;</span><br></pre></td></tr></table></figure></li>\n<li>空文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -empty</span><br></pre></td></tr></table></figure></li>\n<li>大小<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -size +100M</span><br></pre></td></tr></table></figure></li>\n<li>Top 5 Big files<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ls -s &#123;&#125; \\; | sort  -n -r | head -5</span><br></pre></td></tr></table></figure></li>\n<li>find files by comaring with the modification time of other file<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -newer ordinary_file</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li>最近几天没有修改的文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -mtime +60</span><br></pre></td></tr></table></figure></li>\n<li>xargs <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find ~ -name <span class=\"string\">'*.log'</span> -print0 | xargs -0 cat</span><br></pre></td></tr></table></figure>\n<em>备注: xargs 默认是以空白字符 (空格, TAB, 换行符) 来分割记录的,当这些不能分割时需设置为NULL分割.</em></li>\n</ul>\n"},{"title":"SQL Server中的Collations和Unicode","date":"2019-09-22T10:27:23.000Z","_content":"  我们知道计算机只能识别0和1, 当我们在SQL SERVER中保存和读取字符时就遇到了编码问题，SQL中字符从编码角度来看可分为2类，Unicode (nchar ,nvarchar)和非Unicode(char ,varchar) ,对于Unicode来说每个字符的码是一样的，不同语言不同版本的工具处理Unicode不存在问题。对于非Unicode 的字符，每个字符的码不一样，依赖于所属的代码页，只有知道了代码页，才能正确解释构成字符的0和1。而查询Collations就能得到代码页，同时Collations 对所有的Unicode 和非Unicode 规定了排序规则：大小写、重音、假名等。对于nvarchar ,nchar来说无关Collations中的代码页。\n","source":"_posts/2019-09-22-SQL-Server中的Collations和Unicode.md","raw":"---\ntitle: SQL Server中的Collations和Unicode\ndate: 2019-09-22 18:27:23\ntags: \n- sql\ncategories: \n- computer\n- windows\n---\n  我们知道计算机只能识别0和1, 当我们在SQL SERVER中保存和读取字符时就遇到了编码问题，SQL中字符从编码角度来看可分为2类，Unicode (nchar ,nvarchar)和非Unicode(char ,varchar) ,对于Unicode来说每个字符的码是一样的，不同语言不同版本的工具处理Unicode不存在问题。对于非Unicode 的字符，每个字符的码不一样，依赖于所属的代码页，只有知道了代码页，才能正确解释构成字符的0和1。而查询Collations就能得到代码页，同时Collations 对所有的Unicode 和非Unicode 规定了排序规则：大小写、重音、假名等。对于nvarchar ,nchar来说无关Collations中的代码页。\n","slug":"SQL-Server中的Collations和Unicode","published":1,"updated":"2019-09-22T10:28:58.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1l001cpspw1uoef0xj","content":"<p>  我们知道计算机只能识别0和1, 当我们在SQL SERVER中保存和读取字符时就遇到了编码问题，SQL中字符从编码角度来看可分为2类，Unicode (nchar ,nvarchar)和非Unicode(char ,varchar) ,对于Unicode来说每个字符的码是一样的，不同语言不同版本的工具处理Unicode不存在问题。对于非Unicode 的字符，每个字符的码不一样，依赖于所属的代码页，只有知道了代码页，才能正确解释构成字符的0和1。而查询Collations就能得到代码页，同时Collations 对所有的Unicode 和非Unicode 规定了排序规则：大小写、重音、假名等。对于nvarchar ,nchar来说无关Collations中的代码页。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  我们知道计算机只能识别0和1, 当我们在SQL SERVER中保存和读取字符时就遇到了编码问题，SQL中字符从编码角度来看可分为2类，Unicode (nchar ,nvarchar)和非Unicode(char ,varchar) ,对于Unicode来说每个字符的码是一样的，不同语言不同版本的工具处理Unicode不存在问题。对于非Unicode 的字符，每个字符的码不一样，依赖于所属的代码页，只有知道了代码页，才能正确解释构成字符的0和1。而查询Collations就能得到代码页，同时Collations 对所有的Unicode 和非Unicode 规定了排序规则：大小写、重音、假名等。对于nvarchar ,nchar来说无关Collations中的代码页。</p>\n"},{"title":"设计原理 SOLID","date":"2019-09-22T08:08:56.000Z","_content":"\n+ **A class should have only a single responsibility**\n    *单一职责(**S**)*: 一个类只承担一个职责,引起类变化的因素永远不要多余一个.\n+ **A class should be open for extension but closed for modification**\n    *开闭原则(**O**)*: 不需要修改就能扩展类的行为,对拓展开放，对修改关闭.\n+ **A type must be substitutable by its subtypes without altering the correctness of the application**\n    *替换原则(**L**)*: 子类代替父类时，对系统毫无影响,所有引用基类的地方必须能透明地使用其子类的对象.\n+ **Clients of a class should not be forced to depend on those of its methods that they don't use**\n    *接口隔离(**I**)*:客户端不应该强制依赖那些他们没有使用到的接口,类不需强制实现接口中不需要的方法和属性.\n+ **High-level classes should not dependent on low-level classes. Both of then shoud depend on abstractions. b. Abstractions should not depend upon details. Details should depend upon abstractions.**\n    *依赖倒置(**D**)*:上级组件不依赖下级组件，二者都依赖抽象。抽象不取决于下级组件，其来自于上级组件的需求,下级组件完成抽象.\n","source":"_posts/2019-09-22-设计原理-SOLID.md","raw":"---\ntitle: 设计原理 SOLID\ndate: 2019-09-22 16:08:56\ntags: \n- program\ncategories: \n- computer\n- other\n---\n\n+ **A class should have only a single responsibility**\n    *单一职责(**S**)*: 一个类只承担一个职责,引起类变化的因素永远不要多余一个.\n+ **A class should be open for extension but closed for modification**\n    *开闭原则(**O**)*: 不需要修改就能扩展类的行为,对拓展开放，对修改关闭.\n+ **A type must be substitutable by its subtypes without altering the correctness of the application**\n    *替换原则(**L**)*: 子类代替父类时，对系统毫无影响,所有引用基类的地方必须能透明地使用其子类的对象.\n+ **Clients of a class should not be forced to depend on those of its methods that they don't use**\n    *接口隔离(**I**)*:客户端不应该强制依赖那些他们没有使用到的接口,类不需强制实现接口中不需要的方法和属性.\n+ **High-level classes should not dependent on low-level classes. Both of then shoud depend on abstractions. b. Abstractions should not depend upon details. Details should depend upon abstractions.**\n    *依赖倒置(**D**)*:上级组件不依赖下级组件，二者都依赖抽象。抽象不取决于下级组件，其来自于上级组件的需求,下级组件完成抽象.\n","slug":"设计原理-SOLID","published":1,"updated":"2019-09-22T08:40:51.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1n001gpspwaac38g9t","content":"<ul>\n<li><strong>A class should have only a single responsibility</strong><br>  <em>单一职责(<strong>S</strong>)</em>: 一个类只承担一个职责,引起类变化的因素永远不要多余一个.</li>\n<li><strong>A class should be open for extension but closed for modification</strong><br>  <em>开闭原则(<strong>O</strong>)</em>: 不需要修改就能扩展类的行为,对拓展开放，对修改关闭.</li>\n<li><strong>A type must be substitutable by its subtypes without altering the correctness of the application</strong><br>  <em>替换原则(<strong>L</strong>)</em>: 子类代替父类时，对系统毫无影响,所有引用基类的地方必须能透明地使用其子类的对象.</li>\n<li><strong>Clients of a class should not be forced to depend on those of its methods that they don’t use</strong><br>  <em>接口隔离(<strong>I</strong>)</em>:客户端不应该强制依赖那些他们没有使用到的接口,类不需强制实现接口中不需要的方法和属性.</li>\n<li><strong>High-level classes should not dependent on low-level classes. Both of then shoud depend on abstractions. b. Abstractions should not depend upon details. Details should depend upon abstractions.</strong><br>  <em>依赖倒置(<strong>D</strong>)</em>:上级组件不依赖下级组件，二者都依赖抽象。抽象不取决于下级组件，其来自于上级组件的需求,下级组件完成抽象.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>A class should have only a single responsibility</strong><br>  <em>单一职责(<strong>S</strong>)</em>: 一个类只承担一个职责,引起类变化的因素永远不要多余一个.</li>\n<li><strong>A class should be open for extension but closed for modification</strong><br>  <em>开闭原则(<strong>O</strong>)</em>: 不需要修改就能扩展类的行为,对拓展开放，对修改关闭.</li>\n<li><strong>A type must be substitutable by its subtypes without altering the correctness of the application</strong><br>  <em>替换原则(<strong>L</strong>)</em>: 子类代替父类时，对系统毫无影响,所有引用基类的地方必须能透明地使用其子类的对象.</li>\n<li><strong>Clients of a class should not be forced to depend on those of its methods that they don’t use</strong><br>  <em>接口隔离(<strong>I</strong>)</em>:客户端不应该强制依赖那些他们没有使用到的接口,类不需强制实现接口中不需要的方法和属性.</li>\n<li><strong>High-level classes should not dependent on low-level classes. Both of then shoud depend on abstractions. b. Abstractions should not depend upon details. Details should depend upon abstractions.</strong><br>  <em>依赖倒置(<strong>D</strong>)</em>:上级组件不依赖下级组件，二者都依赖抽象。抽象不取决于下级组件，其来自于上级组件的需求,下级组件完成抽象.</li>\n</ul>\n"},{"title":"Install vim 8.1 on Ubuntu","date":"2019-09-24T12:09:37.000Z","_content":"\n- 使用不受信任的 ppa, 安装不受支持的软件.\n\n```Bash\nsudo add-apt-repository ppa:jonathonf/vim\nsudo apt-get update\nsudo apt-get install vim\n```\n\n- 删除 vim\n\n```Bash\nsudo apt-get remove vim\n```\n","source":"_posts/2019-09-24-Vim-8-1-On-Ubuntu-install.md","raw":"---\ntitle: Install vim 8.1 on Ubuntu\ndate: 2019-09-24 20:09:37\ntags:\n  - vim\ncategories:\n  - computer\n  - linux\n---\n\n- 使用不受信任的 ppa, 安装不受支持的软件.\n\n```Bash\nsudo add-apt-repository ppa:jonathonf/vim\nsudo apt-get update\nsudo apt-get install vim\n```\n\n- 删除 vim\n\n```Bash\nsudo apt-get remove vim\n```\n","slug":"Vim-8-1-On-Ubuntu-install","published":1,"updated":"2019-09-24T12:46:07.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1o001kpspw637wchyx","content":"<ul>\n<li>使用不受信任的 ppa, 安装不受支持的软件.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:jonathonf/vim</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除 vim</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>使用不受信任的 ppa, 安装不受支持的软件.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:jonathonf/vim</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除 vim</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux Shell SET vs ENV","date":"2019-09-26T13:14:04.000Z","_content":"\n**Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, which are passed on to every executed program. set can see shell-local variables, env cannot.**\n\n  Since set is a built-in shell command, it also sees sees shell-local variables (including shell functions). env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.\n\n**When you type a line like a=1 then a local variable is created (unless it already existed in the environment). Environment variables are created with export a=1**\n\n  What we have here the difference between environment variables and shell variables. Under sh (and variants) all environment variables are automatically shell variables as well, but the same is not true in the other direction (this originally was to save memory (I think)).\n\n  Environment variables are stored in an area of memory that is kept when a process calls <strong>exec()</strong>, this means that programs you run from the command line get a copy of the environment. Shell variables do not stay over an exec(), but are copied in a fork(). When you create a subshell the shell calls <strong>fork() </strong>in order to copy the present process, but it does NOT call exec() because the process it requires is already there thus the shell variables are kept.\n\n  Also most shells set for you certain shell variables when you start them up, PS1 is a perfect example of this, and you may have also set them yourself in your shell initalisation file.\n\n  In summary, shell variables are used by the shell and copies it makes of itself, while environment variables are used by everything.\n\n","source":"_posts/2019-09-26-Linux-Shell-set-vs-env.md","raw":"---\ntitle: Linux Shell SET vs ENV\ndate: 2019-09-26 21:14:04\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n\n**Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, which are passed on to every executed program. set can see shell-local variables, env cannot.**\n\n  Since set is a built-in shell command, it also sees sees shell-local variables (including shell functions). env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.\n\n**When you type a line like a=1 then a local variable is created (unless it already existed in the environment). Environment variables are created with export a=1**\n\n  What we have here the difference between environment variables and shell variables. Under sh (and variants) all environment variables are automatically shell variables as well, but the same is not true in the other direction (this originally was to save memory (I think)).\n\n  Environment variables are stored in an area of memory that is kept when a process calls <strong>exec()</strong>, this means that programs you run from the command line get a copy of the environment. Shell variables do not stay over an exec(), but are copied in a fork(). When you create a subshell the shell calls <strong>fork() </strong>in order to copy the present process, but it does NOT call exec() because the process it requires is already there thus the shell variables are kept.\n\n  Also most shells set for you certain shell variables when you start them up, PS1 is a perfect example of this, and you may have also set them yourself in your shell initalisation file.\n\n  In summary, shell variables are used by the shell and copies it makes of itself, while environment variables are used by everything.\n\n","slug":"Linux-Shell-set-vs-env","published":1,"updated":"2019-10-10T12:43:20.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1p001opspw1izx5536","content":"<p><strong>Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, which are passed on to every executed program. set can see shell-local variables, env cannot.</strong></p>\n<p>  Since set is a built-in shell command, it also sees sees shell-local variables (including shell functions). env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.</p>\n<p><strong>When you type a line like a=1 then a local variable is created (unless it already existed in the environment). Environment variables are created with export a=1</strong></p>\n<p>  What we have here the difference between environment variables and shell variables. Under sh (and variants) all environment variables are automatically shell variables as well, but the same is not true in the other direction (this originally was to save memory (I think)).</p>\n<p>  Environment variables are stored in an area of memory that is kept when a process calls <strong>exec()</strong>, this means that programs you run from the command line get a copy of the environment. Shell variables do not stay over an exec(), but are copied in a fork(). When you create a subshell the shell calls <strong>fork() </strong>in order to copy the present process, but it does NOT call exec() because the process it requires is already there thus the shell variables are kept.</p>\n<p>  Also most shells set for you certain shell variables when you start them up, PS1 is a perfect example of this, and you may have also set them yourself in your shell initalisation file.</p>\n<p>  In summary, shell variables are used by the shell and copies it makes of itself, while environment variables are used by everything.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Shells can have variables of 2 types: locals, which are only accessible from the current shell, and (exported) environment variables, which are passed on to every executed program. set can see shell-local variables, env cannot.</strong></p>\n<p>  Since set is a built-in shell command, it also sees sees shell-local variables (including shell functions). env on the other hand is an independent executable; it only sees the variables that the shell passes to it, or environment variables.</p>\n<p><strong>When you type a line like a=1 then a local variable is created (unless it already existed in the environment). Environment variables are created with export a=1</strong></p>\n<p>  What we have here the difference between environment variables and shell variables. Under sh (and variants) all environment variables are automatically shell variables as well, but the same is not true in the other direction (this originally was to save memory (I think)).</p>\n<p>  Environment variables are stored in an area of memory that is kept when a process calls <strong>exec()</strong>, this means that programs you run from the command line get a copy of the environment. Shell variables do not stay over an exec(), but are copied in a fork(). When you create a subshell the shell calls <strong>fork() </strong>in order to copy the present process, but it does NOT call exec() because the process it requires is already there thus the shell variables are kept.</p>\n<p>  Also most shells set for you certain shell variables when you start them up, PS1 is a perfect example of this, and you may have also set them yourself in your shell initalisation file.</p>\n<p>  In summary, shell variables are used by the shell and copies it makes of itself, while environment variables are used by everything.</p>\n"},{"title":"Postgresql client Connection options","date":"2019-09-27T13:31:28.000Z","_content":"**PostgreSQL 客户端常用的连接参数**\n*注意:密码是不可能写在命令行上的,设置密码用.pgpass,环境变量*\n```\nConnection options:\n    -d, --dbname=DBNAME \n    -h, --host=HOSTNAME\n    -p, --port=PORT\n    -U, --username=NAME connect as specified database user\n```\n\n**使用环境变量 连接PostgreSQL**\n+ PGHOST\n+ PGPORT\n+ PGUSER\n+ PGPASSWORD\n+ PGDATABASE\n\n**使用.pgpass 连接PostgreSQL**\n在你的HOME目录下创建.pgpass文件,字段可用*\n格式: **hostname:port:database:username:password**\n```\nchmod 0600 ~/.pgpass\n```\n\n","source":"_posts/2019-09-27-PostgreSQL-client-Connection-options.md","raw":"---\ntitle: Postgresql client Connection options\ndate: 2019-09-27 21:31:28\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n**PostgreSQL 客户端常用的连接参数**\n*注意:密码是不可能写在命令行上的,设置密码用.pgpass,环境变量*\n```\nConnection options:\n    -d, --dbname=DBNAME \n    -h, --host=HOSTNAME\n    -p, --port=PORT\n    -U, --username=NAME connect as specified database user\n```\n\n**使用环境变量 连接PostgreSQL**\n+ PGHOST\n+ PGPORT\n+ PGUSER\n+ PGPASSWORD\n+ PGDATABASE\n\n**使用.pgpass 连接PostgreSQL**\n在你的HOME目录下创建.pgpass文件,字段可用*\n格式: **hostname:port:database:username:password**\n```\nchmod 0600 ~/.pgpass\n```\n\n","slug":"PostgreSQL-client-Connection-options","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1s001spspwfulzbhmd","content":"<p><strong>PostgreSQL 客户端常用的连接参数</strong><br><em>注意:密码是不可能写在命令行上的,设置密码用.pgpass,环境变量</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection options:</span><br><span class=\"line\">    -d, --dbname&#x3D;DBNAME </span><br><span class=\"line\">    -h, --host&#x3D;HOSTNAME</span><br><span class=\"line\">    -p, --port&#x3D;PORT</span><br><span class=\"line\">    -U, --username&#x3D;NAME connect as specified database user</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用环境变量 连接PostgreSQL</strong></p>\n<ul>\n<li>PGHOST</li>\n<li>PGPORT</li>\n<li>PGUSER</li>\n<li>PGPASSWORD</li>\n<li>PGDATABASE</li>\n</ul>\n<p><strong>使用.pgpass 连接PostgreSQL</strong><br>在你的HOME目录下创建.pgpass文件,字段可用*<br>格式: <strong>hostname:port:database:username:password</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 ~&#x2F;.pgpass</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>PostgreSQL 客户端常用的连接参数</strong><br><em>注意:密码是不可能写在命令行上的,设置密码用.pgpass,环境变量</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection options:</span><br><span class=\"line\">    -d, --dbname&#x3D;DBNAME </span><br><span class=\"line\">    -h, --host&#x3D;HOSTNAME</span><br><span class=\"line\">    -p, --port&#x3D;PORT</span><br><span class=\"line\">    -U, --username&#x3D;NAME connect as specified database user</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用环境变量 连接PostgreSQL</strong></p>\n<ul>\n<li>PGHOST</li>\n<li>PGPORT</li>\n<li>PGUSER</li>\n<li>PGPASSWORD</li>\n<li>PGDATABASE</li>\n</ul>\n<p><strong>使用.pgpass 连接PostgreSQL</strong><br>在你的HOME目录下创建.pgpass文件,字段可用*<br>格式: <strong>hostname:port:database:username:password</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 ~&#x2F;.pgpass</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Postgresql -- Move Data Directory","date":"2019-09-29T08:18:31.000Z","_content":"\n### 移动PostgreSQL数据目录\n[转载](https://www.digitalocean.com/community/tutorials/how-to-move-a-postgresql-data-directory-to-a-new-location-on-ubuntu-16-04)\n\n+ 移动数据目录\n```Bash\n$ sudo -u postgres psql\npostgres# SHOW data_directory\n$ sudo systemctl stop postgresql\n$ sudo systemctl status postgresql  # 确认已停止.\n$ sudo rsync -av /var/lib/postgresql /mnt/... # -a 保留权限\n```\n+ 指向新数据库\n```Bash\n$ sudo vim /etc/postgresql/.../postgresql.conf # 修改: data_directory = '新路径...'\n```\n\n+ 重启PostgreSQL,并验证\n```Bash\n$ sudo systemctl start postgresql\n$ sudo systemctl status postgresql\n$ sudo -u postgresql psql\npostgres=# SHOW data_directory\n```\n","source":"_posts/2019-09-29-PostgreSQL-Move-Data-Directory.md","raw":"---\ntitle: Postgresql -- Move Data Directory\ndate: 2019-09-29 16:18:31\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n\n### 移动PostgreSQL数据目录\n[转载](https://www.digitalocean.com/community/tutorials/how-to-move-a-postgresql-data-directory-to-a-new-location-on-ubuntu-16-04)\n\n+ 移动数据目录\n```Bash\n$ sudo -u postgres psql\npostgres# SHOW data_directory\n$ sudo systemctl stop postgresql\n$ sudo systemctl status postgresql  # 确认已停止.\n$ sudo rsync -av /var/lib/postgresql /mnt/... # -a 保留权限\n```\n+ 指向新数据库\n```Bash\n$ sudo vim /etc/postgresql/.../postgresql.conf # 修改: data_directory = '新路径...'\n```\n\n+ 重启PostgreSQL,并验证\n```Bash\n$ sudo systemctl start postgresql\n$ sudo systemctl status postgresql\n$ sudo -u postgresql psql\npostgres=# SHOW data_directory\n```\n","slug":"PostgreSQL-Move-Data-Directory","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1t001vpspwa52859ea","content":"<h3 id=\"移动PostgreSQL数据目录\"><a href=\"#移动PostgreSQL数据目录\" class=\"headerlink\" title=\"移动PostgreSQL数据目录\"></a>移动PostgreSQL数据目录</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-move-a-postgresql-data-directory-to-a-new-location-on-ubuntu-16-04\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<ul>\n<li><p>移动数据目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo -u postgres psql</span><br><span class=\"line\">postgres<span class=\"comment\"># SHOW data_directory</span></span><br><span class=\"line\">$ sudo systemctl stop postgresql</span><br><span class=\"line\">$ sudo systemctl status postgresql  <span class=\"comment\"># 确认已停止.</span></span><br><span class=\"line\">$ sudo rsync -av /var/lib/postgresql /mnt/... <span class=\"comment\"># -a 保留权限</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指向新数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/postgresql/.../postgresql.conf <span class=\"comment\"># 修改: data_directory = '新路径...'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启PostgreSQL,并验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start postgresql</span><br><span class=\"line\">$ sudo systemctl status postgresql</span><br><span class=\"line\">$ sudo -u postgresql psql</span><br><span class=\"line\">postgres=<span class=\"comment\"># SHOW data_directory</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"移动PostgreSQL数据目录\"><a href=\"#移动PostgreSQL数据目录\" class=\"headerlink\" title=\"移动PostgreSQL数据目录\"></a>移动PostgreSQL数据目录</h3><p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-move-a-postgresql-data-directory-to-a-new-location-on-ubuntu-16-04\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<ul>\n<li><p>移动数据目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo -u postgres psql</span><br><span class=\"line\">postgres<span class=\"comment\"># SHOW data_directory</span></span><br><span class=\"line\">$ sudo systemctl stop postgresql</span><br><span class=\"line\">$ sudo systemctl status postgresql  <span class=\"comment\"># 确认已停止.</span></span><br><span class=\"line\">$ sudo rsync -av /var/lib/postgresql /mnt/... <span class=\"comment\"># -a 保留权限</span></span><br></pre></td></tr></table></figure></li>\n<li><p>指向新数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/postgresql/.../postgresql.conf <span class=\"comment\"># 修改: data_directory = '新路径...'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启PostgreSQL,并验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start postgresql</span><br><span class=\"line\">$ sudo systemctl status postgresql</span><br><span class=\"line\">$ sudo -u postgresql psql</span><br><span class=\"line\">postgres=<span class=\"comment\"># SHOW data_directory</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Postgresql -- Schema","date":"2019-09-29T08:48:10.000Z","_content":"### postgresql 架构命令\n```Sql\nSelect current_schema();\nShow search_path;\nCreate Schema ...;\nAlter Schema ...;\nDrop Schema ...;\nSet search_path To ..., ...\nGrant Usage On Schema schema_name To user_name\nGrant Create On Schema schema_name To user_name;\n\\dn #get the list of schemas;\n```\n","source":"_posts/2019-09-29-PostgreSQL-Schema.md","raw":"---\ntitle: Postgresql -- Schema\ndate: 2019-09-29 16:48:10\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n### postgresql 架构命令\n```Sql\nSelect current_schema();\nShow search_path;\nCreate Schema ...;\nAlter Schema ...;\nDrop Schema ...;\nSet search_path To ..., ...\nGrant Usage On Schema schema_name To user_name\nGrant Create On Schema schema_name To user_name;\n\\dn #get the list of schemas;\n```\n","slug":"PostgreSQL-Schema","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1v0020pspwhr717a74","content":"<h3 id=\"postgresql-架构命令\"><a href=\"#postgresql-架构命令\" class=\"headerlink\" title=\"postgresql 架构命令\"></a>postgresql 架构命令</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> current_schema();</span><br><span class=\"line\"><span class=\"keyword\">Show</span> search_path;</span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Alter</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Set</span> search_path <span class=\"keyword\">To</span> ..., ...</span><br><span class=\"line\"><span class=\"keyword\">Grant</span> <span class=\"keyword\">Usage</span> <span class=\"keyword\">On</span> <span class=\"keyword\">Schema</span> schema_name <span class=\"keyword\">To</span> user_name</span><br><span class=\"line\"><span class=\"keyword\">Grant</span> <span class=\"keyword\">Create</span> <span class=\"keyword\">On</span> <span class=\"keyword\">Schema</span> schema_name <span class=\"keyword\">To</span> user_name;</span><br><span class=\"line\">\\dn <span class=\"comment\">#get the list of schemas;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"postgresql-架构命令\"><a href=\"#postgresql-架构命令\" class=\"headerlink\" title=\"postgresql 架构命令\"></a>postgresql 架构命令</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> current_schema();</span><br><span class=\"line\"><span class=\"keyword\">Show</span> search_path;</span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Alter</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Drop</span> <span class=\"keyword\">Schema</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">Set</span> search_path <span class=\"keyword\">To</span> ..., ...</span><br><span class=\"line\"><span class=\"keyword\">Grant</span> <span class=\"keyword\">Usage</span> <span class=\"keyword\">On</span> <span class=\"keyword\">Schema</span> schema_name <span class=\"keyword\">To</span> user_name</span><br><span class=\"line\"><span class=\"keyword\">Grant</span> <span class=\"keyword\">Create</span> <span class=\"keyword\">On</span> <span class=\"keyword\">Schema</span> schema_name <span class=\"keyword\">To</span> user_name;</span><br><span class=\"line\">\\dn <span class=\"comment\">#get the list of schemas;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Postgresql bitmap heap/index scan","date":"2019-10-04T03:51:28.000Z","_content":"[转载](https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan)\n\n+ index scan 扫描索引,查找后**立即**读取对应数据页,是*随机读*.\n\n+ bitmap heap scan 最终是*顺序读*. 一般用在多个索引同时使用时或单个索引多次使用时.\n\n举例(先bitmap index scan 再bitmap heap scan):\n![](/images/bitmapIndex.1.png)\nbitmaps 按为与\n![](/images/bitmapIndex.2.png)\nbitmap heap scan 读入对应的页,再次按指定条件查找记录(re-checked).\n![](/images/bitmapIndex.3.png).\n","source":"_posts/2019-10-04-postgresql-bitmap-heap-index-scan.md","raw":"---\ntitle: Postgresql bitmap heap/index scan\ndate: 2019-10-04 11:51:28\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n[转载](https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan)\n\n+ index scan 扫描索引,查找后**立即**读取对应数据页,是*随机读*.\n\n+ bitmap heap scan 最终是*顺序读*. 一般用在多个索引同时使用时或单个索引多次使用时.\n\n举例(先bitmap index scan 再bitmap heap scan):\n![](/images/bitmapIndex.1.png)\nbitmaps 按为与\n![](/images/bitmapIndex.2.png)\nbitmap heap scan 读入对应的页,再次按指定条件查找记录(re-checked).\n![](/images/bitmapIndex.3.png).\n","slug":"postgresql-bitmap-heap-index-scan","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1w0023pspw3k3fcnyb","content":"<p><a href=\"https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<ul>\n<li><p>index scan 扫描索引,查找后<strong>立即</strong>读取对应数据页,是<em>随机读</em>.</p>\n</li>\n<li><p>bitmap heap scan 最终是<em>顺序读</em>. 一般用在多个索引同时使用时或单个索引多次使用时.</p>\n</li>\n</ul>\n<p>举例(先bitmap index scan 再bitmap heap scan):<br><img src=\"/images/bitmapIndex.1.png\" alt=\"\"><br>bitmaps 按为与<br><img src=\"/images/bitmapIndex.2.png\" alt=\"\"><br>bitmap heap scan 读入对应的页,再次按指定条件查找记录(re-checked).<br><img src=\"/images/bitmapIndex.3.png\" alt=\"\">.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<ul>\n<li><p>index scan 扫描索引,查找后<strong>立即</strong>读取对应数据页,是<em>随机读</em>.</p>\n</li>\n<li><p>bitmap heap scan 最终是<em>顺序读</em>. 一般用在多个索引同时使用时或单个索引多次使用时.</p>\n</li>\n</ul>\n<p>举例(先bitmap index scan 再bitmap heap scan):<br><img src=\"/images/bitmapIndex.1.png\" alt=\"\"><br>bitmaps 按为与<br><img src=\"/images/bitmapIndex.2.png\" alt=\"\"><br>bitmap heap scan 读入对应的页,再次按指定条件查找记录(re-checked).<br><img src=\"/images/bitmapIndex.3.png\" alt=\"\">.</p>\n"},{"title":"Postgresql reload config","date":"2019-10-04T07:27:00.000Z","_content":"\n+ command-line reload\n  ```Bash\n  #方法1\n  sudo service postgresql-x.x reload\n  #方法2\n  su -c root 'service postgresql-x.x reload'\n  #方法3\n  su - postges\n  /usr/bin/pg_ctl reload\n  ```\n+ using sql reload\n  ```Sql\n  Select pg_reload_conf();\n  ```\n","source":"_posts/2019-10-04-postgresql-reload-config.md","raw":"---\ntitle: Postgresql reload config\ndate: 2019-10-04 15:27:00\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n\n+ command-line reload\n  ```Bash\n  #方法1\n  sudo service postgresql-x.x reload\n  #方法2\n  su -c root 'service postgresql-x.x reload'\n  #方法3\n  su - postges\n  /usr/bin/pg_ctl reload\n  ```\n+ using sql reload\n  ```Sql\n  Select pg_reload_conf();\n  ```\n","slug":"postgresql-reload-config","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx1y0027pspwetyq5y1e","content":"<ul>\n<li>command-line reload<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1</span></span><br><span class=\"line\">sudo service postgresql-x.x reload</span><br><span class=\"line\"><span class=\"comment\">#方法2</span></span><br><span class=\"line\">su -c root <span class=\"string\">'service postgresql-x.x reload'</span></span><br><span class=\"line\"><span class=\"comment\">#方法3</span></span><br><span class=\"line\">su - postges</span><br><span class=\"line\">/usr/bin/pg_ctl reload</span><br></pre></td></tr></table></figure></li>\n<li>using sql reload<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> pg_reload_conf();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>command-line reload<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1</span></span><br><span class=\"line\">sudo service postgresql-x.x reload</span><br><span class=\"line\"><span class=\"comment\">#方法2</span></span><br><span class=\"line\">su -c root <span class=\"string\">'service postgresql-x.x reload'</span></span><br><span class=\"line\"><span class=\"comment\">#方法3</span></span><br><span class=\"line\">su - postges</span><br><span class=\"line\">/usr/bin/pg_ctl reload</span><br></pre></td></tr></table></figure></li>\n<li>using sql reload<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> pg_reload_conf();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Postgresql show file loaction","date":"2019-10-04T07:39:27.000Z","_content":"显示文件位置的命令\n```SQL\nSHOW data_directory;\nSHOW config_file;\nSelect name ,setting From pg_settings Where category = 'File Locations';\nSHOW all;\n```\n","source":"_posts/2019-10-04-postgresql-show-file-loaction.md","raw":"---\ntitle: Postgresql show file loaction\ndate: 2019-10-04 15:39:27\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n显示文件位置的命令\n```SQL\nSHOW data_directory;\nSHOW config_file;\nSelect name ,setting From pg_settings Where category = 'File Locations';\nSHOW all;\n```\n","slug":"postgresql-show-file-loaction","published":1,"updated":"2019-10-06T06:23:46.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx20002bpspw18hzh69t","content":"<p>显示文件位置的命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> data_directory;</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> config_file;</span><br><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">name</span> ,setting <span class=\"keyword\">From</span> pg_settings <span class=\"keyword\">Where</span> <span class=\"keyword\">category</span> = <span class=\"string\">'File Locations'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">all</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>显示文件位置的命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> data_directory;</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> config_file;</span><br><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">name</span> ,setting <span class=\"keyword\">From</span> pg_settings <span class=\"keyword\">Where</span> <span class=\"keyword\">category</span> = <span class=\"string\">'File Locations'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">all</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"Postgresql join","date":"2019-10-06T12:21:04.000Z","_content":"### postgresql 中join的选项\n\n- **Nested Loops(O(n2))**\n```\nfor x in table1:\n  for y in table2:\n    if x.field == y.field\n      issue row\n    else\n      keep doing\n```\n\n- **Hash joins**\n```\nHash join\n  Sequentialscan table 1\n  Sequentialscan table 2\n```\n\n- **Merge joins(O(n * log(n)))**\n```\nMerge join\n  Sort table 1\n    Sequetial scan table 1\n  Sort table 2\n    Sequetial scan table 2\n---\nMerge join\n  Index scan table 1\n  Index scan table 2\n```\n","source":"_posts/2019-10-06-Postgresql-join.md","raw":"---\ntitle: Postgresql join\ndate: 2019-10-06 20:21:04\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n### postgresql 中join的选项\n\n- **Nested Loops(O(n2))**\n```\nfor x in table1:\n  for y in table2:\n    if x.field == y.field\n      issue row\n    else\n      keep doing\n```\n\n- **Hash joins**\n```\nHash join\n  Sequentialscan table 1\n  Sequentialscan table 2\n```\n\n- **Merge joins(O(n * log(n)))**\n```\nMerge join\n  Sort table 1\n    Sequetial scan table 1\n  Sort table 2\n    Sequetial scan table 2\n---\nMerge join\n  Index scan table 1\n  Index scan table 2\n```\n","slug":"Postgresql-join","published":1,"updated":"2019-10-07T06:35:21.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx21002fpspwcw4u62gj","content":"<h3 id=\"postgresql-中join的选项\"><a href=\"#postgresql-中join的选项\" class=\"headerlink\" title=\"postgresql 中join的选项\"></a>postgresql 中join的选项</h3><ul>\n<li><p><strong>Nested Loops(O(n2))</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in table1:</span><br><span class=\"line\">  for y in table2:</span><br><span class=\"line\">    if x.field &#x3D;&#x3D; y.field</span><br><span class=\"line\">      issue row</span><br><span class=\"line\">    else</span><br><span class=\"line\">      keep doing</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Hash joins</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash join</span><br><span class=\"line\">  Sequentialscan table 1</span><br><span class=\"line\">  Sequentialscan table 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Merge joins(O(n * log(n)))</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge join</span><br><span class=\"line\">  Sort table 1</span><br><span class=\"line\">    Sequetial scan table 1</span><br><span class=\"line\">  Sort table 2</span><br><span class=\"line\">    Sequetial scan table 2</span><br><span class=\"line\">---</span><br><span class=\"line\">Merge join</span><br><span class=\"line\">  Index scan table 1</span><br><span class=\"line\">  Index scan table 2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"postgresql-中join的选项\"><a href=\"#postgresql-中join的选项\" class=\"headerlink\" title=\"postgresql 中join的选项\"></a>postgresql 中join的选项</h3><ul>\n<li><p><strong>Nested Loops(O(n2))</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in table1:</span><br><span class=\"line\">  for y in table2:</span><br><span class=\"line\">    if x.field &#x3D;&#x3D; y.field</span><br><span class=\"line\">      issue row</span><br><span class=\"line\">    else</span><br><span class=\"line\">      keep doing</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Hash joins</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash join</span><br><span class=\"line\">  Sequentialscan table 1</span><br><span class=\"line\">  Sequentialscan table 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Merge joins(O(n * log(n)))</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Merge join</span><br><span class=\"line\">  Sort table 1</span><br><span class=\"line\">    Sequetial scan table 1</span><br><span class=\"line\">  Sort table 2</span><br><span class=\"line\">    Sequetial scan table 2</span><br><span class=\"line\">---</span><br><span class=\"line\">Merge join</span><br><span class=\"line\">  Index scan table 1</span><br><span class=\"line\">  Index scan table 2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"华为交换机 ACL 单向流量控制","date":"2019-10-08T11:50:40.000Z","_content":"**我们假设有VLAN A和B，需要做到A可以访问B，而B不可以访问A**\n  A的地址段为 X.X.X.X/24\n  B的地址段为 Y.Y.Y.Y/24\n\n  对于单向流量的控制，一般来说是属于防火墙的功能。但实际上，交换机也是可以通过ACL的灵活配置，来实现最基本的单向流量控制。具体配置如下：\n\n对于ICMP协议，需要允许B->A的icmp echo-reply报文：\n```\nacl 3001\n   rule 5 permit icmp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255  icmp-type echo-reply\n```\n对于TCP协议，需要允许B->A，报文头中SYN Flag的类型为ack(010000)或rst(000100)的TCP报文：\n----------V2R2版本及以前的配置------------\n```\nrule 9 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag ack\nrule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag rst\n```\n----------V2R3版本及以后的配置------------\n```\nrule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag established\n```\n对于UDP协议，由于其为无状态的特性，无法实现单通，基于业务优先原则，放开所有UDP协议文：\n```\nrule 15 permit udp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255\n```\n最后，deny其他B->A的IP流量，并基于业务优先原则，放开其他所有未知流量：\n```\nrule 20 deny ip source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255\nrule 25 permit ip\n```\n将该ACL通过traffic-filter应用于VLAN之上\n```\ntraffic-filter vlan B inbound acl 3001\n```\n","source":"_posts/2019-10-08-华为交换机-ACL-单向流量控制.md","raw":"---\ntitle: 华为交换机 ACL 单向流量控制\ndate: 2019-10-08 19:50:40\ntags:\n- network\ncategories: \n- computer\n---\n**我们假设有VLAN A和B，需要做到A可以访问B，而B不可以访问A**\n  A的地址段为 X.X.X.X/24\n  B的地址段为 Y.Y.Y.Y/24\n\n  对于单向流量的控制，一般来说是属于防火墙的功能。但实际上，交换机也是可以通过ACL的灵活配置，来实现最基本的单向流量控制。具体配置如下：\n\n对于ICMP协议，需要允许B->A的icmp echo-reply报文：\n```\nacl 3001\n   rule 5 permit icmp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255  icmp-type echo-reply\n```\n对于TCP协议，需要允许B->A，报文头中SYN Flag的类型为ack(010000)或rst(000100)的TCP报文：\n----------V2R2版本及以前的配置------------\n```\nrule 9 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag ack\nrule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag rst\n```\n----------V2R3版本及以后的配置------------\n```\nrule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag established\n```\n对于UDP协议，由于其为无状态的特性，无法实现单通，基于业务优先原则，放开所有UDP协议文：\n```\nrule 15 permit udp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255\n```\n最后，deny其他B->A的IP流量，并基于业务优先原则，放开其他所有未知流量：\n```\nrule 20 deny ip source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255\nrule 25 permit ip\n```\n将该ACL通过traffic-filter应用于VLAN之上\n```\ntraffic-filter vlan B inbound acl 3001\n```\n","slug":"华为交换机-ACL-单向流量控制","published":1,"updated":"2019-10-08T11:58:10.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx23002jpspw4t4wb6gt","content":"<p><strong>我们假设有VLAN A和B，需要做到A可以访问B，而B不可以访问A</strong><br>  A的地址段为 X.X.X.X/24<br>  B的地址段为 Y.Y.Y.Y/24</p>\n<p>  对于单向流量的控制，一般来说是属于防火墙的功能。但实际上，交换机也是可以通过ACL的灵活配置，来实现最基本的单向流量控制。具体配置如下：</p>\n<p>对于ICMP协议，需要允许B-&gt;A的icmp echo-reply报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acl 3001</span><br><span class=\"line\">   rule 5 permit icmp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255  icmp-type echo-reply</span><br></pre></td></tr></table></figure>\n<p>对于TCP协议，需要允许B-&gt;A，报文头中SYN Flag的类型为ack(010000)或rst(000100)的TCP报文：<br>———-V2R2版本及以前的配置————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 9 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag ack</span><br><span class=\"line\">rule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag rst</span><br></pre></td></tr></table></figure>\n<p>———-V2R3版本及以后的配置————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag established</span><br></pre></td></tr></table></figure>\n<p>对于UDP协议，由于其为无状态的特性，无法实现单通，基于业务优先原则，放开所有UDP协议文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 15 permit udp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255</span><br></pre></td></tr></table></figure>\n<p>最后，deny其他B-&gt;A的IP流量，并基于业务优先原则，放开其他所有未知流量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 20 deny ip source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255</span><br><span class=\"line\">rule 25 permit ip</span><br></pre></td></tr></table></figure>\n<p>将该ACL通过traffic-filter应用于VLAN之上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traffic-filter vlan B inbound acl 3001</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>我们假设有VLAN A和B，需要做到A可以访问B，而B不可以访问A</strong><br>  A的地址段为 X.X.X.X/24<br>  B的地址段为 Y.Y.Y.Y/24</p>\n<p>  对于单向流量的控制，一般来说是属于防火墙的功能。但实际上，交换机也是可以通过ACL的灵活配置，来实现最基本的单向流量控制。具体配置如下：</p>\n<p>对于ICMP协议，需要允许B-&gt;A的icmp echo-reply报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acl 3001</span><br><span class=\"line\">   rule 5 permit icmp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255  icmp-type echo-reply</span><br></pre></td></tr></table></figure>\n<p>对于TCP协议，需要允许B-&gt;A，报文头中SYN Flag的类型为ack(010000)或rst(000100)的TCP报文：<br>———-V2R2版本及以前的配置————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 9 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag ack</span><br><span class=\"line\">rule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag rst</span><br></pre></td></tr></table></figure>\n<p>———-V2R3版本及以后的配置————</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 10 permit tcp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255 tcp-flag established</span><br></pre></td></tr></table></figure>\n<p>对于UDP协议，由于其为无状态的特性，无法实现单通，基于业务优先原则，放开所有UDP协议文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 15 permit udp source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255</span><br></pre></td></tr></table></figure>\n<p>最后，deny其他B-&gt;A的IP流量，并基于业务优先原则，放开其他所有未知流量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule 20 deny ip source Y.Y.Y.Y 0.0.0.255 destination X.X.X.X 0.0.0.255</span><br><span class=\"line\">rule 25 permit ip</span><br></pre></td></tr></table></figure>\n<p>将该ACL通过traffic-filter应用于VLAN之上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">traffic-filter vlan B inbound acl 3001</span><br></pre></td></tr></table></figure>\n"},{"title":"Postgresql static sys-view 性能","date":"2019-10-06T05:55:53.000Z","_content":"[参考](https://www.cybertec-postgresql.com/en/3-ways-to-detect-slow-queries-in-postgresql/)\n\n0. explain 计划\n```sql\nexplain (analyze ,verbose ,consts ,timing ,buffers) Select ...\n```\n\n1. pg_stat_activity(观察当前系统活动),每个连接一行记录.\n```sql\n\\d pg_stat_activity\nSelect pid ,query_stat ,state_change ,state ,query From pg_stat_activity;\n```\n  + pg_cancel_backend. (Select pg_cancel_backend(pid)),终止pid,保留连接.\n  + pg_terminate_backend.\n\n2. 检查数据库,pg_state_database\n```sql\n\\d pg_state_database\n```\n\n3. 检查表 pg_stat_user_tables ,pg_statio_user_tables\n```sql\n\\d pg_stat_user_tables\nSelect schemaname, relname ,seq_scan ,seq_tup_read,\n  seq_tup_read /seq_scan as avg, idx_scan\nFrom pg_stat_user_tables\nWhere seq_scan > 0\nOrder By seq_tup_read Desc\nLimit 25;\n\\d pg_statio_user_tables\n```\n\n4. 深入索引 pg_stat_user_indexes\n```sql\n\\d pg_stat_user_indexes\nSelect schemaname ,relname ,indexrelname ,idx_scan,\n  pg_size_pretty(pg_relation_size(indexrelid)) as idx_size,\n  pg_size_pretty(sum(pg_relation_size(indexrelid))\n                  Over (Order By idx_scan ,indexrelid)) as total\nFrom pg_stat_user_indexes\nOrder By 6;\n```\n\n5. 使用 **pg_stat_statements**\n  1. postgresql.conf 中将 pg_stat_statements 加入 shared_preload_libraties.\n  2. 重启 db server.\n  3. 在你的database中运行 CREATE EXTESION pg_stat_statements.\n```sql\n\\d pg_stat_statements\nSelect round((100 * total_time /sum(total_time)\n        Over ())::numeric, 2) percent,\n      round(total_time::numeric ,2) as total,\n      calls,\n      round(mean_time::numeric ,2) as mean,\n      substring(query, 1, 40)\nFrom pg_stat_statements\nOrder By total_time DESC\nLimit 10;\nSelect pg_stat_statements_reset();\n```\n","source":"_posts/2019-10-06-Postgresql-static-sys-view-性能.md","raw":"---\ntitle: Postgresql static sys-view 性能\ndate: 2019-10-06 13:55:53\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n[参考](https://www.cybertec-postgresql.com/en/3-ways-to-detect-slow-queries-in-postgresql/)\n\n0. explain 计划\n```sql\nexplain (analyze ,verbose ,consts ,timing ,buffers) Select ...\n```\n\n1. pg_stat_activity(观察当前系统活动),每个连接一行记录.\n```sql\n\\d pg_stat_activity\nSelect pid ,query_stat ,state_change ,state ,query From pg_stat_activity;\n```\n  + pg_cancel_backend. (Select pg_cancel_backend(pid)),终止pid,保留连接.\n  + pg_terminate_backend.\n\n2. 检查数据库,pg_state_database\n```sql\n\\d pg_state_database\n```\n\n3. 检查表 pg_stat_user_tables ,pg_statio_user_tables\n```sql\n\\d pg_stat_user_tables\nSelect schemaname, relname ,seq_scan ,seq_tup_read,\n  seq_tup_read /seq_scan as avg, idx_scan\nFrom pg_stat_user_tables\nWhere seq_scan > 0\nOrder By seq_tup_read Desc\nLimit 25;\n\\d pg_statio_user_tables\n```\n\n4. 深入索引 pg_stat_user_indexes\n```sql\n\\d pg_stat_user_indexes\nSelect schemaname ,relname ,indexrelname ,idx_scan,\n  pg_size_pretty(pg_relation_size(indexrelid)) as idx_size,\n  pg_size_pretty(sum(pg_relation_size(indexrelid))\n                  Over (Order By idx_scan ,indexrelid)) as total\nFrom pg_stat_user_indexes\nOrder By 6;\n```\n\n5. 使用 **pg_stat_statements**\n  1. postgresql.conf 中将 pg_stat_statements 加入 shared_preload_libraties.\n  2. 重启 db server.\n  3. 在你的database中运行 CREATE EXTESION pg_stat_statements.\n```sql\n\\d pg_stat_statements\nSelect round((100 * total_time /sum(total_time)\n        Over ())::numeric, 2) percent,\n      round(total_time::numeric ,2) as total,\n      calls,\n      round(mean_time::numeric ,2) as mean,\n      substring(query, 1, 40)\nFrom pg_stat_statements\nOrder By total_time DESC\nLimit 10;\nSelect pg_stat_statements_reset();\n```\n","slug":"Postgresql-static-sys-view-性能","published":1,"updated":"2019-10-07T06:37:29.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx25002npspw5xlnawes","content":"<p><a href=\"https://www.cybertec-postgresql.com/en/3-ways-to-detect-slow-queries-in-postgresql/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<ol start=\"0\">\n<li><p>explain 计划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> (<span class=\"keyword\">analyze</span> ,verbose ,consts ,timing ,buffers) <span class=\"keyword\">Select</span> ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pg_stat_activity(观察当前系统活动),每个连接一行记录.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_activity</span><br><span class=\"line\"><span class=\"keyword\">Select</span> pid ,query_stat ,state_change ,state ,<span class=\"keyword\">query</span> <span class=\"keyword\">From</span> pg_stat_activity;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pg_cancel_backend. (Select pg_cancel_backend(pid)),终止pid,保留连接.</li>\n<li>pg_terminate_backend.</li>\n</ul>\n</li>\n<li><p>检查数据库,pg_state_database</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_state_database</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查表 pg_stat_user_tables ,pg_statio_user_tables</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">Select</span> schemaname, relname ,seq_scan ,seq_tup_read,</span><br><span class=\"line\">  seq_tup_read /seq_scan <span class=\"keyword\">as</span> <span class=\"keyword\">avg</span>, idx_scan</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">Where</span> seq_scan &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> seq_tup_read <span class=\"keyword\">Desc</span></span><br><span class=\"line\"><span class=\"keyword\">Limit</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">\\d pg_statio_user_tables</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>深入索引 pg_stat_user_indexes</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_user_indexes</span><br><span class=\"line\"><span class=\"keyword\">Select</span> schemaname ,relname ,indexrelname ,idx_scan,</span><br><span class=\"line\">  pg_size_pretty(pg_relation_size(indexrelid)) <span class=\"keyword\">as</span> idx_size,</span><br><span class=\"line\">  pg_size_pretty(<span class=\"keyword\">sum</span>(pg_relation_size(indexrelid))</span><br><span class=\"line\">                  <span class=\"keyword\">Over</span> (<span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> idx_scan ,indexrelid)) <span class=\"keyword\">as</span> total</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_user_indexes</span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <strong>pg_stat_statements</strong></p>\n<ol>\n<li>postgresql.conf 中将 pg_stat_statements 加入 shared_preload_libraties.</li>\n<li>重启 db server.</li>\n<li>在你的database中运行 CREATE EXTESION pg_stat_statements.<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">round</span>((<span class=\"number\">100</span> * total_time /<span class=\"keyword\">sum</span>(total_time)</span><br><span class=\"line\">        <span class=\"keyword\">Over</span> ())::<span class=\"built_in\">numeric</span>, <span class=\"number\">2</span>) <span class=\"keyword\">percent</span>,</span><br><span class=\"line\">      <span class=\"keyword\">round</span>(total_time::<span class=\"built_in\">numeric</span> ,<span class=\"number\">2</span>) <span class=\"keyword\">as</span> total,</span><br><span class=\"line\">      calls,</span><br><span class=\"line\">      <span class=\"keyword\">round</span>(mean_time::<span class=\"built_in\">numeric</span> ,<span class=\"number\">2</span>) <span class=\"keyword\">as</span> mean,</span><br><span class=\"line\">      <span class=\"keyword\">substring</span>(<span class=\"keyword\">query</span>, <span class=\"number\">1</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> total_time <span class=\"keyword\">DESC</span></span><br><span class=\"line\"><span class=\"keyword\">Limit</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">Select</span> pg_stat_statements_reset();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cybertec-postgresql.com/en/3-ways-to-detect-slow-queries-in-postgresql/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<ol start=\"0\">\n<li><p>explain 计划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> (<span class=\"keyword\">analyze</span> ,verbose ,consts ,timing ,buffers) <span class=\"keyword\">Select</span> ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pg_stat_activity(观察当前系统活动),每个连接一行记录.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_activity</span><br><span class=\"line\"><span class=\"keyword\">Select</span> pid ,query_stat ,state_change ,state ,<span class=\"keyword\">query</span> <span class=\"keyword\">From</span> pg_stat_activity;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pg_cancel_backend. (Select pg_cancel_backend(pid)),终止pid,保留连接.</li>\n<li>pg_terminate_backend.</li>\n</ul>\n</li>\n<li><p>检查数据库,pg_state_database</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_state_database</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查表 pg_stat_user_tables ,pg_statio_user_tables</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">Select</span> schemaname, relname ,seq_scan ,seq_tup_read,</span><br><span class=\"line\">  seq_tup_read /seq_scan <span class=\"keyword\">as</span> <span class=\"keyword\">avg</span>, idx_scan</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">Where</span> seq_scan &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> seq_tup_read <span class=\"keyword\">Desc</span></span><br><span class=\"line\"><span class=\"keyword\">Limit</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">\\d pg_statio_user_tables</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>深入索引 pg_stat_user_indexes</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_user_indexes</span><br><span class=\"line\"><span class=\"keyword\">Select</span> schemaname ,relname ,indexrelname ,idx_scan,</span><br><span class=\"line\">  pg_size_pretty(pg_relation_size(indexrelid)) <span class=\"keyword\">as</span> idx_size,</span><br><span class=\"line\">  pg_size_pretty(<span class=\"keyword\">sum</span>(pg_relation_size(indexrelid))</span><br><span class=\"line\">                  <span class=\"keyword\">Over</span> (<span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> idx_scan ,indexrelid)) <span class=\"keyword\">as</span> total</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_user_indexes</span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <strong>pg_stat_statements</strong></p>\n<ol>\n<li>postgresql.conf 中将 pg_stat_statements 加入 shared_preload_libraties.</li>\n<li>重启 db server.</li>\n<li>在你的database中运行 CREATE EXTESION pg_stat_statements.<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">Select</span> <span class=\"keyword\">round</span>((<span class=\"number\">100</span> * total_time /<span class=\"keyword\">sum</span>(total_time)</span><br><span class=\"line\">        <span class=\"keyword\">Over</span> ())::<span class=\"built_in\">numeric</span>, <span class=\"number\">2</span>) <span class=\"keyword\">percent</span>,</span><br><span class=\"line\">      <span class=\"keyword\">round</span>(total_time::<span class=\"built_in\">numeric</span> ,<span class=\"number\">2</span>) <span class=\"keyword\">as</span> total,</span><br><span class=\"line\">      calls,</span><br><span class=\"line\">      <span class=\"keyword\">round</span>(mean_time::<span class=\"built_in\">numeric</span> ,<span class=\"number\">2</span>) <span class=\"keyword\">as</span> mean,</span><br><span class=\"line\">      <span class=\"keyword\">substring</span>(<span class=\"keyword\">query</span>, <span class=\"number\">1</span>, <span class=\"number\">40</span>)</span><br><span class=\"line\"><span class=\"keyword\">From</span> pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">Order</span> <span class=\"keyword\">By</span> total_time <span class=\"keyword\">DESC</span></span><br><span class=\"line\"><span class=\"keyword\">Limit</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">Select</span> pg_stat_statements_reset();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Docker entrypoint vs cmd","date":"2019-10-09T13:49:38.000Z","_content":"[原文](https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile)\n\n  **Docker has a default entrypoint which is /bin/sh -c but does not have a default command.**\n\n  When you run docker like this: docker run -i -t ubuntu bash the entrypoint is the default /bin/sh -c, the image is ubuntu and the command is bash.\n\n  The command is run via the entrypoint. i.e., the actual thing that gets executed is /bin/sh -c bash. This allowed Docker to implement RUN quickly by relying on the shell's parser.\n\n  Later on, people asked to be able to customize this, so ENTRYPOINT and --entrypoint were introduced.\n\n  Everything after ubuntu in the example above is the command and is passed to the entrypoint. When using the CMD instruction, it is exactly as if you were doing docker run -i -t ubuntu <cmd>. <cmd> will be the parameter of the entrypoint.\n\n  You will also get the same result if you instead type this command docker run -i -t ubuntu. You will still start a bash shell in the container because of the ubuntu Dockerfile specified a default CMD: CMD [\"bash\"]\n\n  As everything is passed to the entrypoint, you can have a very nice behavior from your images. @Jiri example is good, it shows how to use an image as a \"binary\". When using [\"/bin/cat\"] as entrypoint and then doing docker run img /etc/passwd, you get it, /etc/passwd is the command and is passed to the entrypoint so the end result execution is simply /bin/cat /etc/passwd.\n\n  Another example would be to have any cli as entrypoint. For instance, if you have a redis image, instead of running docker run redisimg redis -H something -u toto get key, you can simply have ENTRYPOINT [\"redis\", \"-H\", \"something\", \"-u\", \"toto\"] and then run like this for the same result: docker run redisimg get key.\n","source":"_posts/2019-10-09-Docker-entrypoint-vs-cmd.md","raw":"---\ntitle: Docker entrypoint vs cmd\ndate: 2019-10-09 21:49:38\ntags:\n- docker\ncategories: \n- computer\n- linux\n---\n[原文](https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile)\n\n  **Docker has a default entrypoint which is /bin/sh -c but does not have a default command.**\n\n  When you run docker like this: docker run -i -t ubuntu bash the entrypoint is the default /bin/sh -c, the image is ubuntu and the command is bash.\n\n  The command is run via the entrypoint. i.e., the actual thing that gets executed is /bin/sh -c bash. This allowed Docker to implement RUN quickly by relying on the shell's parser.\n\n  Later on, people asked to be able to customize this, so ENTRYPOINT and --entrypoint were introduced.\n\n  Everything after ubuntu in the example above is the command and is passed to the entrypoint. When using the CMD instruction, it is exactly as if you were doing docker run -i -t ubuntu <cmd>. <cmd> will be the parameter of the entrypoint.\n\n  You will also get the same result if you instead type this command docker run -i -t ubuntu. You will still start a bash shell in the container because of the ubuntu Dockerfile specified a default CMD: CMD [\"bash\"]\n\n  As everything is passed to the entrypoint, you can have a very nice behavior from your images. @Jiri example is good, it shows how to use an image as a \"binary\". When using [\"/bin/cat\"] as entrypoint and then doing docker run img /etc/passwd, you get it, /etc/passwd is the command and is passed to the entrypoint so the end result execution is simply /bin/cat /etc/passwd.\n\n  Another example would be to have any cli as entrypoint. For instance, if you have a redis image, instead of running docker run redisimg redis -H something -u toto get key, you can simply have ENTRYPOINT [\"redis\", \"-H\", \"something\", \"-u\", \"toto\"] and then run like this for the same result: docker run redisimg get key.\n","slug":"Docker-entrypoint-vs-cmd","published":1,"updated":"2019-10-10T11:45:10.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx28002rpspw3yqi9a4e","content":"<p><a href=\"https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>  <strong>Docker has a default entrypoint which is /bin/sh -c but does not have a default command.</strong></p>\n<p>  When you run docker like this: docker run -i -t ubuntu bash the entrypoint is the default /bin/sh -c, the image is ubuntu and the command is bash.</p>\n<p>  The command is run via the entrypoint. i.e., the actual thing that gets executed is /bin/sh -c bash. This allowed Docker to implement RUN quickly by relying on the shell’s parser.</p>\n<p>  Later on, people asked to be able to customize this, so ENTRYPOINT and –entrypoint were introduced.</p>\n<p>  Everything after ubuntu in the example above is the command and is passed to the entrypoint. When using the CMD instruction, it is exactly as if you were doing docker run -i -t ubuntu <cmd>. <cmd> will be the parameter of the entrypoint.</p>\n<p>  You will also get the same result if you instead type this command docker run -i -t ubuntu. You will still start a bash shell in the container because of the ubuntu Dockerfile specified a default CMD: CMD [“bash”]</p>\n<p>  As everything is passed to the entrypoint, you can have a very nice behavior from your images. @Jiri example is good, it shows how to use an image as a “binary”. When using [“/bin/cat”] as entrypoint and then doing docker run img /etc/passwd, you get it, /etc/passwd is the command and is passed to the entrypoint so the end result execution is simply /bin/cat /etc/passwd.</p>\n<p>  Another example would be to have any cli as entrypoint. For instance, if you have a redis image, instead of running docker run redisimg redis -H something -u toto get key, you can simply have ENTRYPOINT [“redis”, “-H”, “something”, “-u”, “toto”] and then run like this for the same result: docker run redisimg get key.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>  <strong>Docker has a default entrypoint which is /bin/sh -c but does not have a default command.</strong></p>\n<p>  When you run docker like this: docker run -i -t ubuntu bash the entrypoint is the default /bin/sh -c, the image is ubuntu and the command is bash.</p>\n<p>  The command is run via the entrypoint. i.e., the actual thing that gets executed is /bin/sh -c bash. This allowed Docker to implement RUN quickly by relying on the shell’s parser.</p>\n<p>  Later on, people asked to be able to customize this, so ENTRYPOINT and –entrypoint were introduced.</p>\n<p>  Everything after ubuntu in the example above is the command and is passed to the entrypoint. When using the CMD instruction, it is exactly as if you were doing docker run -i -t ubuntu <cmd>. <cmd> will be the parameter of the entrypoint.</p>\n<p>  You will also get the same result if you instead type this command docker run -i -t ubuntu. You will still start a bash shell in the container because of the ubuntu Dockerfile specified a default CMD: CMD [“bash”]</p>\n<p>  As everything is passed to the entrypoint, you can have a very nice behavior from your images. @Jiri example is good, it shows how to use an image as a “binary”. When using [“/bin/cat”] as entrypoint and then doing docker run img /etc/passwd, you get it, /etc/passwd is the command and is passed to the entrypoint so the end result execution is simply /bin/cat /etc/passwd.</p>\n<p>  Another example would be to have any cli as entrypoint. For instance, if you have a redis image, instead of running docker run redisimg redis -H something -u toto get key, you can simply have ENTRYPOINT [“redis”, “-H”, “something”, “-u”, “toto”] and then run like this for the same result: docker run redisimg get key.</p>\n"},{"title":"set timezone in pg","date":"2019-10-26T05:57:46.000Z","_content":"\n### timezone 的设置\n可以在连接参数中设置,也可以在服务器中修改或修改conf文件.\n\n```sql\nSELECT * FROM pg_timezone_names;\nALTER DATABASE postgres SET timezone TO 'Europe/Berlin';\n```\n","source":"_posts/2019-10-26-set-timezone-in-pg.md","raw":"---\ntitle: set timezone in pg\ndate: 2019-10-26 13:57:46\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n\n### timezone 的设置\n可以在连接参数中设置,也可以在服务器中修改或修改conf文件.\n\n```sql\nSELECT * FROM pg_timezone_names;\nALTER DATABASE postgres SET timezone TO 'Europe/Berlin';\n```\n","slug":"set-timezone-in-pg","published":1,"updated":"2019-10-26T06:04:16.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx29002vpspw1cubgv0v","content":"<h3 id=\"timezone-的设置\"><a href=\"#timezone-的设置\" class=\"headerlink\" title=\"timezone 的设置\"></a>timezone 的设置</h3><p>可以在连接参数中设置,也可以在服务器中修改或修改conf文件.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> pg_timezone_names;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> postgres <span class=\"keyword\">SET</span> timezone <span class=\"keyword\">TO</span> <span class=\"string\">'Europe/Berlin'</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"timezone-的设置\"><a href=\"#timezone-的设置\" class=\"headerlink\" title=\"timezone 的设置\"></a>timezone 的设置</h3><p>可以在连接参数中设置,也可以在服务器中修改或修改conf文件.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> pg_timezone_names;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> postgres <span class=\"keyword\">SET</span> timezone <span class=\"keyword\">TO</span> <span class=\"string\">'Europe/Berlin'</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"Unix and Windows 文本文件转换","date":"2019-11-04T11:33:08.000Z","_content":"[原文](https://kb.iu.edu/d/acux)\n+ windows: line feed + carriage return\n+ unix: a line feed\n\n#### vim中转换文本文件(方法之一)\n```Vim\n:set ff=unix\n:set ff=dos\n```\n\n","source":"_posts/2019-11-04-Unix-and-Windows-文本文件转换.md","raw":"---\ntitle: Unix and Windows 文本文件转换\ndate: 2019-11-04 19:33:08\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n[原文](https://kb.iu.edu/d/acux)\n+ windows: line feed + carriage return\n+ unix: a line feed\n\n#### vim中转换文本文件(方法之一)\n```Vim\n:set ff=unix\n:set ff=dos\n```\n\n","slug":"Unix-and-Windows-文本文件转换","published":1,"updated":"2019-11-04T12:20:56.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2b002ypspw456m42jd","content":"<p><a href=\"https://kb.iu.edu/d/acux\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<ul>\n<li>windows: line feed + carriage return</li>\n<li>unix: a line feed</li>\n</ul>\n<h4 id=\"vim中转换文本文件-方法之一\"><a href=\"#vim中转换文本文件-方法之一\" class=\"headerlink\" title=\"vim中转换文本文件(方法之一)\"></a>vim中转换文本文件(方法之一)</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">set</span> ff=unix</span><br><span class=\"line\">:<span class=\"keyword\">set</span> ff=dos</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://kb.iu.edu/d/acux\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<ul>\n<li>windows: line feed + carriage return</li>\n<li>unix: a line feed</li>\n</ul>\n<h4 id=\"vim中转换文本文件-方法之一\"><a href=\"#vim中转换文本文件-方法之一\" class=\"headerlink\" title=\"vim中转换文本文件(方法之一)\"></a>vim中转换文本文件(方法之一)</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">set</span> ff=unix</span><br><span class=\"line\">:<span class=\"keyword\">set</span> ff=dos</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Windows中sha1 md5校验","date":"2019-11-03T12:47:49.000Z","_content":"#### 命令行\n```cmd\ncertutil -hashfile <文件名> <hash类型>\n```\n","source":"_posts/2019-11-03-windows中sha1-md5校验.md","raw":"---\ntitle: Windows中sha1 md5校验\ndate: 2019-11-03 20:47:49\ntags:\n- shell\ncategories: \n- computer\n- windows\n---\n#### 命令行\n```cmd\ncertutil -hashfile <文件名> <hash类型>\n```\n","slug":"windows中sha1-md5校验","published":1,"updated":"2019-11-04T11:22:59.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2d0032pspw4os11k1y","content":"<h4 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certutil -hashfile &lt;文件名&gt; &lt;hash类型&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certutil -hashfile &lt;文件名&gt; &lt;hash类型&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"netsh 命令行修改网络配置","date":"2019-11-06T11:58:56.000Z","_content":"#### netsh example\n```cmd\nnetsh\nnetsh>interface ip show config\nnetsh>netsh interface ip set address \"connection name\" static 192.168.x.x 255.255.255.0 192.168.x.x\nnetsh>netsh interface ip add dns \"connection name\" 8.8.8.8\nnetsh>netsh interface ip add dns \"connection name\" 114.114.114.114 index=2\nnetsh>netsh interface ip set address \"connection name\" dhcp\nnetsh>netsh interface ip set dns \"connection name\" dhcp\n```\n","source":"_posts/2019-11-06-netsh-命令行修改网络配置.md","raw":"---\ntitle: netsh 命令行修改网络配置\ndate: 2019-11-06 19:58:56\ntags:\n- shell\ncategories: \n- computer\n- windows\n---\n#### netsh example\n```cmd\nnetsh\nnetsh>interface ip show config\nnetsh>netsh interface ip set address \"connection name\" static 192.168.x.x 255.255.255.0 192.168.x.x\nnetsh>netsh interface ip add dns \"connection name\" 8.8.8.8\nnetsh>netsh interface ip add dns \"connection name\" 114.114.114.114 index=2\nnetsh>netsh interface ip set address \"connection name\" dhcp\nnetsh>netsh interface ip set dns \"connection name\" dhcp\n```\n","slug":"netsh-命令行修改网络配置","published":1,"updated":"2019-11-06T12:04:03.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2e0035pspwgmuo8z3t","content":"<h4 id=\"netsh-example\"><a href=\"#netsh-example\" class=\"headerlink\" title=\"netsh example\"></a>netsh example</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh</span><br><span class=\"line\">netsh&gt;interface ip show config</span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> address \"connection name\" static <span class=\"number\">192</span>.<span class=\"number\">168</span>.x.x <span class=\"number\">255</span>.<span class=\"number\">255</span>.<span class=\"number\">255</span>.<span class=\"number\">0</span> <span class=\"number\">192</span>.<span class=\"number\">168</span>.x.x</span><br><span class=\"line\">netsh&gt;netsh interface ip add dns \"connection name\" <span class=\"number\">8</span>.<span class=\"number\">8</span>.<span class=\"number\">8</span>.<span class=\"number\">8</span></span><br><span class=\"line\">netsh&gt;netsh interface ip add dns \"connection name\" <span class=\"number\">114</span>.<span class=\"number\">114</span>.<span class=\"number\">114</span>.<span class=\"number\">114</span> index=<span class=\"number\">2</span></span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> address \"connection name\" dhcp</span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> dns \"connection name\" dhcp</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"netsh-example\"><a href=\"#netsh-example\" class=\"headerlink\" title=\"netsh example\"></a>netsh example</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh</span><br><span class=\"line\">netsh&gt;interface ip show config</span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> address \"connection name\" static <span class=\"number\">192</span>.<span class=\"number\">168</span>.x.x <span class=\"number\">255</span>.<span class=\"number\">255</span>.<span class=\"number\">255</span>.<span class=\"number\">0</span> <span class=\"number\">192</span>.<span class=\"number\">168</span>.x.x</span><br><span class=\"line\">netsh&gt;netsh interface ip add dns \"connection name\" <span class=\"number\">8</span>.<span class=\"number\">8</span>.<span class=\"number\">8</span>.<span class=\"number\">8</span></span><br><span class=\"line\">netsh&gt;netsh interface ip add dns \"connection name\" <span class=\"number\">114</span>.<span class=\"number\">114</span>.<span class=\"number\">114</span>.<span class=\"number\">114</span> index=<span class=\"number\">2</span></span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> address \"connection name\" dhcp</span><br><span class=\"line\">netsh&gt;netsh interface ip <span class=\"built_in\">set</span> dns \"connection name\" dhcp</span><br></pre></td></tr></table></figure>\n"},{"title":"PowerShell && FireWall","date":"2019-11-07T11:31:53.000Z","_content":"#### PowerShell 设置防火墙\n```powershell\n##关闭防火墙\nGet-NetFirewallProfile | Set-NetFirewallProfile -enabled false\n##允许ping\nSet-NetFirewallRule –Name “FPS-ICMP4-ERQ-In” –Enabled True\nSet-NetFirewallRule –Name “FPS-ICMP4-ERQ-Out” –Enabled True\n```\n","source":"_posts/2019-11-07-PowerShell-FireWall.md","raw":"---\ntitle: PowerShell && FireWall\ndate: 2019-11-07 19:31:53\ntags:\n- shell\ncategories: \n- computer\n- windows\n---\n#### PowerShell 设置防火墙\n```powershell\n##关闭防火墙\nGet-NetFirewallProfile | Set-NetFirewallProfile -enabled false\n##允许ping\nSet-NetFirewallRule –Name “FPS-ICMP4-ERQ-In” –Enabled True\nSet-NetFirewallRule –Name “FPS-ICMP4-ERQ-Out” –Enabled True\n```\n","slug":"PowerShell-FireWall","published":1,"updated":"2019-11-09T03:48:07.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2g0038pspwdubi2elg","content":"<h4 id=\"PowerShell-设置防火墙\"><a href=\"#PowerShell-设置防火墙\" class=\"headerlink\" title=\"PowerShell 设置防火墙\"></a>PowerShell 设置防火墙</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##关闭防火墙</span></span><br><span class=\"line\"><span class=\"built_in\">Get-NetFirewallProfile</span> | <span class=\"built_in\">Set-NetFirewallProfile</span> <span class=\"literal\">-enabled</span> false</span><br><span class=\"line\"><span class=\"comment\">##允许ping</span></span><br><span class=\"line\"><span class=\"built_in\">Set-NetFirewallRule</span> –Name “FPS<span class=\"literal\">-ICMP4</span><span class=\"literal\">-ERQ</span><span class=\"operator\">-In</span>” –Enabled True</span><br><span class=\"line\"><span class=\"built_in\">Set-NetFirewallRule</span> –Name “FPS<span class=\"literal\">-ICMP4</span><span class=\"literal\">-ERQ</span><span class=\"literal\">-Out</span>” –Enabled True</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"PowerShell-设置防火墙\"><a href=\"#PowerShell-设置防火墙\" class=\"headerlink\" title=\"PowerShell 设置防火墙\"></a>PowerShell 设置防火墙</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##关闭防火墙</span></span><br><span class=\"line\"><span class=\"built_in\">Get-NetFirewallProfile</span> | <span class=\"built_in\">Set-NetFirewallProfile</span> <span class=\"literal\">-enabled</span> false</span><br><span class=\"line\"><span class=\"comment\">##允许ping</span></span><br><span class=\"line\"><span class=\"built_in\">Set-NetFirewallRule</span> –Name “FPS<span class=\"literal\">-ICMP4</span><span class=\"literal\">-ERQ</span><span class=\"operator\">-In</span>” –Enabled True</span><br><span class=\"line\"><span class=\"built_in\">Set-NetFirewallRule</span> –Name “FPS<span class=\"literal\">-ICMP4</span><span class=\"literal\">-ERQ</span><span class=\"literal\">-Out</span>” –Enabled True</span><br></pre></td></tr></table></figure>\n"},{"title":"kubenetes 安装","date":"2019-12-06T12:14:59.000Z","_content":"**我基本上是按照这篇[文章](https://www.cnblogs.com/leisurelylicht/p/Ubuntu-guo-nei-an-zhuang-kubernetes.html)的指导安装的.**\n\n**Linux网桥的概念请参考这篇[文章](https://segmentfault.com/a/1190000009491002)**\n\n1. kubelet,kubeadm,kubectl的安装,使用[阿里源](https://developer.aliyun.com/mirror)\n2. docker-ce 安装,使用[阿里源](https://developer.aliyun.com/mirror)\n3. 关闭swap\n```bash\nsudo swapoff -a\nsudo sed -i '/swap/s/^/#/' /etc/fstab\n```\n4. 获取镜像(非MASTER NODE上,需要kube-proxy,pause),从阿里源pull,然后改名.\n```bash\nkubeadm config images list\nimages=(\nkube-apiserver:v1.13.4\nkube-controller-manager:v1.13.4\nkube-scheduler:v1.13.4\nkube-proxy:v1.13.4\npause:3.1\netcd:3.2.24\ncoredns:1.2.6\n)\nfor imageName in ${images[@]} ; do\n        docker pull registry.aliyuncs.com/google_containers/$imageName\n        docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n        docker rmi registry.aliyuncs.com/google_containers/$imageName\ndone\n```\n5. 安装master(使用flannel网络,需指定pod-network-cidr)\n```bash\nkubeadm init --pod-network-cidr=10.244.0.0/16\n```\n6. 应用flannel插件(非MASTER NODE上需要flannel镜像,具体的镜像名,可在下面的yml文件中找到.例如: query.io/coreos/flannel:v0.11.0-amd64)\n```bash\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n","source":"_posts/2019-12-06-kubenetes-安装.md","raw":"---\ntitle: kubenetes 安装\ndate: 2019-12-06 20:14:59\ntags:\n- kubenetes\ncategories: \n- computer\n- linux\n---\n**我基本上是按照这篇[文章](https://www.cnblogs.com/leisurelylicht/p/Ubuntu-guo-nei-an-zhuang-kubernetes.html)的指导安装的.**\n\n**Linux网桥的概念请参考这篇[文章](https://segmentfault.com/a/1190000009491002)**\n\n1. kubelet,kubeadm,kubectl的安装,使用[阿里源](https://developer.aliyun.com/mirror)\n2. docker-ce 安装,使用[阿里源](https://developer.aliyun.com/mirror)\n3. 关闭swap\n```bash\nsudo swapoff -a\nsudo sed -i '/swap/s/^/#/' /etc/fstab\n```\n4. 获取镜像(非MASTER NODE上,需要kube-proxy,pause),从阿里源pull,然后改名.\n```bash\nkubeadm config images list\nimages=(\nkube-apiserver:v1.13.4\nkube-controller-manager:v1.13.4\nkube-scheduler:v1.13.4\nkube-proxy:v1.13.4\npause:3.1\netcd:3.2.24\ncoredns:1.2.6\n)\nfor imageName in ${images[@]} ; do\n        docker pull registry.aliyuncs.com/google_containers/$imageName\n        docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n        docker rmi registry.aliyuncs.com/google_containers/$imageName\ndone\n```\n5. 安装master(使用flannel网络,需指定pod-network-cidr)\n```bash\nkubeadm init --pod-network-cidr=10.244.0.0/16\n```\n6. 应用flannel插件(非MASTER NODE上需要flannel镜像,具体的镜像名,可在下面的yml文件中找到.例如: query.io/coreos/flannel:v0.11.0-amd64)\n```bash\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n","slug":"kubenetes-安装","published":1,"updated":"2019-12-07T12:23:34.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2h003bpspw60ochjvr","content":"<p><strong>我基本上是按照这篇<a href=\"https://www.cnblogs.com/leisurelylicht/p/Ubuntu-guo-nei-an-zhuang-kubernetes.html\" target=\"_blank\" rel=\"noopener\">文章</a>的指导安装的.</strong></p>\n<p><strong>Linux网桥的概念请参考这篇<a href=\"https://segmentfault.com/a/1190000009491002\" target=\"_blank\" rel=\"noopener\">文章</a></strong></p>\n<ol>\n<li>kubelet,kubeadm,kubectl的安装,使用<a href=\"https://developer.aliyun.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里源</a></li>\n<li>docker-ce 安装,使用<a href=\"https://developer.aliyun.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里源</a></li>\n<li>关闭swap<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br><span class=\"line\">sudo sed -i <span class=\"string\">'/swap/s/^/#/'</span> /etc/fstab</span><br></pre></td></tr></table></figure></li>\n<li>获取镜像(非MASTER NODE上,需要kube-proxy,pause),从阿里源pull,然后改名.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config images list</span><br><span class=\"line\">images=(</span><br><span class=\"line\">kube-apiserver:v1.13.4</span><br><span class=\"line\">kube-controller-manager:v1.13.4</span><br><span class=\"line\">kube-scheduler:v1.13.4</span><br><span class=\"line\">kube-proxy:v1.13.4</span><br><span class=\"line\">pause:3.1</span><br><span class=\"line\">etcd:3.2.24</span><br><span class=\"line\">coredns:1.2.6</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        docker pull registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">        docker tag registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span> k8s.gcr.io/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">        docker rmi registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></li>\n<li>安装master(使用flannel网络,需指定pod-network-cidr)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li>\n<li>应用flannel插件(非MASTER NODE上需要flannel镜像,具体的镜像名,可在下面的yml文件中找到.例如: query.io/coreos/flannel:v0.11.0-amd64)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>我基本上是按照这篇<a href=\"https://www.cnblogs.com/leisurelylicht/p/Ubuntu-guo-nei-an-zhuang-kubernetes.html\" target=\"_blank\" rel=\"noopener\">文章</a>的指导安装的.</strong></p>\n<p><strong>Linux网桥的概念请参考这篇<a href=\"https://segmentfault.com/a/1190000009491002\" target=\"_blank\" rel=\"noopener\">文章</a></strong></p>\n<ol>\n<li>kubelet,kubeadm,kubectl的安装,使用<a href=\"https://developer.aliyun.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里源</a></li>\n<li>docker-ce 安装,使用<a href=\"https://developer.aliyun.com/mirror\" target=\"_blank\" rel=\"noopener\">阿里源</a></li>\n<li>关闭swap<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br><span class=\"line\">sudo sed -i <span class=\"string\">'/swap/s/^/#/'</span> /etc/fstab</span><br></pre></td></tr></table></figure></li>\n<li>获取镜像(非MASTER NODE上,需要kube-proxy,pause),从阿里源pull,然后改名.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config images list</span><br><span class=\"line\">images=(</span><br><span class=\"line\">kube-apiserver:v1.13.4</span><br><span class=\"line\">kube-controller-manager:v1.13.4</span><br><span class=\"line\">kube-scheduler:v1.13.4</span><br><span class=\"line\">kube-proxy:v1.13.4</span><br><span class=\"line\">pause:3.1</span><br><span class=\"line\">etcd:3.2.24</span><br><span class=\"line\">coredns:1.2.6</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">        docker pull registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">        docker tag registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span> k8s.gcr.io/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">        docker rmi registry.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></li>\n<li>安装master(使用flannel网络,需指定pod-network-cidr)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li>\n<li>应用flannel插件(非MASTER NODE上需要flannel镜像,具体的镜像名,可在下面的yml文件中找到.例如: query.io/coreos/flannel:v0.11.0-amd64)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Yarn Reinstall Package","date":"2020-06-08T13:50:17.000Z","_content":"**问题: 使用yarn upgrade-interactive 升级工程后, 某个软件包出错,需要重装**\n查询网络后 ,使用以下指令解决:\n```bash\nrm yarn.lock\nyarn add package-name --force\n```\n或\n```bash\nrm yarn.lock\nyarn install --check-files\n```\n","source":"_posts/2020-06-08-yarn-reinstall-package.md","raw":"---\ntitle: Yarn Reinstall Package\ndate: 2020-06-08 21:50:17\ntags:\n- program\ncategories: \n- computer\n- linux\n---\n**问题: 使用yarn upgrade-interactive 升级工程后, 某个软件包出错,需要重装**\n查询网络后 ,使用以下指令解决:\n```bash\nrm yarn.lock\nyarn add package-name --force\n```\n或\n```bash\nrm yarn.lock\nyarn install --check-files\n```\n","slug":"yarn-reinstall-package","published":1,"updated":"2022-03-16T12:20:32.264Z","_id":"ckb6kjx2p003epspw9cxx6amn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>问题: 使用yarn upgrade-interactive 升级工程后, 某个软件包出错,需要重装</strong><br>查询网络后 ,使用以下指令解决:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> yarn.lock</span><br><span class=\"line\">yarn add package-name --force</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> yarn.lock</span><br><span class=\"line\">yarn install --check-files</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>问题: 使用yarn upgrade-interactive 升级工程后, 某个软件包出错,需要重装</strong><br>查询网络后 ,使用以下指令解决:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> yarn.lock</span><br><span class=\"line\">yarn add package-name --force</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> yarn.lock</span><br><span class=\"line\">yarn install --check-files</span><br></pre></td></tr></table></figure>\n"},{"title":"PowerShell Remoting && Job","date":"2019-11-09T03:43:19.000Z","_content":"#### 远程\nWinRM 打开: Enable-PSRemoting -force\n```powershell\n##交互\nEnter-PSSession -ComputerName XXXName -Credential domainxxx\\userxx\n##运行远程命令\nInvoke-Command -ComputerName SErver01, SErver02 -ScriptBlock {...}\nInvoke-Command -ComputerName SErver01, SErver02 -FielPath c:\\Scripts\\...\n##建立连接\n$s = New-PSSession -ComputerName SErver01, SErver02\nInvoke-Command -Session $s ...\n```\n#### 远程编辑\n+ 使用vs code 中的powershell插件 ,进入其集成的PS环境,远程后调用psedit.\n\n#### JOB\n```powershell\nStart-Job -ScriptBlock {...}\n$job = Get-Job -Id 1\n##查询结果\nReceive-Job -Job $job\n##删除\nRemove-Job -Job $job\n##查找失败原因\n$job.ChildJobs[0].JobStateInfo.Reason\n##远程 \nInvoke-Command -ComputerName SErver01  -ScriptBlock {...} -asjob\nInvoke-Command -Session $s -ScriptBlock { start-job -ScriptBlock { ... }}\n```\n\n","source":"_posts/2019-11-09-PowerShell-Remoting.md","raw":"---\ntitle: PowerShell Remoting && Job\ndate: 2019-11-09 11:43:19\ntags:\n- shell\ncategories: \n- computer\n- windows\n---\n#### 远程\nWinRM 打开: Enable-PSRemoting -force\n```powershell\n##交互\nEnter-PSSession -ComputerName XXXName -Credential domainxxx\\userxx\n##运行远程命令\nInvoke-Command -ComputerName SErver01, SErver02 -ScriptBlock {...}\nInvoke-Command -ComputerName SErver01, SErver02 -FielPath c:\\Scripts\\...\n##建立连接\n$s = New-PSSession -ComputerName SErver01, SErver02\nInvoke-Command -Session $s ...\n```\n#### 远程编辑\n+ 使用vs code 中的powershell插件 ,进入其集成的PS环境,远程后调用psedit.\n\n#### JOB\n```powershell\nStart-Job -ScriptBlock {...}\n$job = Get-Job -Id 1\n##查询结果\nReceive-Job -Job $job\n##删除\nRemove-Job -Job $job\n##查找失败原因\n$job.ChildJobs[0].JobStateInfo.Reason\n##远程 \nInvoke-Command -ComputerName SErver01  -ScriptBlock {...} -asjob\nInvoke-Command -Session $s -ScriptBlock { start-job -ScriptBlock { ... }}\n```\n\n","slug":"PowerShell-Remoting","published":1,"updated":"2019-11-09T12:21:09.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2r003ipspwhkp620sq","content":"<h4 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a>远程</h4><p>WinRM 打开: Enable-PSRemoting -force</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##交互</span></span><br><span class=\"line\"><span class=\"built_in\">Enter-PSSession</span> <span class=\"literal\">-ComputerName</span> XXXName <span class=\"literal\">-Credential</span> domainxxx\\userxx</span><br><span class=\"line\"><span class=\"comment\">##运行远程命令</span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02 <span class=\"literal\">-ScriptBlock</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02 <span class=\"literal\">-FielPath</span> c:\\Scripts\\...</span><br><span class=\"line\"><span class=\"comment\">##建立连接</span></span><br><span class=\"line\"><span class=\"variable\">$s</span> = <span class=\"built_in\">New-PSSession</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02</span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-Session</span> <span class=\"variable\">$s</span> ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程编辑\"><a href=\"#远程编辑\" class=\"headerlink\" title=\"远程编辑\"></a>远程编辑</h4><ul>\n<li>使用vs code 中的powershell插件 ,进入其集成的PS环境,远程后调用psedit.</li>\n</ul>\n<h4 id=\"JOB\"><a href=\"#JOB\" class=\"headerlink\" title=\"JOB\"></a>JOB</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Start-Job</span> <span class=\"literal\">-ScriptBlock</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"variable\">$job</span> = <span class=\"built_in\">Get-Job</span> <span class=\"literal\">-Id</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">##查询结果</span></span><br><span class=\"line\"><span class=\"built_in\">Receive-Job</span> <span class=\"literal\">-Job</span> <span class=\"variable\">$job</span></span><br><span class=\"line\"><span class=\"comment\">##删除</span></span><br><span class=\"line\"><span class=\"built_in\">Remove-Job</span> <span class=\"literal\">-Job</span> <span class=\"variable\">$job</span></span><br><span class=\"line\"><span class=\"comment\">##查找失败原因</span></span><br><span class=\"line\"><span class=\"variable\">$job</span>.ChildJobs[<span class=\"number\">0</span>].JobStateInfo.Reason</span><br><span class=\"line\"><span class=\"comment\">##远程 </span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01  <span class=\"literal\">-ScriptBlock</span> &#123;...&#125; <span class=\"literal\">-asjob</span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-Session</span> <span class=\"variable\">$s</span> <span class=\"literal\">-ScriptBlock</span> &#123; <span class=\"built_in\">start-job</span> <span class=\"literal\">-ScriptBlock</span> &#123; ... &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a>远程</h4><p>WinRM 打开: Enable-PSRemoting -force</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##交互</span></span><br><span class=\"line\"><span class=\"built_in\">Enter-PSSession</span> <span class=\"literal\">-ComputerName</span> XXXName <span class=\"literal\">-Credential</span> domainxxx\\userxx</span><br><span class=\"line\"><span class=\"comment\">##运行远程命令</span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02 <span class=\"literal\">-ScriptBlock</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02 <span class=\"literal\">-FielPath</span> c:\\Scripts\\...</span><br><span class=\"line\"><span class=\"comment\">##建立连接</span></span><br><span class=\"line\"><span class=\"variable\">$s</span> = <span class=\"built_in\">New-PSSession</span> <span class=\"literal\">-ComputerName</span> SErver01, SErver02</span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-Session</span> <span class=\"variable\">$s</span> ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"远程编辑\"><a href=\"#远程编辑\" class=\"headerlink\" title=\"远程编辑\"></a>远程编辑</h4><ul>\n<li>使用vs code 中的powershell插件 ,进入其集成的PS环境,远程后调用psedit.</li>\n</ul>\n<h4 id=\"JOB\"><a href=\"#JOB\" class=\"headerlink\" title=\"JOB\"></a>JOB</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Start-Job</span> <span class=\"literal\">-ScriptBlock</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"variable\">$job</span> = <span class=\"built_in\">Get-Job</span> <span class=\"literal\">-Id</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">##查询结果</span></span><br><span class=\"line\"><span class=\"built_in\">Receive-Job</span> <span class=\"literal\">-Job</span> <span class=\"variable\">$job</span></span><br><span class=\"line\"><span class=\"comment\">##删除</span></span><br><span class=\"line\"><span class=\"built_in\">Remove-Job</span> <span class=\"literal\">-Job</span> <span class=\"variable\">$job</span></span><br><span class=\"line\"><span class=\"comment\">##查找失败原因</span></span><br><span class=\"line\"><span class=\"variable\">$job</span>.ChildJobs[<span class=\"number\">0</span>].JobStateInfo.Reason</span><br><span class=\"line\"><span class=\"comment\">##远程 </span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ComputerName</span> SErver01  <span class=\"literal\">-ScriptBlock</span> &#123;...&#125; <span class=\"literal\">-asjob</span></span><br><span class=\"line\"><span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-Session</span> <span class=\"variable\">$s</span> <span class=\"literal\">-ScriptBlock</span> &#123; <span class=\"built_in\">start-job</span> <span class=\"literal\">-ScriptBlock</span> &#123; ... &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"NFS 权限","date":"2019-11-20T14:02:19.000Z","_content":"[转载](https://blog.csdn.net/donghaixiaolongwang/article/details/79230220)\n\n#### 默认规则\n  默认的权限规则是，root用户被映射成nfsnobody用户，对于客户端机器上和NFS服务器上UID相同的用户会对应映射，其它非root用户被映射成nobody用户。当root用户访问共享目录时是以nfsnobody用户访问共享目录的，具有什么权限看下共享目录权限便知。客户端机器上和NFS服务器上的相同UID用户，以NFS服务器上的用户访问共享目录，看戏目录权限便知。其它非root用户则映射成nobody用户，有啥权限一看便知。\n\n#### 选项\n+ ro：默认选项，以只读的方式共享。\n+ rw：以读写的方式共享。\n+ no_root_squash：将客户端使用的是root用户时，则映射到FNS服务器的用户依然为root用户。\n+ all_squash：默认选项，将所有访问NFS服务器的客户端的用户都映射为匿名用户，不管客户端使用的是什么用户。\n+ anonuid：设置映射到本地的匿名用户的UID\n+ anongid：设置映射到本地的匿名用户的GID\n+ sync：默认选项，保持数据同步，数据同步写入到内存和硬盘。\n+ async：异步，先将数据写入到内存，在将数据写入到硬盘。\n+ secure：NFS客户端必须使用NFS保留端口（通常是1024以下的端口），默认选项。\n+ insecure：允许NFS客户端不使用NFS保留端口（通常是1024以上的端口）。\n\n#### EXAMPLE\n配置文件: /etc/exports\n/mount/www 192.168.x.x/24(rw,all_squash,anonuid=500,anongid=500)\n","source":"_posts/2019-11-20-NFS-权限.md","raw":"---\ntitle: NFS 权限\ndate: 2019-11-20 22:02:19\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n[转载](https://blog.csdn.net/donghaixiaolongwang/article/details/79230220)\n\n#### 默认规则\n  默认的权限规则是，root用户被映射成nfsnobody用户，对于客户端机器上和NFS服务器上UID相同的用户会对应映射，其它非root用户被映射成nobody用户。当root用户访问共享目录时是以nfsnobody用户访问共享目录的，具有什么权限看下共享目录权限便知。客户端机器上和NFS服务器上的相同UID用户，以NFS服务器上的用户访问共享目录，看戏目录权限便知。其它非root用户则映射成nobody用户，有啥权限一看便知。\n\n#### 选项\n+ ro：默认选项，以只读的方式共享。\n+ rw：以读写的方式共享。\n+ no_root_squash：将客户端使用的是root用户时，则映射到FNS服务器的用户依然为root用户。\n+ all_squash：默认选项，将所有访问NFS服务器的客户端的用户都映射为匿名用户，不管客户端使用的是什么用户。\n+ anonuid：设置映射到本地的匿名用户的UID\n+ anongid：设置映射到本地的匿名用户的GID\n+ sync：默认选项，保持数据同步，数据同步写入到内存和硬盘。\n+ async：异步，先将数据写入到内存，在将数据写入到硬盘。\n+ secure：NFS客户端必须使用NFS保留端口（通常是1024以下的端口），默认选项。\n+ insecure：允许NFS客户端不使用NFS保留端口（通常是1024以上的端口）。\n\n#### EXAMPLE\n配置文件: /etc/exports\n/mount/www 192.168.x.x/24(rw,all_squash,anonuid=500,anongid=500)\n","slug":"NFS-权限","published":1,"updated":"2019-11-20T14:10:47.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2s003lpspw1bw8bt16","content":"<p><a href=\"https://blog.csdn.net/donghaixiaolongwang/article/details/79230220\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<h4 id=\"默认规则\"><a href=\"#默认规则\" class=\"headerlink\" title=\"默认规则\"></a>默认规则</h4><p>  默认的权限规则是，root用户被映射成nfsnobody用户，对于客户端机器上和NFS服务器上UID相同的用户会对应映射，其它非root用户被映射成nobody用户。当root用户访问共享目录时是以nfsnobody用户访问共享目录的，具有什么权限看下共享目录权限便知。客户端机器上和NFS服务器上的相同UID用户，以NFS服务器上的用户访问共享目录，看戏目录权限便知。其它非root用户则映射成nobody用户，有啥权限一看便知。</p>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><ul>\n<li>ro：默认选项，以只读的方式共享。</li>\n<li>rw：以读写的方式共享。</li>\n<li>no_root_squash：将客户端使用的是root用户时，则映射到FNS服务器的用户依然为root用户。</li>\n<li>all_squash：默认选项，将所有访问NFS服务器的客户端的用户都映射为匿名用户，不管客户端使用的是什么用户。</li>\n<li>anonuid：设置映射到本地的匿名用户的UID</li>\n<li>anongid：设置映射到本地的匿名用户的GID</li>\n<li>sync：默认选项，保持数据同步，数据同步写入到内存和硬盘。</li>\n<li>async：异步，先将数据写入到内存，在将数据写入到硬盘。</li>\n<li>secure：NFS客户端必须使用NFS保留端口（通常是1024以下的端口），默认选项。</li>\n<li>insecure：允许NFS客户端不使用NFS保留端口（通常是1024以上的端口）。</li>\n</ul>\n<h4 id=\"EXAMPLE\"><a href=\"#EXAMPLE\" class=\"headerlink\" title=\"EXAMPLE\"></a>EXAMPLE</h4><p>配置文件: /etc/exports<br>/mount/www 192.168.x.x/24(rw,all_squash,anonuid=500,anongid=500)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/donghaixiaolongwang/article/details/79230220\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n<h4 id=\"默认规则\"><a href=\"#默认规则\" class=\"headerlink\" title=\"默认规则\"></a>默认规则</h4><p>  默认的权限规则是，root用户被映射成nfsnobody用户，对于客户端机器上和NFS服务器上UID相同的用户会对应映射，其它非root用户被映射成nobody用户。当root用户访问共享目录时是以nfsnobody用户访问共享目录的，具有什么权限看下共享目录权限便知。客户端机器上和NFS服务器上的相同UID用户，以NFS服务器上的用户访问共享目录，看戏目录权限便知。其它非root用户则映射成nobody用户，有啥权限一看便知。</p>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><ul>\n<li>ro：默认选项，以只读的方式共享。</li>\n<li>rw：以读写的方式共享。</li>\n<li>no_root_squash：将客户端使用的是root用户时，则映射到FNS服务器的用户依然为root用户。</li>\n<li>all_squash：默认选项，将所有访问NFS服务器的客户端的用户都映射为匿名用户，不管客户端使用的是什么用户。</li>\n<li>anonuid：设置映射到本地的匿名用户的UID</li>\n<li>anongid：设置映射到本地的匿名用户的GID</li>\n<li>sync：默认选项，保持数据同步，数据同步写入到内存和硬盘。</li>\n<li>async：异步，先将数据写入到内存，在将数据写入到硬盘。</li>\n<li>secure：NFS客户端必须使用NFS保留端口（通常是1024以下的端口），默认选项。</li>\n<li>insecure：允许NFS客户端不使用NFS保留端口（通常是1024以上的端口）。</li>\n</ul>\n<h4 id=\"EXAMPLE\"><a href=\"#EXAMPLE\" class=\"headerlink\" title=\"EXAMPLE\"></a>EXAMPLE</h4><p>配置文件: /etc/exports<br>/mount/www 192.168.x.x/24(rw,all_squash,anonuid=500,anongid=500)</p>\n"},{"title":"Docker 按名称批量删除image","date":"2019-11-25T11:56:25.000Z","_content":"#### go 模板\n```bash\ndocker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'imagename')\n```\n","source":"_posts/2019-11-25-Docker-按名称批量删除image.md","raw":"---\ntitle: Docker 按名称批量删除image\ndate: 2019-11-25 19:56:25\ntags:\n- shell\n- docker\ncategories: \n- computer\n- linux\n---\n#### go 模板\n```bash\ndocker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'imagename')\n```\n","slug":"Docker-按名称批量删除image","published":1,"updated":"2019-11-25T12:01:22.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2t003opspw5ytn19f7","content":"<h4 id=\"go-模板\"><a href=\"#go-模板\" class=\"headerlink\" title=\"go 模板\"></a>go 模板</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images --format <span class=\"string\">'&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;'</span> | grep <span class=\"string\">'imagename'</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"go-模板\"><a href=\"#go-模板\" class=\"headerlink\" title=\"go 模板\"></a>go 模板</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images --format <span class=\"string\">'&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;'</span> | grep <span class=\"string\">'imagename'</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-09-12T13:00:50.919Z","updated":"2019-09-12T13:00:50.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx2v003rpspw5hgf2ajv","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"NFS Mount","date":"2019-11-21T12:26:21.000Z","_content":"[原文](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-18-04)\n\n```bash\n# On the Host\nsudo apt install nfs-kernel-server\nsudo mkdir /var/nfs/general -p\nsudo chown nobody:nogroup /var/nfs/general\nsudo vim /etc/exports\n\n# exports on the host\n# /var/nfs/general x.x.x.x(rw,sync,no_subtree_check)\nsudo systemctl restart nfs-kernel-server  \n\n# On the Client\nsudo apt install nfs-common\n\nsudo mkdir -p /nfs/general\nsudo mount x.x.x.x:/var/nfs/general /nfs/general\n\n# At Boot\nsudo vim /etc/fstab\n# /etc/fstab\n# x.x.x.x:/var/nfs/general  /nfs/general nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0\n\n# Unmounting \nsudo umount /nfs/home\n\n```\n\n","source":"_posts/2019-11-21-NFS-Mount.md","raw":"---\ntitle: NFS Mount\ndate: 2019-11-21 20:26:21\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n[原文](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-18-04)\n\n```bash\n# On the Host\nsudo apt install nfs-kernel-server\nsudo mkdir /var/nfs/general -p\nsudo chown nobody:nogroup /var/nfs/general\nsudo vim /etc/exports\n\n# exports on the host\n# /var/nfs/general x.x.x.x(rw,sync,no_subtree_check)\nsudo systemctl restart nfs-kernel-server  \n\n# On the Client\nsudo apt install nfs-common\n\nsudo mkdir -p /nfs/general\nsudo mount x.x.x.x:/var/nfs/general /nfs/general\n\n# At Boot\nsudo vim /etc/fstab\n# /etc/fstab\n# x.x.x.x:/var/nfs/general  /nfs/general nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0\n\n# Unmounting \nsudo umount /nfs/home\n\n```\n\n","slug":"NFS-Mount","published":1,"updated":"2019-11-21T12:36:38.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx3m005gpspw4k40h9y9","content":"<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On the Host</span></span><br><span class=\"line\">sudo apt install nfs-kernel-server</span><br><span class=\"line\">sudo mkdir /var/nfs/general -p</span><br><span class=\"line\">sudo chown nobody:nogroup /var/nfs/general</span><br><span class=\"line\">sudo vim /etc/exports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exports on the host</span></span><br><span class=\"line\"><span class=\"comment\"># /var/nfs/general x.x.x.x(rw,sync,no_subtree_check)</span></span><br><span class=\"line\">sudo systemctl restart nfs-kernel-server  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># On the Client</span></span><br><span class=\"line\">sudo apt install nfs-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mkdir -p /nfs/general</span><br><span class=\"line\">sudo mount x.x.x.x:/var/nfs/general /nfs/general</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># At Boot</span></span><br><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># x.x.x.x:/var/nfs/general  /nfs/general nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Unmounting </span></span><br><span class=\"line\">sudo umount /nfs/home</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On the Host</span></span><br><span class=\"line\">sudo apt install nfs-kernel-server</span><br><span class=\"line\">sudo mkdir /var/nfs/general -p</span><br><span class=\"line\">sudo chown nobody:nogroup /var/nfs/general</span><br><span class=\"line\">sudo vim /etc/exports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exports on the host</span></span><br><span class=\"line\"><span class=\"comment\"># /var/nfs/general x.x.x.x(rw,sync,no_subtree_check)</span></span><br><span class=\"line\">sudo systemctl restart nfs-kernel-server  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># On the Client</span></span><br><span class=\"line\">sudo apt install nfs-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo mkdir -p /nfs/general</span><br><span class=\"line\">sudo mount x.x.x.x:/var/nfs/general /nfs/general</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># At Boot</span></span><br><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># x.x.x.x:/var/nfs/general  /nfs/general nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Unmounting </span></span><br><span class=\"line\">sudo umount /nfs/home</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Set TimeZone","date":"2019-11-21T12:46:43.000Z","_content":"#### timedatectl\n```bash\ntimedatectl list-timezones\ntimedatectl set-timezone Region/Location\n```\n","source":"_posts/2019-11-21-Set-TimeZone.md","raw":"---\ntitle: Set TimeZone\ndate: 2019-11-21 20:46:43\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n#### timedatectl\n```bash\ntimedatectl list-timezones\ntimedatectl set-timezone Region/Location\n```\n","slug":"Set-TimeZone","published":1,"updated":"2019-11-21T12:49:08.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckb6kjx3o005hpspwbe456bdz","content":"<h4 id=\"timedatectl\"><a href=\"#timedatectl\" class=\"headerlink\" title=\"timedatectl\"></a>timedatectl</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl list-timezones</span><br><span class=\"line\">timedatectl <span class=\"built_in\">set</span>-timezone Region/Location</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"timedatectl\"><a href=\"#timedatectl\" class=\"headerlink\" title=\"timedatectl\"></a>timedatectl</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl list-timezones</span><br><span class=\"line\">timedatectl <span class=\"built_in\">set</span>-timezone Region/Location</span><br></pre></td></tr></table></figure>\n"},{"title":"组策略启动脚本","date":"2021-08-08T12:57:43.000Z","_content":"### 组策略启动脚本不执行\n\n## 问题\n\n* 组策略启动脚本(Computer Policy -> Windows -> start script),不执行(10次中有一次可以). \n* 检查状态(gpupdate ,gpresult),策略已应用至本机, 本地执行脚本无问题.也排除权限问题(system账号,computer$域内机器账号)\n* 反复启动,检查开机日志发现1130错误(脚本无法启动,找不到对应文件), 发现其他错误NetLogon 无法找到域控(用户登录后域控正常) ,因脚本文件放在文件服务器上, 大致判定启动脚本运行时,计算机未完成网络连接.\n* 组策略已设置了网络就绪后应用脚本.最终在微软网站上查到的原因是 机器的千兆网卡(驱动问题)开机/重启连接网络时有延迟,但NetLogon会认为网卡已连接,投入运行, 造成错误.\n\n## 解决方法\n\n因为是公司域 ,使用组策略(Computer Policy -> Adm -> System -> Group Policy) , 设置启动策略处理等待时间(startup policy processing wait time ).\n","source":"_posts/2021-08-08-组策略启动脚本.md","raw":"---\ntitle: 组策略启动脚本\ndate: 2021-08-08 20:57:43\ntags:\n- network\ncategories: \n- computer\n- windows\n---\n### 组策略启动脚本不执行\n\n## 问题\n\n* 组策略启动脚本(Computer Policy -> Windows -> start script),不执行(10次中有一次可以). \n* 检查状态(gpupdate ,gpresult),策略已应用至本机, 本地执行脚本无问题.也排除权限问题(system账号,computer$域内机器账号)\n* 反复启动,检查开机日志发现1130错误(脚本无法启动,找不到对应文件), 发现其他错误NetLogon 无法找到域控(用户登录后域控正常) ,因脚本文件放在文件服务器上, 大致判定启动脚本运行时,计算机未完成网络连接.\n* 组策略已设置了网络就绪后应用脚本.最终在微软网站上查到的原因是 机器的千兆网卡(驱动问题)开机/重启连接网络时有延迟,但NetLogon会认为网卡已连接,投入运行, 造成错误.\n\n## 解决方法\n\n因为是公司域 ,使用组策略(Computer Policy -> Adm -> System -> Group Policy) , 设置启动策略处理等待时间(startup policy processing wait time ).\n","slug":"组策略启动脚本","published":1,"updated":"2021-08-28T03:32:44.497Z","_id":"cks61rjb80000t9pwds973don","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"组策略启动脚本不执行\"><a href=\"#组策略启动脚本不执行\" class=\"headerlink\" title=\"组策略启动脚本不执行\"></a>组策略启动脚本不执行</h3><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>组策略启动脚本(Computer Policy -&gt; Windows -&gt; start script),不执行(10次中有一次可以). </li>\n<li>检查状态(gpupdate ,gpresult),策略已应用至本机, 本地执行脚本无问题.也排除权限问题(system账号,computer$域内机器账号)</li>\n<li>反复启动,检查开机日志发现1130错误(脚本无法启动,找不到对应文件), 发现其他错误NetLogon 无法找到域控(用户登录后域控正常) ,因脚本文件放在文件服务器上, 大致判定启动脚本运行时,计算机未完成网络连接.</li>\n<li>组策略已设置了网络就绪后应用脚本.最终在微软网站上查到的原因是 机器的千兆网卡(驱动问题)开机/重启连接网络时有延迟,但NetLogon会认为网卡已连接,投入运行, 造成错误.</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>因为是公司域 ,使用组策略(Computer Policy -&gt; Adm -&gt; System -&gt; Group Policy) , 设置启动策略处理等待时间(startup policy processing wait time ).</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"组策略启动脚本不执行\"><a href=\"#组策略启动脚本不执行\" class=\"headerlink\" title=\"组策略启动脚本不执行\"></a>组策略启动脚本不执行</h3><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>组策略启动脚本(Computer Policy -&gt; Windows -&gt; start script),不执行(10次中有一次可以). </li>\n<li>检查状态(gpupdate ,gpresult),策略已应用至本机, 本地执行脚本无问题.也排除权限问题(system账号,computer$域内机器账号)</li>\n<li>反复启动,检查开机日志发现1130错误(脚本无法启动,找不到对应文件), 发现其他错误NetLogon 无法找到域控(用户登录后域控正常) ,因脚本文件放在文件服务器上, 大致判定启动脚本运行时,计算机未完成网络连接.</li>\n<li>组策略已设置了网络就绪后应用脚本.最终在微软网站上查到的原因是 机器的千兆网卡(驱动问题)开机/重启连接网络时有延迟,但NetLogon会认为网卡已连接,投入运行, 造成错误.</li>\n</ul>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>因为是公司域 ,使用组策略(Computer Policy -&gt; Adm -&gt; System -&gt; Group Policy) , 设置启动策略处理等待时间(startup policy processing wait time ).</p>\n"},{"title":"Linux 进程查看","date":"2021-08-28T03:31:10.000Z","_content":"### ps,pidof,pgrep,fuser,lsof\n\n## PS\n\n```bash\nps -aux\n```\n\nx :所有类型进程.\na :所有用户.\nu :格式选项.\n\n```bash\nps -U root\n```\n\nU :指定用户.\n\n##### PIDOF\n\n```bash\npidf nvim\n```\n\n获得正在运行的程序nvim的进程ID.\n\n```bash\nsudo kill -9 $(pidof firefox)\n```\n\n脚本中用法.\n\n```bash\npidof -x script.py\n```\n\n包含脚本名的进程ID.\n\n##### PGREP\n\n```bash\npgrep -l ssh\n```\n\npgrep 相当于 ps -eo pid,cmd | awk '{print $1,$2}' grep KeyWord\n\n## FUSER\n文件或网络端口使用的进程号.\n\n```bash\nfuser --namespace tcp port\nfuser --verbose path/to/file_or_directory\n```\n\n## LSOF\n打开的文件及对应的进程\n\n```bash\nlsof path/to/file\nlsof -i :port\nlsof -u username\nlsof -c process_or_command_name\nlsof -p PID\nlsof -iTCP:port -sTCP:LISTEN\n```\n\n1. 发现打开文件的进程\n1. 发现打开指定端口的进程\n1. 指定用户打开的文件\n1. 指定命令打开的文件\n1. 指定进程打开的文件\n1. 发现Listen指定端口的进程\n","source":"_posts/2021-08-28-LinuxProcessView.md","raw":"---\ntitle: Linux 进程查看\ndate: 2021-08-28 11:31:10\ntags:\n- system\ncategories: \n- computer\n- linux\n---\n### ps,pidof,pgrep,fuser,lsof\n\n## PS\n\n```bash\nps -aux\n```\n\nx :所有类型进程.\na :所有用户.\nu :格式选项.\n\n```bash\nps -U root\n```\n\nU :指定用户.\n\n##### PIDOF\n\n```bash\npidf nvim\n```\n\n获得正在运行的程序nvim的进程ID.\n\n```bash\nsudo kill -9 $(pidof firefox)\n```\n\n脚本中用法.\n\n```bash\npidof -x script.py\n```\n\n包含脚本名的进程ID.\n\n##### PGREP\n\n```bash\npgrep -l ssh\n```\n\npgrep 相当于 ps -eo pid,cmd | awk '{print $1,$2}' grep KeyWord\n\n## FUSER\n文件或网络端口使用的进程号.\n\n```bash\nfuser --namespace tcp port\nfuser --verbose path/to/file_or_directory\n```\n\n## LSOF\n打开的文件及对应的进程\n\n```bash\nlsof path/to/file\nlsof -i :port\nlsof -u username\nlsof -c process_or_command_name\nlsof -p PID\nlsof -iTCP:port -sTCP:LISTEN\n```\n\n1. 发现打开文件的进程\n1. 发现打开指定端口的进程\n1. 指定用户打开的文件\n1. 指定命令打开的文件\n1. 指定进程打开的文件\n1. 发现Listen指定端口的进程\n","slug":"LinuxProcessView","published":1,"updated":"2021-08-28T09:33:43.437Z","_id":"cksvfui170000uypweqv495e4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"ps-pidof-pgrep-fuser-lsof\"><a href=\"#ps-pidof-pgrep-fuser-lsof\" class=\"headerlink\" title=\"ps,pidof,pgrep,fuser,lsof\"></a>ps,pidof,pgrep,fuser,lsof</h3><h2 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux</span><br></pre></td></tr></table></figure>\n\n<p>x :所有类型进程.<br>a :所有用户.<br>u :格式选项.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -U root</span><br></pre></td></tr></table></figure>\n\n<p>U :指定用户.</p>\n<h5 id=\"PIDOF\"><a href=\"#PIDOF\" class=\"headerlink\" title=\"PIDOF\"></a>PIDOF</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidf nvim</span><br></pre></td></tr></table></figure>\n\n<p>获得正在运行的程序nvim的进程ID.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">kill</span> -9 $(pidof firefox)</span><br></pre></td></tr></table></figure>\n\n<p>脚本中用法.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidof -x script.py</span><br></pre></td></tr></table></figure>\n\n<p>包含脚本名的进程ID.</p>\n<h5 id=\"PGREP\"><a href=\"#PGREP\" class=\"headerlink\" title=\"PGREP\"></a>PGREP</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep -l ssh</span><br></pre></td></tr></table></figure>\n\n<p>pgrep 相当于 ps -eo pid,cmd | awk ‘{print $1,$2}’ grep KeyWord</p>\n<h2 id=\"FUSER\"><a href=\"#FUSER\" class=\"headerlink\" title=\"FUSER\"></a>FUSER</h2><p>文件或网络端口使用的进程号.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fuser --namespace tcp port</span><br><span class=\"line\">fuser --verbose path/to/file_or_directory</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LSOF\"><a href=\"#LSOF\" class=\"headerlink\" title=\"LSOF\"></a>LSOF</h2><p>打开的文件及对应的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof path/to/file</span><br><span class=\"line\">lsof -i :port</span><br><span class=\"line\">lsof -u username</span><br><span class=\"line\">lsof -c process_or_command_name</span><br><span class=\"line\">lsof -p PID</span><br><span class=\"line\">lsof -iTCP:port -sTCP:LISTEN</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发现打开文件的进程</li>\n<li>发现打开指定端口的进程</li>\n<li>指定用户打开的文件</li>\n<li>指定命令打开的文件</li>\n<li>指定进程打开的文件</li>\n<li>发现Listen指定端口的进程</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ps-pidof-pgrep-fuser-lsof\"><a href=\"#ps-pidof-pgrep-fuser-lsof\" class=\"headerlink\" title=\"ps,pidof,pgrep,fuser,lsof\"></a>ps,pidof,pgrep,fuser,lsof</h3><h2 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux</span><br></pre></td></tr></table></figure>\n\n<p>x :所有类型进程.<br>a :所有用户.<br>u :格式选项.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -U root</span><br></pre></td></tr></table></figure>\n\n<p>U :指定用户.</p>\n<h5 id=\"PIDOF\"><a href=\"#PIDOF\" class=\"headerlink\" title=\"PIDOF\"></a>PIDOF</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidf nvim</span><br></pre></td></tr></table></figure>\n\n<p>获得正在运行的程序nvim的进程ID.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">kill</span> -9 $(pidof firefox)</span><br></pre></td></tr></table></figure>\n\n<p>脚本中用法.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pidof -x script.py</span><br></pre></td></tr></table></figure>\n\n<p>包含脚本名的进程ID.</p>\n<h5 id=\"PGREP\"><a href=\"#PGREP\" class=\"headerlink\" title=\"PGREP\"></a>PGREP</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pgrep -l ssh</span><br></pre></td></tr></table></figure>\n\n<p>pgrep 相当于 ps -eo pid,cmd | awk ‘{print $1,$2}’ grep KeyWord</p>\n<h2 id=\"FUSER\"><a href=\"#FUSER\" class=\"headerlink\" title=\"FUSER\"></a>FUSER</h2><p>文件或网络端口使用的进程号.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fuser --namespace tcp port</span><br><span class=\"line\">fuser --verbose path/to/file_or_directory</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LSOF\"><a href=\"#LSOF\" class=\"headerlink\" title=\"LSOF\"></a>LSOF</h2><p>打开的文件及对应的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof path/to/file</span><br><span class=\"line\">lsof -i :port</span><br><span class=\"line\">lsof -u username</span><br><span class=\"line\">lsof -c process_or_command_name</span><br><span class=\"line\">lsof -p PID</span><br><span class=\"line\">lsof -iTCP:port -sTCP:LISTEN</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>发现打开文件的进程</li>\n<li>发现打开指定端口的进程</li>\n<li>指定用户打开的文件</li>\n<li>指定命令打开的文件</li>\n<li>指定进程打开的文件</li>\n<li>发现Listen指定端口的进程</li>\n</ol>\n"},{"title":"Linux NETSTAT SS","date":"2021-08-28T12:19:39.000Z","_content":"### netstat ss\n\n#### NETSTAT\n* -l, –listening display listening server sockets\n* -a, –all display all sockets (default: connected)\n* -r, –route display routing table\n* –i, –interfaces display interface table\n* -g, –groups display multicast group memberships\n* -s, –statistics display networking statistics (like SNMP)\n* -M, –masquerade display masqueraded connections\n* -v, –verbose be verbose\n* -W, –wide don’t truncate IP addresses\n* -n, –numeric don’t resolve names\n* -e, –extend display other/more information\n* -p, –programs display PID/Program name for sockets\n* -o, –timers display timers\n* -F, –fib display Forwarding Information Base (default)\n* -C, –cache display routing cache instead of FIB\n\n```bash\nsudo netstat -pln | grep 22 | awk '{print $NF}'\n```\n\n监听22端口的进程\n\n```bash\nnetstat -at\nnetstat -lu\n```\n\n1. 列出所有TCP端口\n1. 列出所有监听的UDP端口\n\n\n#### SS\n* –n, –numeric don’t resolve service names\n* -r, –resolve : resolve host hostnames.\n* -l, –listening display listening sockets\n* -o, –options show timer information\n* -e, –extended show detailed socket information\n* -m, –memory show socket memory usage\n* -p, –processes show process using socket\n* –s, –summary show socket usage summary\n* -N, –net switch to the specified network namespace name\n* -4, –ipv4 display only IP version 4 sockets\n* -6, –ipv6 display only IP version 6 sockets\n* –0, –packet display PACKET sockets\n* -t, –tcp display only TCP sockets\n* -S, –sctp display only SCTP sockets\n* -u, –udp display only UDP sockets\n* -w, –raw display only RAW sockets\n* -x, –unix display only Unix domain sockets\n* -f, –family=FAMILY display sockets of type FAMILY\n\n```bash\nss -tlp\nss -t dst 192.168.1.10:443\nss -t state established '( dport = :ssh or sport = :ssh )'\n```\n\n1. 列出监听的TCP协议并包括对应的进程\n1. 列出连接到192.168.1.10:443的栈\n1. 列出所有ssh相关的连接\n","source":"_posts/2021-08-28-Linux-netstat-ss.md","raw":"---\ntitle: Linux NETSTAT SS\ndate: 2021-08-28 20:19:39\ntags:\n- network\ncategories: \n- computer\n---\n### netstat ss\n\n#### NETSTAT\n* -l, –listening display listening server sockets\n* -a, –all display all sockets (default: connected)\n* -r, –route display routing table\n* –i, –interfaces display interface table\n* -g, –groups display multicast group memberships\n* -s, –statistics display networking statistics (like SNMP)\n* -M, –masquerade display masqueraded connections\n* -v, –verbose be verbose\n* -W, –wide don’t truncate IP addresses\n* -n, –numeric don’t resolve names\n* -e, –extend display other/more information\n* -p, –programs display PID/Program name for sockets\n* -o, –timers display timers\n* -F, –fib display Forwarding Information Base (default)\n* -C, –cache display routing cache instead of FIB\n\n```bash\nsudo netstat -pln | grep 22 | awk '{print $NF}'\n```\n\n监听22端口的进程\n\n```bash\nnetstat -at\nnetstat -lu\n```\n\n1. 列出所有TCP端口\n1. 列出所有监听的UDP端口\n\n\n#### SS\n* –n, –numeric don’t resolve service names\n* -r, –resolve : resolve host hostnames.\n* -l, –listening display listening sockets\n* -o, –options show timer information\n* -e, –extended show detailed socket information\n* -m, –memory show socket memory usage\n* -p, –processes show process using socket\n* –s, –summary show socket usage summary\n* -N, –net switch to the specified network namespace name\n* -4, –ipv4 display only IP version 4 sockets\n* -6, –ipv6 display only IP version 6 sockets\n* –0, –packet display PACKET sockets\n* -t, –tcp display only TCP sockets\n* -S, –sctp display only SCTP sockets\n* -u, –udp display only UDP sockets\n* -w, –raw display only RAW sockets\n* -x, –unix display only Unix domain sockets\n* -f, –family=FAMILY display sockets of type FAMILY\n\n```bash\nss -tlp\nss -t dst 192.168.1.10:443\nss -t state established '( dport = :ssh or sport = :ssh )'\n```\n\n1. 列出监听的TCP协议并包括对应的进程\n1. 列出连接到192.168.1.10:443的栈\n1. 列出所有ssh相关的连接\n","slug":"Linux-netstat-ss","published":1,"updated":"2021-08-28T12:41:22.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvrx3oh0000l7pw1quf1jeg","content":"<h3 id=\"netstat-ss\"><a href=\"#netstat-ss\" class=\"headerlink\" title=\"netstat ss\"></a>netstat ss</h3><h4 id=\"NETSTAT\"><a href=\"#NETSTAT\" class=\"headerlink\" title=\"NETSTAT\"></a>NETSTAT</h4><ul>\n<li>-l, –listening display listening server sockets</li>\n<li>-a, –all display all sockets (default: connected)</li>\n<li>-r, –route display routing table</li>\n<li>–i, –interfaces display interface table</li>\n<li>-g, –groups display multicast group memberships</li>\n<li>-s, –statistics display networking statistics (like SNMP)</li>\n<li>-M, –masquerade display masqueraded connections</li>\n<li>-v, –verbose be verbose</li>\n<li>-W, –wide don’t truncate IP addresses</li>\n<li>-n, –numeric don’t resolve names</li>\n<li>-e, –extend display other/more information</li>\n<li>-p, –programs display PID/Program name for sockets</li>\n<li>-o, –timers display timers</li>\n<li>-F, –fib display Forwarding Information Base (default)</li>\n<li>-C, –cache display routing cache instead of FIB</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -pln | grep 22 | awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>监听22端口的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -at</span><br><span class=\"line\">netstat -lu</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>列出所有TCP端口</li>\n<li>列出所有监听的UDP端口</li>\n</ol>\n<h4 id=\"SS\"><a href=\"#SS\" class=\"headerlink\" title=\"SS\"></a>SS</h4><ul>\n<li>–n, –numeric don’t resolve service names</li>\n<li>-r, –resolve : resolve host hostnames.</li>\n<li>-l, –listening display listening sockets</li>\n<li>-o, –options show timer information</li>\n<li>-e, –extended show detailed socket information</li>\n<li>-m, –memory show socket memory usage</li>\n<li>-p, –processes show process using socket</li>\n<li>–s, –summary show socket usage summary</li>\n<li>-N, –net switch to the specified network namespace name</li>\n<li>-4, –ipv4 display only IP version 4 sockets</li>\n<li>-6, –ipv6 display only IP version 6 sockets</li>\n<li>–0, –packet display PACKET sockets</li>\n<li>-t, –tcp display only TCP sockets</li>\n<li>-S, –sctp display only SCTP sockets</li>\n<li>-u, –udp display only UDP sockets</li>\n<li>-w, –raw display only RAW sockets</li>\n<li>-x, –unix display only Unix domain sockets</li>\n<li>-f, –family=FAMILY display sockets of type FAMILY</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -tlp</span><br><span class=\"line\">ss -t dst 192.168.1.10:443</span><br><span class=\"line\">ss -t state established <span class=\"string\">&#x27;( dport = :ssh or sport = :ssh )&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>列出监听的TCP协议并包括对应的进程</li>\n<li>列出连接到192.168.1.10:443的栈</li>\n<li>列出所有ssh相关的连接</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"netstat-ss\"><a href=\"#netstat-ss\" class=\"headerlink\" title=\"netstat ss\"></a>netstat ss</h3><h4 id=\"NETSTAT\"><a href=\"#NETSTAT\" class=\"headerlink\" title=\"NETSTAT\"></a>NETSTAT</h4><ul>\n<li>-l, –listening display listening server sockets</li>\n<li>-a, –all display all sockets (default: connected)</li>\n<li>-r, –route display routing table</li>\n<li>–i, –interfaces display interface table</li>\n<li>-g, –groups display multicast group memberships</li>\n<li>-s, –statistics display networking statistics (like SNMP)</li>\n<li>-M, –masquerade display masqueraded connections</li>\n<li>-v, –verbose be verbose</li>\n<li>-W, –wide don’t truncate IP addresses</li>\n<li>-n, –numeric don’t resolve names</li>\n<li>-e, –extend display other/more information</li>\n<li>-p, –programs display PID/Program name for sockets</li>\n<li>-o, –timers display timers</li>\n<li>-F, –fib display Forwarding Information Base (default)</li>\n<li>-C, –cache display routing cache instead of FIB</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -pln | grep 22 | awk <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>监听22端口的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -at</span><br><span class=\"line\">netstat -lu</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>列出所有TCP端口</li>\n<li>列出所有监听的UDP端口</li>\n</ol>\n<h4 id=\"SS\"><a href=\"#SS\" class=\"headerlink\" title=\"SS\"></a>SS</h4><ul>\n<li>–n, –numeric don’t resolve service names</li>\n<li>-r, –resolve : resolve host hostnames.</li>\n<li>-l, –listening display listening sockets</li>\n<li>-o, –options show timer information</li>\n<li>-e, –extended show detailed socket information</li>\n<li>-m, –memory show socket memory usage</li>\n<li>-p, –processes show process using socket</li>\n<li>–s, –summary show socket usage summary</li>\n<li>-N, –net switch to the specified network namespace name</li>\n<li>-4, –ipv4 display only IP version 4 sockets</li>\n<li>-6, –ipv6 display only IP version 6 sockets</li>\n<li>–0, –packet display PACKET sockets</li>\n<li>-t, –tcp display only TCP sockets</li>\n<li>-S, –sctp display only SCTP sockets</li>\n<li>-u, –udp display only UDP sockets</li>\n<li>-w, –raw display only RAW sockets</li>\n<li>-x, –unix display only Unix domain sockets</li>\n<li>-f, –family=FAMILY display sockets of type FAMILY</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -tlp</span><br><span class=\"line\">ss -t dst 192.168.1.10:443</span><br><span class=\"line\">ss -t state established <span class=\"string\">&#x27;( dport = :ssh or sport = :ssh )&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>列出监听的TCP协议并包括对应的进程</li>\n<li>列出连接到192.168.1.10:443的栈</li>\n<li>列出所有ssh相关的连接</li>\n</ol>\n"},{"title":"VLAN-PVID-TRUNK","date":"2022-02-23T11:47:38.000Z","_content":"### VLAN 端口转发规则\n\n#### PVID\n* PVID即 Port Vlan id，代表端口的缺省VLAN。默认PVID为1.\n* 交换机从对端设备收到的帧有可能是不带VLAN标签的数据帧，但所有以太网帧在交换机中都是以带VLAN标签的形式来被处理和转发的，因此交换机必须给端口收到的不带VLAN标签的数据帧添加上VLAN标签。\n\n#### ACCESS 端口规则\n##### 发送\n* 数据包Tag与PVID相同,剥离Tag发送.\n* 数据包Tag与PVID不同,丢弃.\n\n##### 接受\n* 数据包无Tag,接受并打上PVID,进行交换转发.\n* 数据包有Tag,丢弃.\n\n#### TRUNK/HYBRID 端口规则\n##### 发送\n* 数据包Tag与PVID相同,剥离Tag发送.\n* 数据包Tag与PVID不同,且在允许Tag列表中,带Tag直接发送(Hybrid 可控制是否携带Tag),默认转发所有Tag.\n\n##### 接受\n* 数据包无Tag,接受并打上PVID,进行交换转发.\n* 数据包有Tag,且在允许Tag列表中,进行交换转发,否则丢弃.\n\n**备注: 上述发送和接受指的是交换机对外的数据流.**\n","source":"_posts/2022-02-23-vlan-pvid-trunk.md","raw":"---\ntitle: VLAN-PVID-TRUNK\ndate: 2022-02-23 19:47:38\ntags:\n- network\ncategories: \n- computer\n- other\n---\n### VLAN 端口转发规则\n\n#### PVID\n* PVID即 Port Vlan id，代表端口的缺省VLAN。默认PVID为1.\n* 交换机从对端设备收到的帧有可能是不带VLAN标签的数据帧，但所有以太网帧在交换机中都是以带VLAN标签的形式来被处理和转发的，因此交换机必须给端口收到的不带VLAN标签的数据帧添加上VLAN标签。\n\n#### ACCESS 端口规则\n##### 发送\n* 数据包Tag与PVID相同,剥离Tag发送.\n* 数据包Tag与PVID不同,丢弃.\n\n##### 接受\n* 数据包无Tag,接受并打上PVID,进行交换转发.\n* 数据包有Tag,丢弃.\n\n#### TRUNK/HYBRID 端口规则\n##### 发送\n* 数据包Tag与PVID相同,剥离Tag发送.\n* 数据包Tag与PVID不同,且在允许Tag列表中,带Tag直接发送(Hybrid 可控制是否携带Tag),默认转发所有Tag.\n\n##### 接受\n* 数据包无Tag,接受并打上PVID,进行交换转发.\n* 数据包有Tag,且在允许Tag列表中,进行交换转发,否则丢弃.\n\n**备注: 上述发送和接受指的是交换机对外的数据流.**\n","slug":"vlan-pvid-trunk","published":1,"updated":"2022-02-24T11:51:40.969Z","_id":"ckzzj6zab000091pw2jya4s38","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"VLAN-端口转发规则\"><a href=\"#VLAN-端口转发规则\" class=\"headerlink\" title=\"VLAN 端口转发规则\"></a>VLAN 端口转发规则</h3><h4 id=\"PVID\"><a href=\"#PVID\" class=\"headerlink\" title=\"PVID\"></a>PVID</h4><ul>\n<li>PVID即 Port Vlan id，代表端口的缺省VLAN。默认PVID为1.</li>\n<li>交换机从对端设备收到的帧有可能是不带VLAN标签的数据帧，但所有以太网帧在交换机中都是以带VLAN标签的形式来被处理和转发的，因此交换机必须给端口收到的不带VLAN标签的数据帧添加上VLAN标签。</li>\n</ul>\n<h4 id=\"ACCESS-端口规则\"><a href=\"#ACCESS-端口规则\" class=\"headerlink\" title=\"ACCESS 端口规则\"></a>ACCESS 端口规则</h4><h5 id=\"发送\"><a href=\"#发送\" class=\"headerlink\" title=\"发送\"></a>发送</h5><ul>\n<li>数据包Tag与PVID相同,剥离Tag发送.</li>\n<li>数据包Tag与PVID不同,丢弃.</li>\n</ul>\n<h5 id=\"接受\"><a href=\"#接受\" class=\"headerlink\" title=\"接受\"></a>接受</h5><ul>\n<li>数据包无Tag,接受并打上PVID,进行交换转发.</li>\n<li>数据包有Tag,丢弃.</li>\n</ul>\n<h4 id=\"TRUNK-HYBRID-端口规则\"><a href=\"#TRUNK-HYBRID-端口规则\" class=\"headerlink\" title=\"TRUNK/HYBRID 端口规则\"></a>TRUNK/HYBRID 端口规则</h4><h5 id=\"发送-1\"><a href=\"#发送-1\" class=\"headerlink\" title=\"发送\"></a>发送</h5><ul>\n<li>数据包Tag与PVID相同,剥离Tag发送.</li>\n<li>数据包Tag与PVID不同,且在允许Tag列表中,带Tag直接发送(Hybrid 可控制是否携带Tag),默认转发所有Tag.</li>\n</ul>\n<h5 id=\"接受-1\"><a href=\"#接受-1\" class=\"headerlink\" title=\"接受\"></a>接受</h5><ul>\n<li>数据包无Tag,接受并打上PVID,进行交换转发.</li>\n<li>数据包有Tag,且在允许Tag列表中,进行交换转发,否则丢弃.</li>\n</ul>\n<p><strong>备注: 上述发送和接受指的是交换机对外的数据流.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"VLAN-端口转发规则\"><a href=\"#VLAN-端口转发规则\" class=\"headerlink\" title=\"VLAN 端口转发规则\"></a>VLAN 端口转发规则</h3><h4 id=\"PVID\"><a href=\"#PVID\" class=\"headerlink\" title=\"PVID\"></a>PVID</h4><ul>\n<li>PVID即 Port Vlan id，代表端口的缺省VLAN。默认PVID为1.</li>\n<li>交换机从对端设备收到的帧有可能是不带VLAN标签的数据帧，但所有以太网帧在交换机中都是以带VLAN标签的形式来被处理和转发的，因此交换机必须给端口收到的不带VLAN标签的数据帧添加上VLAN标签。</li>\n</ul>\n<h4 id=\"ACCESS-端口规则\"><a href=\"#ACCESS-端口规则\" class=\"headerlink\" title=\"ACCESS 端口规则\"></a>ACCESS 端口规则</h4><h5 id=\"发送\"><a href=\"#发送\" class=\"headerlink\" title=\"发送\"></a>发送</h5><ul>\n<li>数据包Tag与PVID相同,剥离Tag发送.</li>\n<li>数据包Tag与PVID不同,丢弃.</li>\n</ul>\n<h5 id=\"接受\"><a href=\"#接受\" class=\"headerlink\" title=\"接受\"></a>接受</h5><ul>\n<li>数据包无Tag,接受并打上PVID,进行交换转发.</li>\n<li>数据包有Tag,丢弃.</li>\n</ul>\n<h4 id=\"TRUNK-HYBRID-端口规则\"><a href=\"#TRUNK-HYBRID-端口规则\" class=\"headerlink\" title=\"TRUNK/HYBRID 端口规则\"></a>TRUNK/HYBRID 端口规则</h4><h5 id=\"发送-1\"><a href=\"#发送-1\" class=\"headerlink\" title=\"发送\"></a>发送</h5><ul>\n<li>数据包Tag与PVID相同,剥离Tag发送.</li>\n<li>数据包Tag与PVID不同,且在允许Tag列表中,带Tag直接发送(Hybrid 可控制是否携带Tag),默认转发所有Tag.</li>\n</ul>\n<h5 id=\"接受-1\"><a href=\"#接受-1\" class=\"headerlink\" title=\"接受\"></a>接受</h5><ul>\n<li>数据包无Tag,接受并打上PVID,进行交换转发.</li>\n<li>数据包有Tag,且在允许Tag列表中,进行交换转发,否则丢弃.</li>\n</ul>\n<p><strong>备注: 上述发送和接受指的是交换机对外的数据流.</strong></p>\n"},{"title":"IPV6-ADDRESS","date":"2022-02-26T12:19:38.000Z","_content":"### IPV6 地址结构\n* 地址长128位.(Routing Prefix(48) + Subnet ID (16) + Interface ID(64))\n* 主机地址(Interface ID)建议永远保留64位.\n* IPV6不再使用子网掩码的说法,现在叫前缀长度.\n\n### IPV6 地址类型(单播,组播,任播)\n#### 单播\n* 可聚合全球地址(Global Unicast) 2000::/3\n    * 电信(240e::/18),联通(2408:8000::/20),移动(2409:8000::/20)\n* 本地链路(Link-Local) fe80::/10 相当于IPv4的169.254.0.0/16,不可路由.\n* 回环(Loopback) ::1/128\n* 本地唯一(Unique-Local) FC::/7 (FC00::/8暂未定义,当前 FD00::/8已定义),相当于IPv4的私有地址(10.0.0.0/8,172.16.0.0/20,192.168.0.0/24),不可在Internet路由.\n* 未指定地址(Unspecified) ::/128\n\n#### 组播(icmpv6 ndp 核心)\n* 部分特定地址(FFxx::/8)\n  * FF02::1 all nodes 在本地链路范围的所有节点\n  * FF02::2 all routers 在本地链路范围的所有路由器\n  * FF02::5 all ospf routers\n  * FF02::9 all rip routers 所有运行RIP的路由器\n  * FF02::A all eigrp routers 所有运行eigrp的路由器\n  * FF05::2 在一个站点范围内的所有路由器\n  * FF02::1:FFxx:xxxx/104 被请求节点组播地址(solicited-node multicast address)\n    * 只在本地链路上有效,只包含一个用户,可从接口IPV6地址推算出.\n    * 推算方式:被请求节点组播地址的前104位固定，将接口IP地址的后24位移下来填充到后面就可以了.\n    * 组播地址映射MAC组播地址: 33-33-取IPv6组播地址的最后32bit\n\n### ICMPv6\n#### NDP(Neighbor Discovery Protocol 邻居发现协议)\n* 地址解析步骤(获得对方mac ,netsh ipv6 show neighbors)\n  1. 发送ICMPv6的邻居请求信息,目的IP为对方的被请求节点组播地址,目的MAC为对应的组播MAC.源IP/MAC均为本机接口对应地址.注意非广播报文,二层交换机是否广播由交换机能力决定.\n  2. 接受方(本地网卡有对应的组播MAC)回送ICMPV6邻居通告消息,该消息包含本机接口MAC.\n* 邻居状态跟踪(间隔发送邻居请求信息,根据回应做出判断)\n* DAD(Duplicate Address Detection重复地址检测,保证单播地址不存在冲突,所有单播地址都需要通过DAD检测,才能启用),DAD 使用邻居请求和邻居通告来完成其机制.\n* 无状态自动配置(自动配置IPV6地址)\n  1. 自动生成本地链路地址(fe80::/10),并通过DAD\n  2. 发送邻居请求消息尝试在链路上发现IPV6路由器.\n  3. 路由器返回邻居通告消息（携带准备分配给主机的IPv6前缀信息。路由器在没有收到邻居请求消息时也能够主动发出邻居通告消息）\n  4. 主机根据路由器回应的邻居请求消息，获得本链路IPv6地址前缀信息， 由前缀 + 接口ID 生成主机的IPv6单播。通过DAD,启用该地址.\n* 路由器通告\n\n### 二层组播技术(IGMP snooping)\n  **问题:** 二层Switch由于组播报文的目的地址为组播组地址，在二层设备上是学习不到这一类MAC表项的(组播MAC不会出现在源地址上)，因此组播报文就会在Switch所有接口进行广播.\n  **解决方法:** 当主机和上游三层设备之间传递的IGMP协议报文通过二层组播设备时，拥有IGMP Snooping技术的交换机可以分析报文携带的信息，根据这些信息建立和维护二层组播转发表，从而指导组播数据在数据链路层按需转发.\n","source":"_posts/2022-02-26-ipv6-address.md","raw":"---\ntitle: IPV6-ADDRESS\ndate: 2022-02-26 20:19:38\ntags:\n- network\ncategories: \n- computer\n- other\n---\n### IPV6 地址结构\n* 地址长128位.(Routing Prefix(48) + Subnet ID (16) + Interface ID(64))\n* 主机地址(Interface ID)建议永远保留64位.\n* IPV6不再使用子网掩码的说法,现在叫前缀长度.\n\n### IPV6 地址类型(单播,组播,任播)\n#### 单播\n* 可聚合全球地址(Global Unicast) 2000::/3\n    * 电信(240e::/18),联通(2408:8000::/20),移动(2409:8000::/20)\n* 本地链路(Link-Local) fe80::/10 相当于IPv4的169.254.0.0/16,不可路由.\n* 回环(Loopback) ::1/128\n* 本地唯一(Unique-Local) FC::/7 (FC00::/8暂未定义,当前 FD00::/8已定义),相当于IPv4的私有地址(10.0.0.0/8,172.16.0.0/20,192.168.0.0/24),不可在Internet路由.\n* 未指定地址(Unspecified) ::/128\n\n#### 组播(icmpv6 ndp 核心)\n* 部分特定地址(FFxx::/8)\n  * FF02::1 all nodes 在本地链路范围的所有节点\n  * FF02::2 all routers 在本地链路范围的所有路由器\n  * FF02::5 all ospf routers\n  * FF02::9 all rip routers 所有运行RIP的路由器\n  * FF02::A all eigrp routers 所有运行eigrp的路由器\n  * FF05::2 在一个站点范围内的所有路由器\n  * FF02::1:FFxx:xxxx/104 被请求节点组播地址(solicited-node multicast address)\n    * 只在本地链路上有效,只包含一个用户,可从接口IPV6地址推算出.\n    * 推算方式:被请求节点组播地址的前104位固定，将接口IP地址的后24位移下来填充到后面就可以了.\n    * 组播地址映射MAC组播地址: 33-33-取IPv6组播地址的最后32bit\n\n### ICMPv6\n#### NDP(Neighbor Discovery Protocol 邻居发现协议)\n* 地址解析步骤(获得对方mac ,netsh ipv6 show neighbors)\n  1. 发送ICMPv6的邻居请求信息,目的IP为对方的被请求节点组播地址,目的MAC为对应的组播MAC.源IP/MAC均为本机接口对应地址.注意非广播报文,二层交换机是否广播由交换机能力决定.\n  2. 接受方(本地网卡有对应的组播MAC)回送ICMPV6邻居通告消息,该消息包含本机接口MAC.\n* 邻居状态跟踪(间隔发送邻居请求信息,根据回应做出判断)\n* DAD(Duplicate Address Detection重复地址检测,保证单播地址不存在冲突,所有单播地址都需要通过DAD检测,才能启用),DAD 使用邻居请求和邻居通告来完成其机制.\n* 无状态自动配置(自动配置IPV6地址)\n  1. 自动生成本地链路地址(fe80::/10),并通过DAD\n  2. 发送邻居请求消息尝试在链路上发现IPV6路由器.\n  3. 路由器返回邻居通告消息（携带准备分配给主机的IPv6前缀信息。路由器在没有收到邻居请求消息时也能够主动发出邻居通告消息）\n  4. 主机根据路由器回应的邻居请求消息，获得本链路IPv6地址前缀信息， 由前缀 + 接口ID 生成主机的IPv6单播。通过DAD,启用该地址.\n* 路由器通告\n\n### 二层组播技术(IGMP snooping)\n  **问题:** 二层Switch由于组播报文的目的地址为组播组地址，在二层设备上是学习不到这一类MAC表项的(组播MAC不会出现在源地址上)，因此组播报文就会在Switch所有接口进行广播.\n  **解决方法:** 当主机和上游三层设备之间传递的IGMP协议报文通过二层组播设备时，拥有IGMP Snooping技术的交换机可以分析报文携带的信息，根据这些信息建立和维护二层组播转发表，从而指导组播数据在数据链路层按需转发.\n","slug":"ipv6-address","published":1,"updated":"2022-02-28T12:26:03.203Z","_id":"cl04zol9c0000wapw6aed1kz5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"IPV6-地址结构\"><a href=\"#IPV6-地址结构\" class=\"headerlink\" title=\"IPV6 地址结构\"></a>IPV6 地址结构</h3><ul>\n<li>地址长128位.(Routing Prefix(48) + Subnet ID (16) + Interface ID(64))</li>\n<li>主机地址(Interface ID)建议永远保留64位.</li>\n<li>IPV6不再使用子网掩码的说法,现在叫前缀长度.</li>\n</ul>\n<h3 id=\"IPV6-地址类型-单播-组播-任播\"><a href=\"#IPV6-地址类型-单播-组播-任播\" class=\"headerlink\" title=\"IPV6 地址类型(单播,组播,任播)\"></a>IPV6 地址类型(单播,组播,任播)</h3><h4 id=\"单播\"><a href=\"#单播\" class=\"headerlink\" title=\"单播\"></a>单播</h4><ul>\n<li>可聚合全球地址(Global Unicast) 2000::/3<ul>\n<li>电信(240e::/18),联通(2408:8000::/20),移动(2409:8000::/20)</li>\n</ul>\n</li>\n<li>本地链路(Link-Local) fe80::/10 相当于IPv4的169.254.0.0/16,不可路由.</li>\n<li>回环(Loopback) ::1/128</li>\n<li>本地唯一(Unique-Local) FC::/7 (FC00::/8暂未定义,当前 FD00::/8已定义),相当于IPv4的私有地址(10.0.0.0/8,172.16.0.0/20,192.168.0.0/24),不可在Internet路由.</li>\n<li>未指定地址(Unspecified) ::/128</li>\n</ul>\n<h4 id=\"组播-icmpv6-ndp-核心\"><a href=\"#组播-icmpv6-ndp-核心\" class=\"headerlink\" title=\"组播(icmpv6 ndp 核心)\"></a>组播(icmpv6 ndp 核心)</h4><ul>\n<li>部分特定地址(FFxx::/8)<ul>\n<li>FF02::1 all nodes 在本地链路范围的所有节点</li>\n<li>FF02::2 all routers 在本地链路范围的所有路由器</li>\n<li>FF02::5 all ospf routers</li>\n<li>FF02::9 all rip routers 所有运行RIP的路由器</li>\n<li>FF02::A all eigrp routers 所有运行eigrp的路由器</li>\n<li>FF05::2 在一个站点范围内的所有路由器</li>\n<li>FF02::1:FFxx:xxxx/104 被请求节点组播地址(solicited-node multicast address)<ul>\n<li>只在本地链路上有效,只包含一个用户,可从接口IPV6地址推算出.</li>\n<li>推算方式:被请求节点组播地址的前104位固定，将接口IP地址的后24位移下来填充到后面就可以了.</li>\n<li>组播地址映射MAC组播地址: 33-33-取IPv6组播地址的最后32bit</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ICMPv6\"><a href=\"#ICMPv6\" class=\"headerlink\" title=\"ICMPv6\"></a>ICMPv6</h3><h4 id=\"NDP-Neighbor-Discovery-Protocol-邻居发现协议\"><a href=\"#NDP-Neighbor-Discovery-Protocol-邻居发现协议\" class=\"headerlink\" title=\"NDP(Neighbor Discovery Protocol 邻居发现协议)\"></a>NDP(Neighbor Discovery Protocol 邻居发现协议)</h4><ul>\n<li>地址解析步骤(获得对方mac ,netsh ipv6 show neighbors)<ol>\n<li>发送ICMPv6的邻居请求信息,目的IP为对方的被请求节点组播地址,目的MAC为对应的组播MAC.源IP/MAC均为本机接口对应地址.注意非广播报文,二层交换机是否广播由交换机能力决定.</li>\n<li>接受方(本地网卡有对应的组播MAC)回送ICMPV6邻居通告消息,该消息包含本机接口MAC.</li>\n</ol>\n</li>\n<li>邻居状态跟踪(间隔发送邻居请求信息,根据回应做出判断)</li>\n<li>DAD(Duplicate Address Detection重复地址检测,保证单播地址不存在冲突,所有单播地址都需要通过DAD检测,才能启用),DAD 使用邻居请求和邻居通告来完成其机制.</li>\n<li>无状态自动配置(自动配置IPV6地址)<ol>\n<li>自动生成本地链路地址(fe80::/10),并通过DAD</li>\n<li>发送邻居请求消息尝试在链路上发现IPV6路由器.</li>\n<li>路由器返回邻居通告消息（携带准备分配给主机的IPv6前缀信息。路由器在没有收到邻居请求消息时也能够主动发出邻居通告消息）</li>\n<li>主机根据路由器回应的邻居请求消息，获得本链路IPv6地址前缀信息， 由前缀 + 接口ID 生成主机的IPv6单播。通过DAD,启用该地址.</li>\n</ol>\n</li>\n<li>路由器通告</li>\n</ul>\n<h3 id=\"二层组播技术-IGMP-snooping\"><a href=\"#二层组播技术-IGMP-snooping\" class=\"headerlink\" title=\"二层组播技术(IGMP snooping)\"></a>二层组播技术(IGMP snooping)</h3><p>  <strong>问题:</strong> 二层Switch由于组播报文的目的地址为组播组地址，在二层设备上是学习不到这一类MAC表项的(组播MAC不会出现在源地址上)，因此组播报文就会在Switch所有接口进行广播.<br>  <strong>解决方法:</strong> 当主机和上游三层设备之间传递的IGMP协议报文通过二层组播设备时，拥有IGMP Snooping技术的交换机可以分析报文携带的信息，根据这些信息建立和维护二层组播转发表，从而指导组播数据在数据链路层按需转发.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"IPV6-地址结构\"><a href=\"#IPV6-地址结构\" class=\"headerlink\" title=\"IPV6 地址结构\"></a>IPV6 地址结构</h3><ul>\n<li>地址长128位.(Routing Prefix(48) + Subnet ID (16) + Interface ID(64))</li>\n<li>主机地址(Interface ID)建议永远保留64位.</li>\n<li>IPV6不再使用子网掩码的说法,现在叫前缀长度.</li>\n</ul>\n<h3 id=\"IPV6-地址类型-单播-组播-任播\"><a href=\"#IPV6-地址类型-单播-组播-任播\" class=\"headerlink\" title=\"IPV6 地址类型(单播,组播,任播)\"></a>IPV6 地址类型(单播,组播,任播)</h3><h4 id=\"单播\"><a href=\"#单播\" class=\"headerlink\" title=\"单播\"></a>单播</h4><ul>\n<li>可聚合全球地址(Global Unicast) 2000::/3<ul>\n<li>电信(240e::/18),联通(2408:8000::/20),移动(2409:8000::/20)</li>\n</ul>\n</li>\n<li>本地链路(Link-Local) fe80::/10 相当于IPv4的169.254.0.0/16,不可路由.</li>\n<li>回环(Loopback) ::1/128</li>\n<li>本地唯一(Unique-Local) FC::/7 (FC00::/8暂未定义,当前 FD00::/8已定义),相当于IPv4的私有地址(10.0.0.0/8,172.16.0.0/20,192.168.0.0/24),不可在Internet路由.</li>\n<li>未指定地址(Unspecified) ::/128</li>\n</ul>\n<h4 id=\"组播-icmpv6-ndp-核心\"><a href=\"#组播-icmpv6-ndp-核心\" class=\"headerlink\" title=\"组播(icmpv6 ndp 核心)\"></a>组播(icmpv6 ndp 核心)</h4><ul>\n<li>部分特定地址(FFxx::/8)<ul>\n<li>FF02::1 all nodes 在本地链路范围的所有节点</li>\n<li>FF02::2 all routers 在本地链路范围的所有路由器</li>\n<li>FF02::5 all ospf routers</li>\n<li>FF02::9 all rip routers 所有运行RIP的路由器</li>\n<li>FF02::A all eigrp routers 所有运行eigrp的路由器</li>\n<li>FF05::2 在一个站点范围内的所有路由器</li>\n<li>FF02::1:FFxx:xxxx/104 被请求节点组播地址(solicited-node multicast address)<ul>\n<li>只在本地链路上有效,只包含一个用户,可从接口IPV6地址推算出.</li>\n<li>推算方式:被请求节点组播地址的前104位固定，将接口IP地址的后24位移下来填充到后面就可以了.</li>\n<li>组播地址映射MAC组播地址: 33-33-取IPv6组播地址的最后32bit</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ICMPv6\"><a href=\"#ICMPv6\" class=\"headerlink\" title=\"ICMPv6\"></a>ICMPv6</h3><h4 id=\"NDP-Neighbor-Discovery-Protocol-邻居发现协议\"><a href=\"#NDP-Neighbor-Discovery-Protocol-邻居发现协议\" class=\"headerlink\" title=\"NDP(Neighbor Discovery Protocol 邻居发现协议)\"></a>NDP(Neighbor Discovery Protocol 邻居发现协议)</h4><ul>\n<li>地址解析步骤(获得对方mac ,netsh ipv6 show neighbors)<ol>\n<li>发送ICMPv6的邻居请求信息,目的IP为对方的被请求节点组播地址,目的MAC为对应的组播MAC.源IP/MAC均为本机接口对应地址.注意非广播报文,二层交换机是否广播由交换机能力决定.</li>\n<li>接受方(本地网卡有对应的组播MAC)回送ICMPV6邻居通告消息,该消息包含本机接口MAC.</li>\n</ol>\n</li>\n<li>邻居状态跟踪(间隔发送邻居请求信息,根据回应做出判断)</li>\n<li>DAD(Duplicate Address Detection重复地址检测,保证单播地址不存在冲突,所有单播地址都需要通过DAD检测,才能启用),DAD 使用邻居请求和邻居通告来完成其机制.</li>\n<li>无状态自动配置(自动配置IPV6地址)<ol>\n<li>自动生成本地链路地址(fe80::/10),并通过DAD</li>\n<li>发送邻居请求消息尝试在链路上发现IPV6路由器.</li>\n<li>路由器返回邻居通告消息（携带准备分配给主机的IPv6前缀信息。路由器在没有收到邻居请求消息时也能够主动发出邻居通告消息）</li>\n<li>主机根据路由器回应的邻居请求消息，获得本链路IPv6地址前缀信息， 由前缀 + 接口ID 生成主机的IPv6单播。通过DAD,启用该地址.</li>\n</ol>\n</li>\n<li>路由器通告</li>\n</ul>\n<h3 id=\"二层组播技术-IGMP-snooping\"><a href=\"#二层组播技术-IGMP-snooping\" class=\"headerlink\" title=\"二层组播技术(IGMP snooping)\"></a>二层组播技术(IGMP snooping)</h3><p>  <strong>问题:</strong> 二层Switch由于组播报文的目的地址为组播组地址，在二层设备上是学习不到这一类MAC表项的(组播MAC不会出现在源地址上)，因此组播报文就会在Switch所有接口进行广播.<br>  <strong>解决方法:</strong> 当主机和上游三层设备之间传递的IGMP协议报文通过二层组播设备时，拥有IGMP Snooping技术的交换机可以分析报文携带的信息，根据这些信息建立和维护二层组播转发表，从而指导组播数据在数据链路层按需转发.</p>\n"},{"title":"REDIS","date":"2022-03-16T11:23:46.000Z","_content":"### REDIS 是什么,能干什么\n* redis的特性是快, 简化开发 . \n* 不能替代数据库, 是以数据库为核心应用的强力补充.\n* redis用内存存储数据.(disk only for persistence)内存大小,决定了redis处理数据大小.\n* 数据模型是独特的\n  * sting ( strings ,int ,float )\n  * list\n  * hash\n  * set\n  * zset\n* 事务 ( watch ,unwatch ,mult ,exec )\n  * watch 是乐观锁 ,不使用数据库中的悲观锁.( 例如: 更新前锁定 )\n* 数据持久模式 : snapshotting , aof\n\n","source":"_posts/2022-03-16-redis-primary.md","raw":"---\ntitle: REDIS\ndate: 2022-03-16 19:23:46\ntags:\n- program\ncategories: \n- computer\n- other\n---\n### REDIS 是什么,能干什么\n* redis的特性是快, 简化开发 . \n* 不能替代数据库, 是以数据库为核心应用的强力补充.\n* redis用内存存储数据.(disk only for persistence)内存大小,决定了redis处理数据大小.\n* 数据模型是独特的\n  * sting ( strings ,int ,float )\n  * list\n  * hash\n  * set\n  * zset\n* 事务 ( watch ,unwatch ,mult ,exec )\n  * watch 是乐观锁 ,不使用数据库中的悲观锁.( 例如: 更新前锁定 )\n* 数据持久模式 : snapshotting , aof\n\n","slug":"redis-primary","published":1,"updated":"2022-03-16T12:26:12.097Z","_id":"cl0thwv490000ddpwhjzmhwm5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"REDIS-是什么-能干什么\"><a href=\"#REDIS-是什么-能干什么\" class=\"headerlink\" title=\"REDIS 是什么,能干什么\"></a>REDIS 是什么,能干什么</h3><ul>\n<li>redis的特性是快, 简化开发 . </li>\n<li>不能替代数据库, 是以数据库为核心应用的强力补充.</li>\n<li>redis用内存存储数据.(disk only for persistence)内存大小,决定了redis处理数据大小.</li>\n<li>数据模型是独特的<ul>\n<li>sting ( strings ,int ,float )</li>\n<li>list</li>\n<li>hash</li>\n<li>set</li>\n<li>zset</li>\n</ul>\n</li>\n<li>事务 ( watch ,unwatch ,mult ,exec )<ul>\n<li>watch 是乐观锁 ,不使用数据库中的悲观锁.( 例如: 更新前锁定 )</li>\n</ul>\n</li>\n<li>数据持久模式 : snapshotting , aof</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"REDIS-是什么-能干什么\"><a href=\"#REDIS-是什么-能干什么\" class=\"headerlink\" title=\"REDIS 是什么,能干什么\"></a>REDIS 是什么,能干什么</h3><ul>\n<li>redis的特性是快, 简化开发 . </li>\n<li>不能替代数据库, 是以数据库为核心应用的强力补充.</li>\n<li>redis用内存存储数据.(disk only for persistence)内存大小,决定了redis处理数据大小.</li>\n<li>数据模型是独特的<ul>\n<li>sting ( strings ,int ,float )</li>\n<li>list</li>\n<li>hash</li>\n<li>set</li>\n<li>zset</li>\n</ul>\n</li>\n<li>事务 ( watch ,unwatch ,mult ,exec )<ul>\n<li>watch 是乐观锁 ,不使用数据库中的悲观锁.( 例如: 更新前锁定 )</li>\n</ul>\n</li>\n<li>数据持久模式 : snapshotting , aof</li>\n</ul>\n"},{"title":"OpenSSL","date":"2022-03-18T11:47:52.000Z","_content":"### OpenSSL 简要说明\n\n#### OpenSSL的功能\n* 生成 private keys\n* 创建 CSRs (certificate signing request)\n* 安装证书\n* 标识证书信息, 转换证书格式\n\n#### 基本命令\n* openssl version -a (版本查看)\n* openssl genrsa -out yourdomain.key 2048 (生成私钥的三要素)\n  1. 算法(推荐 RSA)\n  2. 键长(RSA 推荐2048)\n  3. Passphrase\n* openssl rsa -text -in yourdomain.key -noout (查看私钥信息)\n* openssl rsa -in yourdomain.key -pubout -out yourdomain_public.key (输出公钥)\n* openssl x509 -text -in yourdomain.crt -noout (查看证书信息)\n","source":"_posts/2022-03-18-OpenSSL.md","raw":"---\ntitle: OpenSSL\ndate: 2022-03-18 19:47:52\ntags:\n- system\ncategories: \n- computer\n- linux\n---\n### OpenSSL 简要说明\n\n#### OpenSSL的功能\n* 生成 private keys\n* 创建 CSRs (certificate signing request)\n* 安装证书\n* 标识证书信息, 转换证书格式\n\n#### 基本命令\n* openssl version -a (版本查看)\n* openssl genrsa -out yourdomain.key 2048 (生成私钥的三要素)\n  1. 算法(推荐 RSA)\n  2. 键长(RSA 推荐2048)\n  3. Passphrase\n* openssl rsa -text -in yourdomain.key -noout (查看私钥信息)\n* openssl rsa -in yourdomain.key -pubout -out yourdomain_public.key (输出公钥)\n* openssl x509 -text -in yourdomain.crt -noout (查看证书信息)\n","slug":"OpenSSL","published":1,"updated":"2022-03-18T12:00:47.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0wdedrh0000ahpwa4vk9qec","content":"<h3 id=\"OpenSSL-简要说明\"><a href=\"#OpenSSL-简要说明\" class=\"headerlink\" title=\"OpenSSL 简要说明\"></a>OpenSSL 简要说明</h3><h4 id=\"OpenSSL的功能\"><a href=\"#OpenSSL的功能\" class=\"headerlink\" title=\"OpenSSL的功能\"></a>OpenSSL的功能</h4><ul>\n<li>生成 private keys</li>\n<li>创建 CSRs (certificate signing request)</li>\n<li>安装证书</li>\n<li>标识证书信息, 转换证书格式</li>\n</ul>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><ul>\n<li>openssl version -a (版本查看)</li>\n<li>openssl genrsa -out yourdomain.key 2048 (生成私钥的三要素)<ol>\n<li>算法(推荐 RSA)</li>\n<li>键长(RSA 推荐2048)</li>\n<li>Passphrase</li>\n</ol>\n</li>\n<li>openssl rsa -text -in yourdomain.key -noout (查看私钥信息)</li>\n<li>openssl rsa -in yourdomain.key -pubout -out yourdomain_public.key (输出公钥)</li>\n<li>openssl x509 -text -in yourdomain.crt -noout (查看证书信息)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"OpenSSL-简要说明\"><a href=\"#OpenSSL-简要说明\" class=\"headerlink\" title=\"OpenSSL 简要说明\"></a>OpenSSL 简要说明</h3><h4 id=\"OpenSSL的功能\"><a href=\"#OpenSSL的功能\" class=\"headerlink\" title=\"OpenSSL的功能\"></a>OpenSSL的功能</h4><ul>\n<li>生成 private keys</li>\n<li>创建 CSRs (certificate signing request)</li>\n<li>安装证书</li>\n<li>标识证书信息, 转换证书格式</li>\n</ul>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><ul>\n<li>openssl version -a (版本查看)</li>\n<li>openssl genrsa -out yourdomain.key 2048 (生成私钥的三要素)<ol>\n<li>算法(推荐 RSA)</li>\n<li>键长(RSA 推荐2048)</li>\n<li>Passphrase</li>\n</ol>\n</li>\n<li>openssl rsa -text -in yourdomain.key -noout (查看私钥信息)</li>\n<li>openssl rsa -in yourdomain.key -pubout -out yourdomain_public.key (输出公钥)</li>\n<li>openssl x509 -text -in yourdomain.crt -noout (查看证书信息)</li>\n</ul>\n"},{"title":"JavaScript_New_KeyWord","date":"2022-03-20T05:27:18.000Z","_content":"### JS new 操作符\n\nJS的new是为了模仿其他类语言(java,C#)创建对象而设置的.掩盖了JS对象原型链的本质.是语言设计的糟点. \n\n请参考[What is the 'new' keyword in JS?](https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript)\n\n***理解new,关键点如下***\n1. 它创建一个新对象.对象类型是简单对象{}\n2. 将这个新对象内部不可访问的[[prototype]](__proto__)属性设置为构造函数的外部可访问的原型对象(每个函数对象都自动具有原型属性)\n3. 使this变量指向新创建的对象.\n4. 返回新创建的对象，除非构造函数返回非空对象引用。在这种情况下，将返回该对象引用。\n注意: 最困难的是第二步,每个对象（包括函数）都有这个称为 [[prototype]] 的内部属性。它只能在对象创建时设置，可以使用 new、Object.create 或基于字面量（函数默认为 Function.prototype，数字为 Number.prototype 等）。它只能用 Object.getPrototypeOf(someObject) 读取。没有其他方法可以设置或读取此值\n```javascript\nObjMaker = function() {this.a = 'first';};\n// 普通构造函数.\n\nObjMaker.prototype.b = 'second';\n// ObjMaker的prototype(原型属性)可修改,它还有一个[[prototype]]属性不可修改.\n\nobj1 = new ObjMaker();\n// 新对象obj1创建了, 就是{}. \n// obj1 的 [[prototype]] 设置为当前ObjMaker.prototype的对象值(如果ObjMaker.prototype以后分配新值,obj1的[[prototype]]不会改变,但是你可以更改ObjMaker.prototype的属性来影响obj1).\n// 执行ObjMaker时,obj1代替this...,所以obj1.a设置为'first'.\n```\n\n***new 的伪代码***\n```javascript\nfunction New(func) {\n  var res = {};\n  if (func.prototype !== null) {\n  res.__proto__ = func.prototype;\n}\nvar ret = func.apply(res, Array.prototype.slice.call(arguments, 1));\nif ((typeof ret === \"object\" || typeof ret === \"function\") && ret !== null) {\n  return ret;\n}\n  return res;\n}\n```\n\n***JS Object.create 的伪代码***\n```javascript\nObject.create = function(proto ,propertiesObject) {\n  if (typeof proto !== 'object' && typeof proto !== 'function') {\n    throw new TypeError('Object prototype may only be an Object:' + proto)\n  }\n  function F() {}\n  F.prototype = proto;\n  return new F();\n}\n```\n","source":"_posts/2022-03-20-javascript-new-operator.md","raw":"---\ntitle: JavaScript_New_KeyWord\ndate: 2022-03-20 13:27:18\ntags:\n- program\ncategories: \n- computer\n- linux\n---\n### JS new 操作符\n\nJS的new是为了模仿其他类语言(java,C#)创建对象而设置的.掩盖了JS对象原型链的本质.是语言设计的糟点. \n\n请参考[What is the 'new' keyword in JS?](https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript)\n\n***理解new,关键点如下***\n1. 它创建一个新对象.对象类型是简单对象{}\n2. 将这个新对象内部不可访问的[[prototype]](__proto__)属性设置为构造函数的外部可访问的原型对象(每个函数对象都自动具有原型属性)\n3. 使this变量指向新创建的对象.\n4. 返回新创建的对象，除非构造函数返回非空对象引用。在这种情况下，将返回该对象引用。\n注意: 最困难的是第二步,每个对象（包括函数）都有这个称为 [[prototype]] 的内部属性。它只能在对象创建时设置，可以使用 new、Object.create 或基于字面量（函数默认为 Function.prototype，数字为 Number.prototype 等）。它只能用 Object.getPrototypeOf(someObject) 读取。没有其他方法可以设置或读取此值\n```javascript\nObjMaker = function() {this.a = 'first';};\n// 普通构造函数.\n\nObjMaker.prototype.b = 'second';\n// ObjMaker的prototype(原型属性)可修改,它还有一个[[prototype]]属性不可修改.\n\nobj1 = new ObjMaker();\n// 新对象obj1创建了, 就是{}. \n// obj1 的 [[prototype]] 设置为当前ObjMaker.prototype的对象值(如果ObjMaker.prototype以后分配新值,obj1的[[prototype]]不会改变,但是你可以更改ObjMaker.prototype的属性来影响obj1).\n// 执行ObjMaker时,obj1代替this...,所以obj1.a设置为'first'.\n```\n\n***new 的伪代码***\n```javascript\nfunction New(func) {\n  var res = {};\n  if (func.prototype !== null) {\n  res.__proto__ = func.prototype;\n}\nvar ret = func.apply(res, Array.prototype.slice.call(arguments, 1));\nif ((typeof ret === \"object\" || typeof ret === \"function\") && ret !== null) {\n  return ret;\n}\n  return res;\n}\n```\n\n***JS Object.create 的伪代码***\n```javascript\nObject.create = function(proto ,propertiesObject) {\n  if (typeof proto !== 'object' && typeof proto !== 'function') {\n    throw new TypeError('Object prototype may only be an Object:' + proto)\n  }\n  function F() {}\n  F.prototype = proto;\n  return new F();\n}\n```\n","slug":"javascript-new-operator","published":1,"updated":"2022-04-04T06:02:05.735Z","_id":"cl0yvnymy0000odpwcijo38n3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"JS-new-操作符\"><a href=\"#JS-new-操作符\" class=\"headerlink\" title=\"JS new 操作符\"></a>JS new 操作符</h3><p>JS的new是为了模仿其他类语言(java,C#)创建对象而设置的.掩盖了JS对象原型链的本质.是语言设计的糟点. </p>\n<p>请参考<a href=\"https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript\">What is the ‘new’ keyword in JS?</a></p>\n<p><em><strong>理解new,关键点如下</strong></em></p>\n<ol>\n<li>它创建一个新对象.对象类型是简单对象{}</li>\n<li>将这个新对象内部不可访问的<a href=\"__proto__\">[prototype]</a>属性设置为构造函数的外部可访问的原型对象(每个函数对象都自动具有原型属性)</li>\n<li>使this变量指向新创建的对象.</li>\n<li>返回新创建的对象，除非构造函数返回非空对象引用。在这种情况下，将返回该对象引用。<br>注意: 最困难的是第二步,每个对象（包括函数）都有这个称为 [[prototype]] 的内部属性。它只能在对象创建时设置，可以使用 new、Object.create 或基于字面量（函数默认为 Function.prototype，数字为 Number.prototype 等）。它只能用 Object.getPrototypeOf(someObject) 读取。没有其他方法可以设置或读取此值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ObjMaker</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"string\">&#x27;first&#x27;</span>;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 普通构造函数.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ObjMaker</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">b</span> = <span class=\"string\">&#x27;second&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ObjMaker的prototype(原型属性)可修改,它还有一个[[prototype]]属性不可修改.</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjMaker</span>();</span><br><span class=\"line\"><span class=\"comment\">// 新对象obj1创建了, 就是&#123;&#125;. </span></span><br><span class=\"line\"><span class=\"comment\">// obj1 的 [[prototype]] 设置为当前ObjMaker.prototype的对象值(如果ObjMaker.prototype以后分配新值,obj1的[[prototype]]不会改变,但是你可以更改ObjMaker.prototype的属性来影响obj1).</span></span><br><span class=\"line\"><span class=\"comment\">// 执行ObjMaker时,obj1代替this...,所以obj1.a设置为&#x27;first&#x27;.</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><em><strong>new 的伪代码</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">New</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (func.<span class=\"property\"><span class=\"keyword\">prototype</span></span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"property\">__proto__</span> = func.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ret = func.<span class=\"title function_\">apply</span>(res, <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp; ret !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>JS Object.create 的伪代码</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">proto ,propertiesObject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Object prototype may only be an Object:&#x27;</span> + proto)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = proto;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JS-new-操作符\"><a href=\"#JS-new-操作符\" class=\"headerlink\" title=\"JS new 操作符\"></a>JS new 操作符</h3><p>JS的new是为了模仿其他类语言(java,C#)创建对象而设置的.掩盖了JS对象原型链的本质.是语言设计的糟点. </p>\n<p>请参考<a href=\"https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript\">What is the ‘new’ keyword in JS?</a></p>\n<p><em><strong>理解new,关键点如下</strong></em></p>\n<ol>\n<li>它创建一个新对象.对象类型是简单对象{}</li>\n<li>将这个新对象内部不可访问的<a href=\"__proto__\">[prototype]</a>属性设置为构造函数的外部可访问的原型对象(每个函数对象都自动具有原型属性)</li>\n<li>使this变量指向新创建的对象.</li>\n<li>返回新创建的对象，除非构造函数返回非空对象引用。在这种情况下，将返回该对象引用。<br>注意: 最困难的是第二步,每个对象（包括函数）都有这个称为 [[prototype]] 的内部属性。它只能在对象创建时设置，可以使用 new、Object.create 或基于字面量（函数默认为 Function.prototype，数字为 Number.prototype 等）。它只能用 Object.getPrototypeOf(someObject) 读取。没有其他方法可以设置或读取此值<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ObjMaker</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;<span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"string\">&#x27;first&#x27;</span>;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 普通构造函数.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ObjMaker</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">b</span> = <span class=\"string\">&#x27;second&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ObjMaker的prototype(原型属性)可修改,它还有一个[[prototype]]属性不可修改.</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjMaker</span>();</span><br><span class=\"line\"><span class=\"comment\">// 新对象obj1创建了, 就是&#123;&#125;. </span></span><br><span class=\"line\"><span class=\"comment\">// obj1 的 [[prototype]] 设置为当前ObjMaker.prototype的对象值(如果ObjMaker.prototype以后分配新值,obj1的[[prototype]]不会改变,但是你可以更改ObjMaker.prototype的属性来影响obj1).</span></span><br><span class=\"line\"><span class=\"comment\">// 执行ObjMaker时,obj1代替this...,所以obj1.a设置为&#x27;first&#x27;.</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><em><strong>new 的伪代码</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">New</span>(<span class=\"params\">func</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (func.<span class=\"property\"><span class=\"keyword\">prototype</span></span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"property\">__proto__</span> = func.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ret = func.<span class=\"title function_\">apply</span>(res, <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> ret === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&quot;function&quot;</span>) &amp;&amp; ret !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>JS Object.create 的伪代码</strong></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">proto ,propertiesObject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Object prototype may only be an Object:&#x27;</span> + proto)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = proto;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"React Hook Internal","date":"2022-04-04T02:46:04.000Z","_content":"### REACT HOOK \n#### React Fiber with Render and Commit phrases\n![](/images/react_fiber.png)\n* fiber 是react创建的内部对象代表每个元素(element),可以是一个DOM,也可以是一个函数部件.\n* hook出现之前的函数部件,只接受属性(那时的react引擎不使用fiber). 因为函数不能保存状态,而使用fiber后,状态保存在fiber中.类似与将函数使用的变量保存函数体外.(例如: 全局变量可供所有函数使用).\n* React 为每个元素创建2个fiber.一个为\"**current**\" ,一个为\"**workInProgress**\".\n  * \"current\" 在屏幕上展示给客户. 同时 \"workInProgress\"在后台处理更新,一旦完成,后者转变为\"current\".\n  * 初始化时,我们称为**Mount**, 每个部件都需创建, 比较费时. \"workInProgress\"创建完成后变为\"current\"(就是一个指针分配).\n  * 当发生更新时, 我们称为**Update** ,\"workInProgress\"再次创建,但他从\"current\"克隆未变的部分.速度大大加快, 完成后成为\"current\".\n\n#### React useState\n```js\nconst [ data ,setData ] = useState();\n```\n* 当代码使用setData时 ,意思是 Dispatch action ,引擎将action安排至对应fiber中hook对应的更新队列.下次更新时执行.\n* 执行的结果决定了**Update**时, data获得的最新状态.\n\n#### React useEffect\n##### What is a side effect?\n* 相对于纯函数, 函数有隐含的依赖.\n* 解决方式有二种:\n  1. 将依赖都放入函数参数中. 完美解决方式,但有时很难实现.\n  2. 将依赖打包并推迟到最后, 直到真正需要时才执行.在下面例子中,c and log 作为输入参数.所以addFunc是纯的, add 也是纯的.\n```js\nfunction addFunc(c ,log) {\nfunction add(a ,b) {\n  log(a,b)\n  return a + b + c\n}\nreturn add\n}\n```\n#### useEffect\n```js\nuseEffect( () => { ...; return ... }, [DependArray] )\n```\n* useEffect 位于上图的绿色部分.再更新完DOM后执行.\n* useEffect 将使用fiber的updateQueue属性,保存effect函数(分为 create 和destory两类), 取决于场景Mount/Upudate 和 依赖数组.\n* 每次更新完屏幕后, react引擎会flush effect 队列.(先 destory ,后 create)\n","source":"_posts/2022-04-04-react-hook-interal.md","raw":"---\ntitle: React Hook Internal\ndate: 2022-04-04 10:46:04\ntags:\n- program\ncategories: \n- computer\n- linux\n---\n### REACT HOOK \n#### React Fiber with Render and Commit phrases\n![](/images/react_fiber.png)\n* fiber 是react创建的内部对象代表每个元素(element),可以是一个DOM,也可以是一个函数部件.\n* hook出现之前的函数部件,只接受属性(那时的react引擎不使用fiber). 因为函数不能保存状态,而使用fiber后,状态保存在fiber中.类似与将函数使用的变量保存函数体外.(例如: 全局变量可供所有函数使用).\n* React 为每个元素创建2个fiber.一个为\"**current**\" ,一个为\"**workInProgress**\".\n  * \"current\" 在屏幕上展示给客户. 同时 \"workInProgress\"在后台处理更新,一旦完成,后者转变为\"current\".\n  * 初始化时,我们称为**Mount**, 每个部件都需创建, 比较费时. \"workInProgress\"创建完成后变为\"current\"(就是一个指针分配).\n  * 当发生更新时, 我们称为**Update** ,\"workInProgress\"再次创建,但他从\"current\"克隆未变的部分.速度大大加快, 完成后成为\"current\".\n\n#### React useState\n```js\nconst [ data ,setData ] = useState();\n```\n* 当代码使用setData时 ,意思是 Dispatch action ,引擎将action安排至对应fiber中hook对应的更新队列.下次更新时执行.\n* 执行的结果决定了**Update**时, data获得的最新状态.\n\n#### React useEffect\n##### What is a side effect?\n* 相对于纯函数, 函数有隐含的依赖.\n* 解决方式有二种:\n  1. 将依赖都放入函数参数中. 完美解决方式,但有时很难实现.\n  2. 将依赖打包并推迟到最后, 直到真正需要时才执行.在下面例子中,c and log 作为输入参数.所以addFunc是纯的, add 也是纯的.\n```js\nfunction addFunc(c ,log) {\nfunction add(a ,b) {\n  log(a,b)\n  return a + b + c\n}\nreturn add\n}\n```\n#### useEffect\n```js\nuseEffect( () => { ...; return ... }, [DependArray] )\n```\n* useEffect 位于上图的绿色部分.再更新完DOM后执行.\n* useEffect 将使用fiber的updateQueue属性,保存effect函数(分为 create 和destory两类), 取决于场景Mount/Upudate 和 依赖数组.\n* 每次更新完屏幕后, react引擎会flush effect 队列.(先 destory ,后 create)\n","slug":"react-hook-interal","published":1,"updated":"2022-04-09T01:19:23.013Z","_id":"cl1kb3py8000049pw95ta6d9q","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"REACT-HOOK\"><a href=\"#REACT-HOOK\" class=\"headerlink\" title=\"REACT HOOK\"></a>REACT HOOK</h3><h4 id=\"React-Fiber-with-Render-and-Commit-phrases\"><a href=\"#React-Fiber-with-Render-and-Commit-phrases\" class=\"headerlink\" title=\"React Fiber with Render and Commit phrases\"></a>React Fiber with Render and Commit phrases</h4><p><img src=\"/images/react_fiber.png\"></p>\n<ul>\n<li>fiber 是react创建的内部对象代表每个元素(element),可以是一个DOM,也可以是一个函数部件.</li>\n<li>hook出现之前的函数部件,只接受属性(那时的react引擎不使用fiber). 因为函数不能保存状态,而使用fiber后,状态保存在fiber中.类似与将函数使用的变量保存函数体外.(例如: 全局变量可供所有函数使用).</li>\n<li>React 为每个元素创建2个fiber.一个为”<strong>current</strong>“ ,一个为”<strong>workInProgress</strong>“.<ul>\n<li>“current” 在屏幕上展示给客户. 同时 “workInProgress”在后台处理更新,一旦完成,后者转变为”current”.</li>\n<li>初始化时,我们称为<strong>Mount</strong>, 每个部件都需创建, 比较费时. “workInProgress”创建完成后变为”current”(就是一个指针分配).</li>\n<li>当发生更新时, 我们称为<strong>Update</strong> ,”workInProgress”再次创建,但他从”current”克隆未变的部分.速度大大加快, 完成后成为”current”.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"React-useState\"><a href=\"#React-useState\" class=\"headerlink\" title=\"React useState\"></a>React useState</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [ data ,setData ] = <span class=\"title function_\">useState</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当代码使用setData时 ,意思是 Dispatch action ,引擎将action安排至对应fiber中hook对应的更新队列.下次更新时执行.</li>\n<li>执行的结果决定了<strong>Update</strong>时, data获得的最新状态.</li>\n</ul>\n<h4 id=\"React-useEffect\"><a href=\"#React-useEffect\" class=\"headerlink\" title=\"React useEffect\"></a>React useEffect</h4><h5 id=\"What-is-a-side-effect\"><a href=\"#What-is-a-side-effect\" class=\"headerlink\" title=\"What is a side effect?\"></a>What is a side effect?</h5><ul>\n<li>相对于纯函数, 函数有隐含的依赖.</li>\n<li>解决方式有二种:<ol>\n<li>将依赖都放入函数参数中. 完美解决方式,但有时很难实现.</li>\n<li>将依赖打包并推迟到最后, 直到真正需要时才执行.在下面例子中,c and log 作为输入参数.所以addFunc是纯的, add 也是纯的.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addFunc</span>(<span class=\"params\">c ,log</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a ,b</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(a,b)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>( <span class=\"function\">() =&gt;</span> &#123; ...; <span class=\"keyword\">return</span> ... &#125;, [<span class=\"title class_\">DependArray</span>] )</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>useEffect 位于上图的绿色部分.再更新完DOM后执行.</li>\n<li>useEffect 将使用fiber的updateQueue属性,保存effect函数(分为 create 和destory两类), 取决于场景Mount&#x2F;Upudate 和 依赖数组.</li>\n<li>每次更新完屏幕后, react引擎会flush effect 队列.(先 destory ,后 create)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"REACT-HOOK\"><a href=\"#REACT-HOOK\" class=\"headerlink\" title=\"REACT HOOK\"></a>REACT HOOK</h3><h4 id=\"React-Fiber-with-Render-and-Commit-phrases\"><a href=\"#React-Fiber-with-Render-and-Commit-phrases\" class=\"headerlink\" title=\"React Fiber with Render and Commit phrases\"></a>React Fiber with Render and Commit phrases</h4><p><img src=\"/images/react_fiber.png\"></p>\n<ul>\n<li>fiber 是react创建的内部对象代表每个元素(element),可以是一个DOM,也可以是一个函数部件.</li>\n<li>hook出现之前的函数部件,只接受属性(那时的react引擎不使用fiber). 因为函数不能保存状态,而使用fiber后,状态保存在fiber中.类似与将函数使用的变量保存函数体外.(例如: 全局变量可供所有函数使用).</li>\n<li>React 为每个元素创建2个fiber.一个为”<strong>current</strong>“ ,一个为”<strong>workInProgress</strong>“.<ul>\n<li>“current” 在屏幕上展示给客户. 同时 “workInProgress”在后台处理更新,一旦完成,后者转变为”current”.</li>\n<li>初始化时,我们称为<strong>Mount</strong>, 每个部件都需创建, 比较费时. “workInProgress”创建完成后变为”current”(就是一个指针分配).</li>\n<li>当发生更新时, 我们称为<strong>Update</strong> ,”workInProgress”再次创建,但他从”current”克隆未变的部分.速度大大加快, 完成后成为”current”.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"React-useState\"><a href=\"#React-useState\" class=\"headerlink\" title=\"React useState\"></a>React useState</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [ data ,setData ] = <span class=\"title function_\">useState</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当代码使用setData时 ,意思是 Dispatch action ,引擎将action安排至对应fiber中hook对应的更新队列.下次更新时执行.</li>\n<li>执行的结果决定了<strong>Update</strong>时, data获得的最新状态.</li>\n</ul>\n<h4 id=\"React-useEffect\"><a href=\"#React-useEffect\" class=\"headerlink\" title=\"React useEffect\"></a>React useEffect</h4><h5 id=\"What-is-a-side-effect\"><a href=\"#What-is-a-side-effect\" class=\"headerlink\" title=\"What is a side effect?\"></a>What is a side effect?</h5><ul>\n<li>相对于纯函数, 函数有隐含的依赖.</li>\n<li>解决方式有二种:<ol>\n<li>将依赖都放入函数参数中. 完美解决方式,但有时很难实现.</li>\n<li>将依赖打包并推迟到最后, 直到真正需要时才执行.在下面例子中,c and log 作为输入参数.所以addFunc是纯的, add 也是纯的.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addFunc</span>(<span class=\"params\">c ,log</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a ,b</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(a,b)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> add</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>( <span class=\"function\">() =&gt;</span> &#123; ...; <span class=\"keyword\">return</span> ... &#125;, [<span class=\"title class_\">DependArray</span>] )</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>useEffect 位于上图的绿色部分.再更新完DOM后执行.</li>\n<li>useEffect 将使用fiber的updateQueue属性,保存effect函数(分为 create 和destory两类), 取决于场景Mount&#x2F;Upudate 和 依赖数组.</li>\n<li>每次更新完屏幕后, react引擎会flush effect 队列.(先 destory ,后 create)</li>\n</ul>\n"},{"title":"postgresql 事务隔离级别","date":"2022-04-09T01:38:04.000Z","_content":"### 事务隔离级别\n* 事务隔离级别简单的说，就是当激活事务时，控制事务内因SQL语句产生的锁定需要保留多入，影响范围多大，以防止多人访问时，在事务内发生数据查询的错误。\n* postgresql 使用MVVC 读快照 , 读永远不妨碍写.\n* postgresql 默认使用READ COMMITTED事务隔离级别. 就是说事务中每个语句得到一个新的数据快照.为了使一个事务使用同一快照,请使用REPEATABLE READ事务隔离级别. postgresql中最后一个隔离级别是SSI串行读.\n\nFor Update 类似update一样锁定行, 必须等待commit后才释放锁.  For Update NOWait ,nowait 就是不等待,当已被其他事务锁定时,直接报错.\n```sql\nBEGIN;\n  Select * From invoice Where processed = false For Update;\n  ** application magic will happen here **\n  Update invoice Set processed = true ...\nCOMMIT;\n```\n其他: postgresql 的 advisory locks.\n","source":"_posts/2022-04-09-postgresql-lock-md.md","raw":"---\ntitle: postgresql 事务隔离级别\ndate: 2022-04-09 09:38:04\ntags:\n- postgresql\ncategories: \n- computer\n- linux\n---\n### 事务隔离级别\n* 事务隔离级别简单的说，就是当激活事务时，控制事务内因SQL语句产生的锁定需要保留多入，影响范围多大，以防止多人访问时，在事务内发生数据查询的错误。\n* postgresql 使用MVVC 读快照 , 读永远不妨碍写.\n* postgresql 默认使用READ COMMITTED事务隔离级别. 就是说事务中每个语句得到一个新的数据快照.为了使一个事务使用同一快照,请使用REPEATABLE READ事务隔离级别. postgresql中最后一个隔离级别是SSI串行读.\n\nFor Update 类似update一样锁定行, 必须等待commit后才释放锁.  For Update NOWait ,nowait 就是不等待,当已被其他事务锁定时,直接报错.\n```sql\nBEGIN;\n  Select * From invoice Where processed = false For Update;\n  ** application magic will happen here **\n  Update invoice Set processed = true ...\nCOMMIT;\n```\n其他: postgresql 的 advisory locks.\n","slug":"postgresql-lock-md","published":1,"updated":"2022-04-10T01:52:44.163Z","_id":"cl1sm9q9900005lpw9ika9wsn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><ul>\n<li>事务隔离级别简单的说，就是当激活事务时，控制事务内因SQL语句产生的锁定需要保留多入，影响范围多大，以防止多人访问时，在事务内发生数据查询的错误。</li>\n<li>postgresql 使用MVVC 读快照 , 读永远不妨碍写.</li>\n<li>postgresql 默认使用READ COMMITTED事务隔离级别. 就是说事务中每个语句得到一个新的数据快照.为了使一个事务使用同一快照,请使用REPEATABLE READ事务隔离级别. postgresql中最后一个隔离级别是SSI串行读.</li>\n</ul>\n<p>For Update 类似update一样锁定行, 必须等待commit后才释放锁.  For Update NOWait ,nowait 就是不等待,当已被其他事务锁定时,直接报错.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\">  <span class=\"keyword\">Select</span> <span class=\"operator\">*</span> <span class=\"keyword\">From</span> invoice <span class=\"keyword\">Where</span> processed <span class=\"operator\">=</span> <span class=\"literal\">false</span> <span class=\"keyword\">For</span> <span class=\"keyword\">Update</span>;</span><br><span class=\"line\">  <span class=\"operator\">*</span><span class=\"operator\">*</span> application magic will happen here <span class=\"operator\">*</span><span class=\"operator\">*</span></span><br><span class=\"line\">  <span class=\"keyword\">Update</span> invoice <span class=\"keyword\">Set</span> processed <span class=\"operator\">=</span> <span class=\"literal\">true</span> ...</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n<p>其他: postgresql 的 advisory locks.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><ul>\n<li>事务隔离级别简单的说，就是当激活事务时，控制事务内因SQL语句产生的锁定需要保留多入，影响范围多大，以防止多人访问时，在事务内发生数据查询的错误。</li>\n<li>postgresql 使用MVVC 读快照 , 读永远不妨碍写.</li>\n<li>postgresql 默认使用READ COMMITTED事务隔离级别. 就是说事务中每个语句得到一个新的数据快照.为了使一个事务使用同一快照,请使用REPEATABLE READ事务隔离级别. postgresql中最后一个隔离级别是SSI串行读.</li>\n</ul>\n<p>For Update 类似update一样锁定行, 必须等待commit后才释放锁.  For Update NOWait ,nowait 就是不等待,当已被其他事务锁定时,直接报错.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\">  <span class=\"keyword\">Select</span> <span class=\"operator\">*</span> <span class=\"keyword\">From</span> invoice <span class=\"keyword\">Where</span> processed <span class=\"operator\">=</span> <span class=\"literal\">false</span> <span class=\"keyword\">For</span> <span class=\"keyword\">Update</span>;</span><br><span class=\"line\">  <span class=\"operator\">*</span><span class=\"operator\">*</span> application magic will happen here <span class=\"operator\">*</span><span class=\"operator\">*</span></span><br><span class=\"line\">  <span class=\"keyword\">Update</span> invoice <span class=\"keyword\">Set</span> processed <span class=\"operator\">=</span> <span class=\"literal\">true</span> ...</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n<p>其他: postgresql 的 advisory locks.</p>\n"},{"title":"查看公网IP地址","date":"2022-04-17T08:09:05.000Z","_content":"### GET Public IP\n  家里联通猫得到的是100.64.x.x的运营商私有区域地址.为获得使用的公网地址可采用如下方法:\n```bash\ndig +short myip.opendns.com @resolver1.opendns.com\ndig +short txt ch whoami.cloudflare @1.0.0.1\ndig TXT +short o-o.myaddr.l.google.com @ns1.google.com\nhost myip.opendns.com resolver1.opendns.com\n# 使用第三方网站\ncurl ifconfig.me\ncurl icanhazip.com\ncurl ipecho.net/plain\n```\n","source":"_posts/2022-04-17-get-public-ip.md","raw":"---\ntitle: 查看公网IP地址\ndate: 2022-04-17 16:09:05\ntags:\n- network\ncategories: \n- computer\n- linux\n---\n### GET Public IP\n  家里联通猫得到的是100.64.x.x的运营商私有区域地址.为获得使用的公网地址可采用如下方法:\n```bash\ndig +short myip.opendns.com @resolver1.opendns.com\ndig +short txt ch whoami.cloudflare @1.0.0.1\ndig TXT +short o-o.myaddr.l.google.com @ns1.google.com\nhost myip.opendns.com resolver1.opendns.com\n# 使用第三方网站\ncurl ifconfig.me\ncurl icanhazip.com\ncurl ipecho.net/plain\n```\n","slug":"get-public-ip","published":1,"updated":"2022-04-28T11:52:59.831Z","_id":"cl230lz700000ljpwc9wdh9ae","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"GET-Public-IP\"><a href=\"#GET-Public-IP\" class=\"headerlink\" title=\"GET Public IP\"></a>GET Public IP</h3><p>  家里联通猫得到的是100.64.x.x的运营商私有区域地址.为获得使用的公网地址可采用如下方法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short myip.opendns.com @resolver1.opendns.com</span><br><span class=\"line\">dig +short txt ch whoami.cloudflare @1.0.0.1</span><br><span class=\"line\">dig TXT +short o-o.myaddr.l.google.com @ns1.google.com</span><br><span class=\"line\">host myip.opendns.com resolver1.opendns.com</span><br><span class=\"line\"><span class=\"comment\"># 使用第三方网站</span></span><br><span class=\"line\">curl ifconfig.me</span><br><span class=\"line\">curl icanhazip.com</span><br><span class=\"line\">curl ipecho.net/plain</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"GET-Public-IP\"><a href=\"#GET-Public-IP\" class=\"headerlink\" title=\"GET Public IP\"></a>GET Public IP</h3><p>  家里联通猫得到的是100.64.x.x的运营商私有区域地址.为获得使用的公网地址可采用如下方法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short myip.opendns.com @resolver1.opendns.com</span><br><span class=\"line\">dig +short txt ch whoami.cloudflare @1.0.0.1</span><br><span class=\"line\">dig TXT +short o-o.myaddr.l.google.com @ns1.google.com</span><br><span class=\"line\">host myip.opendns.com resolver1.opendns.com</span><br><span class=\"line\"><span class=\"comment\"># 使用第三方网站</span></span><br><span class=\"line\">curl ifconfig.me</span><br><span class=\"line\">curl icanhazip.com</span><br><span class=\"line\">curl ipecho.net/plain</span><br></pre></td></tr></table></figure>\n"},{"title":"REACT 我的部件","date":"2022-04-23T12:23:51.000Z","_content":"\n### 开发REACT时,我的常用包和工具\n* 生成APP [CREATE-REACT-APP](https://create-react-app.dev)\n* 路由 [REACT ROUTER](https://reactrouterdotcom.fly.dev)\n* 表单 [FORMIK](https://fomik.org),[YUP](https://www.npmjs.com/package/yup)\n* 工具 [LODASH](https://lodash.com/), 格式化数字 [NUMERAL](http://numeraljs.com) 日期库 [MOMENT](https://momentjs.com) ,ID标识符[NANOID](https://github.com/ai/nanoid), 深度拷贝[RFDC](https://www.npmjs.com/package/rfdc)\n* 状态维护 [REDUX](https://redux.js.org),[REACT-REDUX](https://react-redux.js.org)\n* 图标 [REACT-ICONS](https://react-icons.github.io/react-icons)\n* WEB Server [EXPRESS](https://expressjs.com)\n* 数据库 [PG](https://node-postgres.com),[MSSQL](https://www.npmjs.com/package/mssql)\n* UI库 [REACT-BOOTSTRAP](https://react-bootstrap.github.io),[MUI](https://mui.com), 对话框[SWEETALERT2](https://sweetalert2.github.io),Markdown[REACT-MARKDOWN](https://github.com/remarkjs/react-markdown)\n* 表格 [REACT-BOOTSTRAP-TABLE2](https://react-bootstrap-table.github.io/react-bootstrap-table2),[MUI-DATATABLES](https://www.npmjs.com/package/mui-datatables)\n* 消息队列 [RABBITMQ](https://www.npmjs.com/package/amqplib)\n* 非SQL数据库 [REDIS](https://www.npmjs.com/package/redis)\n\n","source":"_posts/2022-04-23-react-my-components.md","raw":"---\ntitle: REACT 我的部件\ndate: 2022-04-23 20:23:51\ntags:\n- program\ncategories: \n- computer\n- linux\n---\n\n### 开发REACT时,我的常用包和工具\n* 生成APP [CREATE-REACT-APP](https://create-react-app.dev)\n* 路由 [REACT ROUTER](https://reactrouterdotcom.fly.dev)\n* 表单 [FORMIK](https://fomik.org),[YUP](https://www.npmjs.com/package/yup)\n* 工具 [LODASH](https://lodash.com/), 格式化数字 [NUMERAL](http://numeraljs.com) 日期库 [MOMENT](https://momentjs.com) ,ID标识符[NANOID](https://github.com/ai/nanoid), 深度拷贝[RFDC](https://www.npmjs.com/package/rfdc)\n* 状态维护 [REDUX](https://redux.js.org),[REACT-REDUX](https://react-redux.js.org)\n* 图标 [REACT-ICONS](https://react-icons.github.io/react-icons)\n* WEB Server [EXPRESS](https://expressjs.com)\n* 数据库 [PG](https://node-postgres.com),[MSSQL](https://www.npmjs.com/package/mssql)\n* UI库 [REACT-BOOTSTRAP](https://react-bootstrap.github.io),[MUI](https://mui.com), 对话框[SWEETALERT2](https://sweetalert2.github.io),Markdown[REACT-MARKDOWN](https://github.com/remarkjs/react-markdown)\n* 表格 [REACT-BOOTSTRAP-TABLE2](https://react-bootstrap-table.github.io/react-bootstrap-table2),[MUI-DATATABLES](https://www.npmjs.com/package/mui-datatables)\n* 消息队列 [RABBITMQ](https://www.npmjs.com/package/amqplib)\n* 非SQL数据库 [REDIS](https://www.npmjs.com/package/redis)\n\n","slug":"react-my-components","published":1,"updated":"2022-05-19T13:43:42.745Z","_id":"cl2bucyo30000c6pw6jy708g6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"开发REACT时-我的常用包和工具\"><a href=\"#开发REACT时-我的常用包和工具\" class=\"headerlink\" title=\"开发REACT时,我的常用包和工具\"></a>开发REACT时,我的常用包和工具</h3><ul>\n<li>生成APP <a href=\"https://create-react-app.dev/\">CREATE-REACT-APP</a></li>\n<li>路由 <a href=\"https://reactrouterdotcom.fly.dev/\">REACT ROUTER</a></li>\n<li>表单 <a href=\"https://fomik.org/\">FORMIK</a>,<a href=\"https://www.npmjs.com/package/yup\">YUP</a></li>\n<li>工具 <a href=\"https://lodash.com/\">LODASH</a>, 格式化数字 <a href=\"http://numeraljs.com/\">NUMERAL</a> 日期库 <a href=\"https://momentjs.com/\">MOMENT</a> ,ID标识符<a href=\"https://github.com/ai/nanoid\">NANOID</a>, 深度拷贝<a href=\"https://www.npmjs.com/package/rfdc\">RFDC</a></li>\n<li>状态维护 <a href=\"https://redux.js.org/\">REDUX</a>,<a href=\"https://react-redux.js.org/\">REACT-REDUX</a></li>\n<li>图标 <a href=\"https://react-icons.github.io/react-icons\">REACT-ICONS</a></li>\n<li>WEB Server <a href=\"https://expressjs.com/\">EXPRESS</a></li>\n<li>数据库 <a href=\"https://node-postgres.com/\">PG</a>,<a href=\"https://www.npmjs.com/package/mssql\">MSSQL</a></li>\n<li>UI库 <a href=\"https://react-bootstrap.github.io/\">REACT-BOOTSTRAP</a>,<a href=\"https://mui.com/\">MUI</a>, 对话框<a href=\"https://sweetalert2.github.io/\">SWEETALERT2</a>,Markdown<a href=\"https://github.com/remarkjs/react-markdown\">REACT-MARKDOWN</a></li>\n<li>表格 <a href=\"https://react-bootstrap-table.github.io/react-bootstrap-table2\">REACT-BOOTSTRAP-TABLE2</a>,<a href=\"https://www.npmjs.com/package/mui-datatables\">MUI-DATATABLES</a></li>\n<li>消息队列 <a href=\"https://www.npmjs.com/package/amqplib\">RABBITMQ</a></li>\n<li>非SQL数据库 <a href=\"https://www.npmjs.com/package/redis\">REDIS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开发REACT时-我的常用包和工具\"><a href=\"#开发REACT时-我的常用包和工具\" class=\"headerlink\" title=\"开发REACT时,我的常用包和工具\"></a>开发REACT时,我的常用包和工具</h3><ul>\n<li>生成APP <a href=\"https://create-react-app.dev/\">CREATE-REACT-APP</a></li>\n<li>路由 <a href=\"https://reactrouterdotcom.fly.dev/\">REACT ROUTER</a></li>\n<li>表单 <a href=\"https://fomik.org/\">FORMIK</a>,<a href=\"https://www.npmjs.com/package/yup\">YUP</a></li>\n<li>工具 <a href=\"https://lodash.com/\">LODASH</a>, 格式化数字 <a href=\"http://numeraljs.com/\">NUMERAL</a> 日期库 <a href=\"https://momentjs.com/\">MOMENT</a> ,ID标识符<a href=\"https://github.com/ai/nanoid\">NANOID</a>, 深度拷贝<a href=\"https://www.npmjs.com/package/rfdc\">RFDC</a></li>\n<li>状态维护 <a href=\"https://redux.js.org/\">REDUX</a>,<a href=\"https://react-redux.js.org/\">REACT-REDUX</a></li>\n<li>图标 <a href=\"https://react-icons.github.io/react-icons\">REACT-ICONS</a></li>\n<li>WEB Server <a href=\"https://expressjs.com/\">EXPRESS</a></li>\n<li>数据库 <a href=\"https://node-postgres.com/\">PG</a>,<a href=\"https://www.npmjs.com/package/mssql\">MSSQL</a></li>\n<li>UI库 <a href=\"https://react-bootstrap.github.io/\">REACT-BOOTSTRAP</a>,<a href=\"https://mui.com/\">MUI</a>, 对话框<a href=\"https://sweetalert2.github.io/\">SWEETALERT2</a>,Markdown<a href=\"https://github.com/remarkjs/react-markdown\">REACT-MARKDOWN</a></li>\n<li>表格 <a href=\"https://react-bootstrap-table.github.io/react-bootstrap-table2\">REACT-BOOTSTRAP-TABLE2</a>,<a href=\"https://www.npmjs.com/package/mui-datatables\">MUI-DATATABLES</a></li>\n<li>消息队列 <a href=\"https://www.npmjs.com/package/amqplib\">RABBITMQ</a></li>\n<li>非SQL数据库 <a href=\"https://www.npmjs.com/package/redis\">REDIS</a></li>\n</ul>\n"},{"title":"Python3 开发准备","date":"2022-06-03T00:43:15.000Z","_content":"##### 虚拟环境\n```bash\npython -m venv myvenv # 创建\nsource myvenv/bin/activate #激活,source means that is is executed in the current shell.\ndeactivate\n```\n\n##### 安装\n```bash\npip freeze > requirements.txt\npip install -r requirements.txt\npip install ... -i https://mirrors.aliyun.com/pypi/simple/ #阿里源\n```\n","source":"_posts/2022-06-03-python-venv.md","raw":"---\ntitle: Python3 开发准备\ndate: 2022-06-03 08:43:15\ntags:\n- program\ncategories: \n- computer\n- linux\n---\n##### 虚拟环境\n```bash\npython -m venv myvenv # 创建\nsource myvenv/bin/activate #激活,source means that is is executed in the current shell.\ndeactivate\n```\n\n##### 安装\n```bash\npip freeze > requirements.txt\npip install -r requirements.txt\npip install ... -i https://mirrors.aliyun.com/pypi/simple/ #阿里源\n```\n","slug":"python-venv","published":1,"updated":"2022-06-03T05:41:01.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3y0qc1b00009lpw71fr7fbh","content":"<h5 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv myvenv <span class=\"comment\"># 创建</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> myvenv/bin/activate <span class=\"comment\">#激活,source means that is is executed in the current shell.</span></span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\">pip install ... -i https://mirrors.aliyun.com/pypi/simple/ <span class=\"comment\">#阿里源</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"虚拟环境\"><a href=\"#虚拟环境\" class=\"headerlink\" title=\"虚拟环境\"></a>虚拟环境</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m venv myvenv <span class=\"comment\"># 创建</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> myvenv/bin/activate <span class=\"comment\">#激活,source means that is is executed in the current shell.</span></span><br><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\">pip install ... -i https://mirrors.aliyun.com/pypi/simple/ <span class=\"comment\">#阿里源</span></span><br></pre></td></tr></table></figure>\n"},{"title":"CSS FLEX","date":"2022-08-21T06:33:46.000Z","_content":"##### CSS Flex 弹性布局\n* 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。\n* 容器存在2根轴, 主轴,从轴. 容器不存在行的概念.\n![](/images/flex-main.gif)\n\n###### 容器属性(控制所属子元素)\n* flex-direction: 主轴方向,项目(子元素)的排列方向.\n* flex-wrap: 子元素（项目）超出父容器时是否换行.\n* flex-flow: flex-direction flex-wrap 的缩写.\n* justify-content: 子元素（项目）在主轴方向上的对齐方式\n* align-items:  子元素（项目）在次轴方向上的对齐方式\n* align-content: 子元素（项目）在侧轴还有多余空间时调整容器内项目的对齐方式\n\n###### 项目属性(子元素)\n* order: 设置项目在容器中出现的顺序.\n* align-self: 覆盖 align-items 属性,为某个项目设置不同的对齐方式\n* flex: flex-grow flex-shrink flex-basis 的缩写.分别对应项目的增长量,收缩量,长度. ( 默认值: flex: 0 1 auto; )\n* flex-grow,flow-shrink: [计算方式](https://zhuanlan.zhihu.com/p/24372279)\n\n##### Flex 一维布局\n* Flex是一维布局的含义之一:**假设主轴尺度足够,所有flex items都将布局在主轴上.**\n","source":"_posts/2022-08-21-css-flex.md","raw":"---\ntitle: CSS FLEX\ndate: 2022-08-21 14:33:46\ntags:\n- program\ncategories: \n- computer\n- program\n---\n##### CSS Flex 弹性布局\n* 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。\n* 容器存在2根轴, 主轴,从轴. 容器不存在行的概念.\n![](/images/flex-main.gif)\n\n###### 容器属性(控制所属子元素)\n* flex-direction: 主轴方向,项目(子元素)的排列方向.\n* flex-wrap: 子元素（项目）超出父容器时是否换行.\n* flex-flow: flex-direction flex-wrap 的缩写.\n* justify-content: 子元素（项目）在主轴方向上的对齐方式\n* align-items:  子元素（项目）在次轴方向上的对齐方式\n* align-content: 子元素（项目）在侧轴还有多余空间时调整容器内项目的对齐方式\n\n###### 项目属性(子元素)\n* order: 设置项目在容器中出现的顺序.\n* align-self: 覆盖 align-items 属性,为某个项目设置不同的对齐方式\n* flex: flex-grow flex-shrink flex-basis 的缩写.分别对应项目的增长量,收缩量,长度. ( 默认值: flex: 0 1 auto; )\n* flex-grow,flow-shrink: [计算方式](https://zhuanlan.zhihu.com/p/24372279)\n\n##### Flex 一维布局\n* Flex是一维布局的含义之一:**假设主轴尺度足够,所有flex items都将布局在主轴上.**\n","slug":"css-flex","published":1,"updated":"2023-02-26T04:49:55.317Z","_id":"cl72zyh9u0000vapwdofk4rsx","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"CSS-Flex-弹性布局\"><a href=\"#CSS-Flex-弹性布局\" class=\"headerlink\" title=\"CSS Flex 弹性布局\"></a>CSS Flex 弹性布局</h5><ul>\n<li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。</li>\n<li>容器存在2根轴, 主轴,从轴. 容器不存在行的概念.<br><img src=\"/images/flex-main.gif\"></li>\n</ul>\n<h6 id=\"容器属性-控制所属子元素\"><a href=\"#容器属性-控制所属子元素\" class=\"headerlink\" title=\"容器属性(控制所属子元素)\"></a>容器属性(控制所属子元素)</h6><ul>\n<li>flex-direction: 主轴方向,项目(子元素)的排列方向.</li>\n<li>flex-wrap: 子元素（项目）超出父容器时是否换行.</li>\n<li>flex-flow: flex-direction flex-wrap 的缩写.</li>\n<li>justify-content: 子元素（项目）在主轴方向上的对齐方式</li>\n<li>align-items:  子元素（项目）在次轴方向上的对齐方式</li>\n<li>align-content: 子元素（项目）在侧轴还有多余空间时调整容器内项目的对齐方式</li>\n</ul>\n<h6 id=\"项目属性-子元素\"><a href=\"#项目属性-子元素\" class=\"headerlink\" title=\"项目属性(子元素)\"></a>项目属性(子元素)</h6><ul>\n<li>order: 设置项目在容器中出现的顺序.</li>\n<li>align-self: 覆盖 align-items 属性,为某个项目设置不同的对齐方式</li>\n<li>flex: flex-grow flex-shrink flex-basis 的缩写.分别对应项目的增长量,收缩量,长度. ( 默认值: flex: 0 1 auto; )</li>\n<li>flex-grow,flow-shrink: <a href=\"https://zhuanlan.zhihu.com/p/24372279\">计算方式</a></li>\n</ul>\n<h5 id=\"Flex-一维布局\"><a href=\"#Flex-一维布局\" class=\"headerlink\" title=\"Flex 一维布局\"></a>Flex 一维布局</h5><ul>\n<li>Flex是一维布局的含义之一:<strong>假设主轴尺度足够,所有flex items都将布局在主轴上.</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"CSS-Flex-弹性布局\"><a href=\"#CSS-Flex-弹性布局\" class=\"headerlink\" title=\"CSS Flex 弹性布局\"></a>CSS Flex 弹性布局</h5><ul>\n<li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。</li>\n<li>容器存在2根轴, 主轴,从轴. 容器不存在行的概念.<br><img src=\"/images/flex-main.gif\"></li>\n</ul>\n<h6 id=\"容器属性-控制所属子元素\"><a href=\"#容器属性-控制所属子元素\" class=\"headerlink\" title=\"容器属性(控制所属子元素)\"></a>容器属性(控制所属子元素)</h6><ul>\n<li>flex-direction: 主轴方向,项目(子元素)的排列方向.</li>\n<li>flex-wrap: 子元素（项目）超出父容器时是否换行.</li>\n<li>flex-flow: flex-direction flex-wrap 的缩写.</li>\n<li>justify-content: 子元素（项目）在主轴方向上的对齐方式</li>\n<li>align-items:  子元素（项目）在次轴方向上的对齐方式</li>\n<li>align-content: 子元素（项目）在侧轴还有多余空间时调整容器内项目的对齐方式</li>\n</ul>\n<h6 id=\"项目属性-子元素\"><a href=\"#项目属性-子元素\" class=\"headerlink\" title=\"项目属性(子元素)\"></a>项目属性(子元素)</h6><ul>\n<li>order: 设置项目在容器中出现的顺序.</li>\n<li>align-self: 覆盖 align-items 属性,为某个项目设置不同的对齐方式</li>\n<li>flex: flex-grow flex-shrink flex-basis 的缩写.分别对应项目的增长量,收缩量,长度. ( 默认值: flex: 0 1 auto; )</li>\n<li>flex-grow,flow-shrink: <a href=\"https://zhuanlan.zhihu.com/p/24372279\">计算方式</a></li>\n</ul>\n<h5 id=\"Flex-一维布局\"><a href=\"#Flex-一维布局\" class=\"headerlink\" title=\"Flex 一维布局\"></a>Flex 一维布局</h5><ul>\n<li>Flex是一维布局的含义之一:<strong>假设主轴尺度足够,所有flex items都将布局在主轴上.</strong></li>\n</ul>\n"},{"title":"SSH EXAMPLE","date":"2022-10-23T06:22:34.000Z","_content":"#### SSH 举例\ntldr\n```bash\n  - Connect to a remote server:\n    ssh username@remote_host\n\n  - Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n  - Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n  - Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command:\n    ssh username@remote_host -t command command_arguments\n\n  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`):\n    ssh -D 1080 username@remote_host\n\n  - SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:\n    ssh -L 9999:example.org:80 -N -T username@remote_host\n\n  - SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):\n    ssh -J username@jump_host username@remote_host\n\n  - Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options):\n    ssh -A username@remote_host\n```\n","source":"_posts/2022-10-23-ssh-example.md","raw":"---\ntitle: SSH EXAMPLE\ndate: 2022-10-23 14:22:34\ntags:\n- shell\ncategories: \n- computer\n- linux\n---\n#### SSH 举例\ntldr\n```bash\n  - Connect to a remote server:\n    ssh username@remote_host\n\n  - Connect to a remote server with a specific identity (private key):\n    ssh -i path/to/key_file username@remote_host\n\n  - Connect to a remote server using a specific port:\n    ssh username@remote_host -p 2222\n\n  - Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command:\n    ssh username@remote_host -t command command_arguments\n\n  - SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`):\n    ssh -D 1080 username@remote_host\n\n  - SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:\n    ssh -L 9999:example.org:80 -N -T username@remote_host\n\n  - SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):\n    ssh -J username@jump_host username@remote_host\n\n  - Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options):\n    ssh -A username@remote_host\n```\n","slug":"ssh-example","published":1,"updated":"2023-03-18T00:34:54.529Z","_id":"cl9kyxn0d0000ghpw8hqugh84","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"SSH-举例\"><a href=\"#SSH-举例\" class=\"headerlink\" title=\"SSH 举例\"></a>SSH 举例</h4><p>tldr</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Connect to a remote server:</span><br><span class=\"line\">  ssh username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Connect to a remote server with a specific identity (private key):</span><br><span class=\"line\">  ssh -i path/to/key_file username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Connect to a remote server using a specific port:</span><br><span class=\"line\">  ssh username@remote_host -p 2222</span><br><span class=\"line\"></span><br><span class=\"line\">- Run a <span class=\"built_in\">command</span> on a remote server with a [t]ty allocation allowing interaction with the remote <span class=\"built_in\">command</span>:</span><br><span class=\"line\">  ssh username@remote_host -t <span class=\"built_in\">command</span> command_arguments</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`):</span><br><span class=\"line\">  ssh -D 1080 username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:</span><br><span class=\"line\">  ssh -L 9999:example.org:80 -N -T username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):</span><br><span class=\"line\">  ssh -J username@jump_host username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` <span class=\"keyword\">for</span> available options):</span><br><span class=\"line\">  ssh -A username@remote_host</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"SSH-举例\"><a href=\"#SSH-举例\" class=\"headerlink\" title=\"SSH 举例\"></a>SSH 举例</h4><p>tldr</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Connect to a remote server:</span><br><span class=\"line\">  ssh username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Connect to a remote server with a specific identity (private key):</span><br><span class=\"line\">  ssh -i path/to/key_file username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Connect to a remote server using a specific port:</span><br><span class=\"line\">  ssh username@remote_host -p 2222</span><br><span class=\"line\"></span><br><span class=\"line\">- Run a <span class=\"built_in\">command</span> on a remote server with a [t]ty allocation allowing interaction with the remote <span class=\"built_in\">command</span>:</span><br><span class=\"line\">  ssh username@remote_host -t <span class=\"built_in\">command</span> command_arguments</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`):</span><br><span class=\"line\">  ssh -D 1080 username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:</span><br><span class=\"line\">  ssh -L 9999:example.org:80 -N -T username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):</span><br><span class=\"line\">  ssh -J username@jump_host username@remote_host</span><br><span class=\"line\"></span><br><span class=\"line\">- Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` <span class=\"keyword\">for</span> available options):</span><br><span class=\"line\">  ssh -A username@remote_host</span><br></pre></td></tr></table></figure>\n"},{"title":"PROMISE ERROR","date":"2022-10-30T06:08:52.000Z","_content":"#### JS PROMISE ERROR\n\n一般规则: \n**子函数返回Promise,不必使用catch处理,错误处理由最顶层的Promise处理.**\n* promise reject 后，没有被catch的话，目前不会结束代码运行。会继续执行后续代码，不过会在最后报个警告： UnhandledPromiseRejectionWarning。并提示在后续的 node 版本中会导致进程非正常结束，就是崩掉。\n\n* Async的作用有二个\n  1. 函数返回 Promise\n  2. 函数中使用 await \n* await 对错误的处理方式:\n  * await 执行时如返回REJECT,则扔出错误,可以使用try/catch语句捕获.\n* Then , Catch , Finally\n  * catch 捕获错误,\n  * 使用reject 而不是throw\n  * finally 不影响 then/catch的数据流.不接受任何参数,可做一些清理工作.\n```javascript\n# Output: Good ABC Promise{ <state>: \"fulfilled\" ,<value>: undefined }\nPromise.resolve(\"ABC\").finally(() => console.log(\"Good\")).then((dat) => console.log(dat));\n# Output: Good Promise{ <state>: \"fulfilled\", <value>:\"ABC\" }\nPromise.reject(\"ABC\").finally(() => console.log(\"Good\")).catch((dat) => dat);\n```\n","source":"_posts/2022-10-30-promise-error.md","raw":"---\ntitle: PROMISE ERROR\ndate: 2022-10-30 14:08:52\ntags:\n- javascript\ncategories: \n- computer\n- program\n---\n#### JS PROMISE ERROR\n\n一般规则: \n**子函数返回Promise,不必使用catch处理,错误处理由最顶层的Promise处理.**\n* promise reject 后，没有被catch的话，目前不会结束代码运行。会继续执行后续代码，不过会在最后报个警告： UnhandledPromiseRejectionWarning。并提示在后续的 node 版本中会导致进程非正常结束，就是崩掉。\n\n* Async的作用有二个\n  1. 函数返回 Promise\n  2. 函数中使用 await \n* await 对错误的处理方式:\n  * await 执行时如返回REJECT,则扔出错误,可以使用try/catch语句捕获.\n* Then , Catch , Finally\n  * catch 捕获错误,\n  * 使用reject 而不是throw\n  * finally 不影响 then/catch的数据流.不接受任何参数,可做一些清理工作.\n```javascript\n# Output: Good ABC Promise{ <state>: \"fulfilled\" ,<value>: undefined }\nPromise.resolve(\"ABC\").finally(() => console.log(\"Good\")).then((dat) => console.log(dat));\n# Output: Good Promise{ <state>: \"fulfilled\", <value>:\"ABC\" }\nPromise.reject(\"ABC\").finally(() => console.log(\"Good\")).catch((dat) => dat);\n```\n","slug":"promise-error","published":1,"updated":"2023-03-18T00:34:34.668Z","_id":"cl9uzmasr0000ljpwg0r7h06y","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"JS-PROMISE-ERROR\"><a href=\"#JS-PROMISE-ERROR\" class=\"headerlink\" title=\"JS PROMISE ERROR\"></a>JS PROMISE ERROR</h4><p>一般规则:<br><strong>子函数返回Promise,不必使用catch处理,错误处理由最顶层的Promise处理.</strong></p>\n<ul>\n<li><p>promise reject 后，没有被catch的话，目前不会结束代码运行。会继续执行后续代码，不过会在最后报个警告： UnhandledPromiseRejectionWarning。并提示在后续的 node 版本中会导致进程非正常结束，就是崩掉。</p>\n</li>\n<li><p>Async的作用有二个</p>\n<ol>\n<li>函数返回 Promise</li>\n<li>函数中使用 await</li>\n</ol>\n</li>\n<li><p>await 对错误的处理方式:</p>\n<ul>\n<li>await 执行时如返回REJECT,则扔出错误,可以使用try&#x2F;catch语句捕获.</li>\n</ul>\n</li>\n<li><p>Then , Catch , Finally</p>\n<ul>\n<li>catch 捕获错误,</li>\n<li>使用reject 而不是throw</li>\n<li>finally 不影响 then&#x2F;catch的数据流.不接受任何参数,可做一些清理工作.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Output</span>: <span class=\"title class_\">Good</span> <span class=\"variable constant_\">ABC</span> <span class=\"title class_\">Promise</span>&#123; &lt;state&gt;: <span class=\"string\">&quot;fulfilled&quot;</span> ,&lt;value&gt;: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;ABC&quot;</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Good&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">dat</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dat));</span><br><span class=\"line\"># <span class=\"title class_\">Output</span>: <span class=\"title class_\">Good</span> <span class=\"title class_\">Promise</span>&#123; &lt;state&gt;: <span class=\"string\">&quot;fulfilled&quot;</span>, &lt;value&gt;:<span class=\"string\">&quot;ABC&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&quot;ABC&quot;</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Good&quot;</span>)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">dat</span>) =&gt;</span> dat);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JS-PROMISE-ERROR\"><a href=\"#JS-PROMISE-ERROR\" class=\"headerlink\" title=\"JS PROMISE ERROR\"></a>JS PROMISE ERROR</h4><p>一般规则:<br><strong>子函数返回Promise,不必使用catch处理,错误处理由最顶层的Promise处理.</strong></p>\n<ul>\n<li><p>promise reject 后，没有被catch的话，目前不会结束代码运行。会继续执行后续代码，不过会在最后报个警告： UnhandledPromiseRejectionWarning。并提示在后续的 node 版本中会导致进程非正常结束，就是崩掉。</p>\n</li>\n<li><p>Async的作用有二个</p>\n<ol>\n<li>函数返回 Promise</li>\n<li>函数中使用 await</li>\n</ol>\n</li>\n<li><p>await 对错误的处理方式:</p>\n<ul>\n<li>await 执行时如返回REJECT,则扔出错误,可以使用try&#x2F;catch语句捕获.</li>\n</ul>\n</li>\n<li><p>Then , Catch , Finally</p>\n<ul>\n<li>catch 捕获错误,</li>\n<li>使用reject 而不是throw</li>\n<li>finally 不影响 then&#x2F;catch的数据流.不接受任何参数,可做一些清理工作.<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Output</span>: <span class=\"title class_\">Good</span> <span class=\"variable constant_\">ABC</span> <span class=\"title class_\">Promise</span>&#123; &lt;state&gt;: <span class=\"string\">&quot;fulfilled&quot;</span> ,&lt;value&gt;: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;ABC&quot;</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Good&quot;</span>)).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">dat</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dat));</span><br><span class=\"line\"># <span class=\"title class_\">Output</span>: <span class=\"title class_\">Good</span> <span class=\"title class_\">Promise</span>&#123; &lt;state&gt;: <span class=\"string\">&quot;fulfilled&quot;</span>, &lt;value&gt;:<span class=\"string\">&quot;ABC&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&quot;ABC&quot;</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Good&quot;</span>)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">dat</span>) =&gt;</span> dat);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"MARKDOWN","date":"2023-03-18T00:28:40.000Z","_content":"\n# \\# Heading level 1\n\n### \\#\\#\\# Heading level 3\n\n##### \\#\\#\\#\\#\\#  Heading level 5\n---\n\n\\*\\***boldtext**\\*\\*\n\\**italic text*\\*\n\\~\\~~~strikethrought text~~\\~\\~\n\n1. 1\\. Fist item\n2. 2\\. Second item\n   1. 1\\. Indented item\n   2. 2\\. Indented item\n3. 3\\. Third item\n\n\n- \\- Fist item\n- \\- Second item\n  - \\- Indented item\n  - \\- Indented item\n- \\- Third item\n\n[\\[Link\\]\\(https://blog.lizhen.pub\\)](https://blog.lizhen.pub)\n\\<<https://blog.lizhen.pub>\\>\n\n\\``inline code`\\`\n```js\n//```js  \nconst message = 'li'\n//```\n```\n\n##### Horizontal rules: \\--- \\___ \\***\n---\n___\n***\n\n##### Table:\n\\| ID \\| Title \\|\n|---|------|\n|#1 | Hello |\n|#2 | Markdown |\n\n| ID | Title |\n|---|------|\n|#1 | Hello |\n|#2 | Markdown |\n","source":"_posts/2023-03-18-markdown.md","raw":"---\ntitle: MARKDOWN\ndate: 2023-03-18 08:28:40\ntags:\n- other\ncategories: \n- computer\n- other\n---\n\n# \\# Heading level 1\n\n### \\#\\#\\# Heading level 3\n\n##### \\#\\#\\#\\#\\#  Heading level 5\n---\n\n\\*\\***boldtext**\\*\\*\n\\**italic text*\\*\n\\~\\~~~strikethrought text~~\\~\\~\n\n1. 1\\. Fist item\n2. 2\\. Second item\n   1. 1\\. Indented item\n   2. 2\\. Indented item\n3. 3\\. Third item\n\n\n- \\- Fist item\n- \\- Second item\n  - \\- Indented item\n  - \\- Indented item\n- \\- Third item\n\n[\\[Link\\]\\(https://blog.lizhen.pub\\)](https://blog.lizhen.pub)\n\\<<https://blog.lizhen.pub>\\>\n\n\\``inline code`\\`\n```js\n//```js  \nconst message = 'li'\n//```\n```\n\n##### Horizontal rules: \\--- \\___ \\***\n---\n___\n***\n\n##### Table:\n\\| ID \\| Title \\|\n|---|------|\n|#1 | Hello |\n|#2 | Markdown |\n\n| ID | Title |\n|---|------|\n|#1 | Hello |\n|#2 | Markdown |\n","slug":"markdown","published":1,"updated":"2023-03-19T00:37:00.000Z","_id":"clfd8mhus0000wxpwgs2ab4en","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Heading-level-1\"><a href=\"#Heading-level-1\" class=\"headerlink\" title=\"# Heading level 1\"></a># Heading level 1</h1><h3 id=\"Heading-level-3\"><a href=\"#Heading-level-3\" class=\"headerlink\" title=\"### Heading level 3\"></a>### Heading level 3</h3><h5 id=\"Heading-level-5\"><a href=\"#Heading-level-5\" class=\"headerlink\" title=\"#####  Heading level 5\"></a>#####  Heading level 5</h5><hr>\n<p>**<strong>boldtext</strong>**<br>*<em>italic text</em>*<br>~~<del>strikethrought text</del>~~</p>\n<ol>\n<li>1. Fist item</li>\n<li>2. Second item<ol>\n<li>1. Indented item</li>\n<li>2. Indented item</li>\n</ol>\n</li>\n<li>3. Third item</li>\n</ol>\n<ul>\n<li>- Fist item</li>\n<li>- Second item<ul>\n<li>- Indented item</li>\n<li>- Indented item</li>\n</ul>\n</li>\n<li>- Third item</li>\n</ul>\n<p><a href=\"https://blog.lizhen.pub/\">[Link](https://blog.lizhen.pub)</a><br>&lt;<a href=\"https://blog.lizhen.pub/\">https://blog.lizhen.pub</a>&gt;</p>\n<p>`<code>inline code</code>`</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//```js  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;li&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//```</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Horizontal-rules-–\"><a href=\"#Horizontal-rules-–\" class=\"headerlink\" title=\"Horizontal rules: -– ___ ***\"></a>Horizontal rules: -– ___ ***</h5><hr>\n<hr>\n<hr>\n<h5 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table:\"></a>Table:</h5><p>| ID | Title |<br>|—|——|<br>|#1 | Hello |<br>|#2 | Markdown |</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#1</td>\n<td>Hello</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>Markdown</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Heading-level-1\"><a href=\"#Heading-level-1\" class=\"headerlink\" title=\"# Heading level 1\"></a># Heading level 1</h1><h3 id=\"Heading-level-3\"><a href=\"#Heading-level-3\" class=\"headerlink\" title=\"### Heading level 3\"></a>### Heading level 3</h3><h5 id=\"Heading-level-5\"><a href=\"#Heading-level-5\" class=\"headerlink\" title=\"#####  Heading level 5\"></a>#####  Heading level 5</h5><hr>\n<p>**<strong>boldtext</strong>**<br>*<em>italic text</em>*<br>~~<del>strikethrought text</del>~~</p>\n<ol>\n<li>1. Fist item</li>\n<li>2. Second item<ol>\n<li>1. Indented item</li>\n<li>2. Indented item</li>\n</ol>\n</li>\n<li>3. Third item</li>\n</ol>\n<ul>\n<li>- Fist item</li>\n<li>- Second item<ul>\n<li>- Indented item</li>\n<li>- Indented item</li>\n</ul>\n</li>\n<li>- Third item</li>\n</ul>\n<p><a href=\"https://blog.lizhen.pub/\">[Link](https://blog.lizhen.pub)</a><br>&lt;<a href=\"https://blog.lizhen.pub/\">https://blog.lizhen.pub</a>&gt;</p>\n<p>`<code>inline code</code>`</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//```js  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&#x27;li&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//```</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Horizontal-rules-–\"><a href=\"#Horizontal-rules-–\" class=\"headerlink\" title=\"Horizontal rules: -– ___ ***\"></a>Horizontal rules: -– ___ ***</h5><hr>\n<hr>\n<hr>\n<h5 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table:\"></a>Table:</h5><p>| ID | Title |<br>|—|——|<br>|#1 | Hello |<br>|#2 | Markdown |</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#1</td>\n<td>Hello</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>Markdown</td>\n</tr>\n</tbody></table>\n"},{"title":"iptables","date":"2025-02-03T22:59:13.000Z","_content":"\n## IPTABLES\n[参考](https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture)\n#### Tables\n表按类型组织规则，规则进一步组成链(hooks 触发 chains)\n##### Built-in tables\n- nat 网络地址转换 chains-> OUTPUT,POSTROUTING,PREROUTING\n- filter 过滤数据包,链的默认表 chains-> FORWARD,INPUT,OUTPUT\n- mangle 修改数据包 chains-> FORWARD,INPUT,OUTPUT,POSTROUTING,PREROUTING\n\n#### Chains\n![flow](/images/iptables_hooks.png)\n链与网络层的hooks关联,每个流经网络层的包都将触发hooks.\n- PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook.\n- INPUT: Triggered by the NF_IP_LOCAL_IN hook.\n- FORWARD: Triggered by the NF_IP_FORWARD hook.\n- OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook.\n- POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook.\n\n每个Hook上的chains有执行的优先顺序,参考下图\n![tables_chains](/images/iptables_tables_chains.png)\n\n#### Examples (Matches ,Targets)\n```bash\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\niptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.80\n# wireguard example\niptables -I INPUT -p udp --dport 51824 -j ACCEPT\niptables -N wg0-input\niptables -A INPUT -i wg0 -j wg0-input\niptables -A wg0-input -m state --state ESTABLISHED,RELATED -j ACCEPT\n# wireguard example 2\niptables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x200\niptables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x200 -j MASQUERADE\n\n# drop them if the rate exceeds 10 per second\niptables -A INPUT -p icmp --icmp-type ping -m limit !--limit 10/s -j DROP\niptables -A PREROUTING -i eth1 -m mac --mac-source ! 0d:bc:97:02:18:21 -j DROP\n```\n","source":"_posts/2025-02-04-iptables.md","raw":"---\ntitle: iptables\ndate: 2025-02-04 06:59:13\ncategories: \n- computer\n- linux\ntags:\n- system\n- network\n---\n\n## IPTABLES\n[参考](https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture)\n#### Tables\n表按类型组织规则，规则进一步组成链(hooks 触发 chains)\n##### Built-in tables\n- nat 网络地址转换 chains-> OUTPUT,POSTROUTING,PREROUTING\n- filter 过滤数据包,链的默认表 chains-> FORWARD,INPUT,OUTPUT\n- mangle 修改数据包 chains-> FORWARD,INPUT,OUTPUT,POSTROUTING,PREROUTING\n\n#### Chains\n![flow](/images/iptables_hooks.png)\n链与网络层的hooks关联,每个流经网络层的包都将触发hooks.\n- PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook.\n- INPUT: Triggered by the NF_IP_LOCAL_IN hook.\n- FORWARD: Triggered by the NF_IP_FORWARD hook.\n- OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook.\n- POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook.\n\n每个Hook上的chains有执行的优先顺序,参考下图\n![tables_chains](/images/iptables_tables_chains.png)\n\n#### Examples (Matches ,Targets)\n```bash\niptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\niptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.80\n# wireguard example\niptables -I INPUT -p udp --dport 51824 -j ACCEPT\niptables -N wg0-input\niptables -A INPUT -i wg0 -j wg0-input\niptables -A wg0-input -m state --state ESTABLISHED,RELATED -j ACCEPT\n# wireguard example 2\niptables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x200\niptables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x200 -j MASQUERADE\n\n# drop them if the rate exceeds 10 per second\niptables -A INPUT -p icmp --icmp-type ping -m limit !--limit 10/s -j DROP\niptables -A PREROUTING -i eth1 -m mac --mac-source ! 0d:bc:97:02:18:21 -j DROP\n```\n","slug":"iptables","published":1,"updated":"2025-02-04T00:02:03.783Z","_id":"cm6pplgvy00006kw39se6emv9","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"IPTABLES\"><a href=\"#IPTABLES\" class=\"headerlink\" title=\"IPTABLES\"></a>IPTABLES</h2><p><a href=\"https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture\">参考</a></p>\n<h4 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h4><p>表按类型组织规则，规则进一步组成链(hooks 触发 chains)</p>\n<h5 id=\"Built-in-tables\"><a href=\"#Built-in-tables\" class=\"headerlink\" title=\"Built-in tables\"></a>Built-in tables</h5><ul>\n<li>nat 网络地址转换 chains-&gt; OUTPUT,POSTROUTING,PREROUTING</li>\n<li>filter 过滤数据包,链的默认表 chains-&gt; FORWARD,INPUT,OUTPUT</li>\n<li>mangle 修改数据包 chains-&gt; FORWARD,INPUT,OUTPUT,POSTROUTING,PREROUTING</li>\n</ul>\n<h4 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h4><p><img src=\"/images/iptables_hooks.png\" alt=\"flow\"><br>链与网络层的hooks关联,每个流经网络层的包都将触发hooks.</p>\n<ul>\n<li>PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook.</li>\n<li>INPUT: Triggered by the NF_IP_LOCAL_IN hook.</li>\n<li>FORWARD: Triggered by the NF_IP_FORWARD hook.</li>\n<li>OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook.</li>\n<li>POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook.</li>\n</ul>\n<p>每个Hook上的chains有执行的优先顺序,参考下图<br><img src=\"/images/iptables_tables_chains.png\" alt=\"tables_chains\"></p>\n<h4 id=\"Examples-Matches-Targets\"><a href=\"#Examples-Matches-Targets\" class=\"headerlink\" title=\"Examples (Matches ,Targets)\"></a>Examples (Matches ,Targets)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.80</span><br><span class=\"line\"><span class=\"comment\"># wireguard example</span></span><br><span class=\"line\">iptables -I INPUT -p udp --dport 51824 -j ACCEPT</span><br><span class=\"line\">iptables -N wg0-input</span><br><span class=\"line\">iptables -A INPUT -i wg0 -j wg0-input</span><br><span class=\"line\">iptables -A wg0-input -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\"># wireguard example 2</span></span><br><span class=\"line\">iptables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x200</span><br><span class=\"line\">iptables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x200 -j MASQUERADE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># drop them if the rate exceeds 10 per second</span></span><br><span class=\"line\">iptables -A INPUT -p icmp --icmp-type ping -m <span class=\"built_in\">limit</span> !--<span class=\"built_in\">limit</span> 10/s -j DROP</span><br><span class=\"line\">iptables -A PREROUTING -i eth1 -m mac --mac-source ! 0d:bc:97:02:18:21 -j DROP</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"IPTABLES\"><a href=\"#IPTABLES\" class=\"headerlink\" title=\"IPTABLES\"></a>IPTABLES</h2><p><a href=\"https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture\">参考</a></p>\n<h4 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h4><p>表按类型组织规则，规则进一步组成链(hooks 触发 chains)</p>\n<h5 id=\"Built-in-tables\"><a href=\"#Built-in-tables\" class=\"headerlink\" title=\"Built-in tables\"></a>Built-in tables</h5><ul>\n<li>nat 网络地址转换 chains-&gt; OUTPUT,POSTROUTING,PREROUTING</li>\n<li>filter 过滤数据包,链的默认表 chains-&gt; FORWARD,INPUT,OUTPUT</li>\n<li>mangle 修改数据包 chains-&gt; FORWARD,INPUT,OUTPUT,POSTROUTING,PREROUTING</li>\n</ul>\n<h4 id=\"Chains\"><a href=\"#Chains\" class=\"headerlink\" title=\"Chains\"></a>Chains</h4><p><img src=\"/images/iptables_hooks.png\" alt=\"flow\"><br>链与网络层的hooks关联,每个流经网络层的包都将触发hooks.</p>\n<ul>\n<li>PREROUTING: Triggered by the NF_IP_PRE_ROUTING hook.</li>\n<li>INPUT: Triggered by the NF_IP_LOCAL_IN hook.</li>\n<li>FORWARD: Triggered by the NF_IP_FORWARD hook.</li>\n<li>OUTPUT: Triggered by the NF_IP_LOCAL_OUT hook.</li>\n<li>POSTROUTING: Triggered by the NF_IP_POST_ROUTING hook.</li>\n</ul>\n<p>每个Hook上的chains有执行的优先顺序,参考下图<br><img src=\"/images/iptables_tables_chains.png\" alt=\"tables_chains\"></p>\n<h4 id=\"Examples-Matches-Targets\"><a href=\"#Examples-Matches-Targets\" class=\"headerlink\" title=\"Examples (Matches ,Targets)\"></a>Examples (Matches ,Targets)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br><span class=\"line\">iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.80</span><br><span class=\"line\"><span class=\"comment\"># wireguard example</span></span><br><span class=\"line\">iptables -I INPUT -p udp --dport 51824 -j ACCEPT</span><br><span class=\"line\">iptables -N wg0-input</span><br><span class=\"line\">iptables -A INPUT -i wg0 -j wg0-input</span><br><span class=\"line\">iptables -A wg0-input -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"><span class=\"comment\"># wireguard example 2</span></span><br><span class=\"line\">iptables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x200</span><br><span class=\"line\">iptables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x200 -j MASQUERADE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># drop them if the rate exceeds 10 per second</span></span><br><span class=\"line\">iptables -A INPUT -p icmp --icmp-type ping -m <span class=\"built_in\">limit</span> !--<span class=\"built_in\">limit</span> 10/s -j DROP</span><br><span class=\"line\">iptables -A PREROUTING -i eth1 -m mac --mac-source ! 0d:bc:97:02:18:21 -j DROP</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckb6kjx0v0005pspwfi2f2sy1","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1e000upspwc4qde2j5"},{"post_id":"ckb6kjx0v0005pspwfi2f2sy1","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1f000ypspwgg2jdlji"},{"post_id":"ckb6kjx1b000qpspwel9l37ze","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1h0011pspw2ja52bd7"},{"post_id":"ckb6kjx1b000qpspwel9l37ze","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1j0015pspwhrywcjry"},{"post_id":"ckb6kjx0i0000pspwcdj2ctyo","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1k0019pspwa96m9b13"},{"post_id":"ckb6kjx0i0000pspwcdj2ctyo","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1m001dpspwaa1d8ee5"},{"post_id":"ckb6kjx1d000spspw4iwja9yv","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1n001hpspwbtwl4jbc"},{"post_id":"ckb6kjx1d000spspw4iwja9yv","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1p001lpspw9fmv566y"},{"post_id":"ckb6kjx1e000wpspw5g6e6nnk","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1r001ppspwfp959vyq"},{"post_id":"ckb6kjx1e000wpspw5g6e6nnk","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1t001tpspw4gdma6pg"},{"post_id":"ckb6kjx0w0006pspw34az3nez","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1u001wpspw44fu298s"},{"post_id":"ckb6kjx0w0006pspw34az3nez","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"ckb6kjx1w0021pspwedgr1pld"},{"post_id":"ckb6kjx1g0010pspwbojab5no","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx1x0024pspw74g87drm"},{"post_id":"ckb6kjx1g0010pspwbojab5no","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx1z0029pspw56ai7k2r"},{"post_id":"ckb6kjx1i0014pspw4c0h91ht","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx21002cpspw13e067jj"},{"post_id":"ckb6kjx1i0014pspw4c0h91ht","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx23002hpspwchsues26"},{"post_id":"ckb6kjx0z000apspwcpls7nig","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx24002kpspw3gez6r5q"},{"post_id":"ckb6kjx0z000apspwcpls7nig","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx27002opspw447t52ae"},{"post_id":"ckb6kjx1j0018pspwdokv5ass","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx29002spspw67riefai"},{"post_id":"ckb6kjx1j0018pspwdokv5ass","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2a002wpspwdinhgjmr"},{"post_id":"ckb6kjx0o0001pspw17udh8q0","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2c0030pspw8595hbfj"},{"post_id":"ckb6kjx0o0001pspw17udh8q0","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2e0033pspw3e3b9fpb"},{"post_id":"ckb6kjx1n001gpspwaac38g9t","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2f0036pspwbn3l423c"},{"post_id":"ckb6kjx1n001gpspwaac38g9t","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"ckb6kjx2h0039pspwbofrbpmr"},{"post_id":"ckb6kjx1o001kpspw637wchyx","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2l003cpspw25cjbhen"},{"post_id":"ckb6kjx1o001kpspw637wchyx","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2q003fpspw1k7mfcpt"},{"post_id":"ckb6kjx12000bpspw5tgrdgrx","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2s003jpspwe1krd3o4"},{"post_id":"ckb6kjx12000bpspw5tgrdgrx","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2t003mpspw7skj4e19"},{"post_id":"ckb6kjx1p001opspw1izx5536","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2u003ppspwajm69t3e"},{"post_id":"ckb6kjx1p001opspw1izx5536","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2w003spspwbin4dk6k"},{"post_id":"ckb6kjx1s001spspwfulzbhmd","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2x003upspw3fz364dk"},{"post_id":"ckb6kjx1s001spspwfulzbhmd","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2x003wpspwbl1d5nwl"},{"post_id":"ckb6kjx14000fpspw24pe5poa","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2x003ypspw9lh96cjm"},{"post_id":"ckb6kjx14000fpspw24pe5poa","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2y0040pspwhov96dh5"},{"post_id":"ckb6kjx1t001vpspwa52859ea","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2y0042pspwebbxhutu"},{"post_id":"ckb6kjx1t001vpspwa52859ea","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2y0044pspw9ymbb3pt"},{"post_id":"ckb6kjx1v0020pspwhr717a74","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2y0046pspw2app4wr0"},{"post_id":"ckb6kjx1v0020pspwhr717a74","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2y0048pspw8rozh48m"},{"post_id":"ckb6kjx0t0004pspw9zrmhk3u","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2z0049pspwckjf2h6y"},{"post_id":"ckb6kjx0t0004pspw9zrmhk3u","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx2z004apspwb5jnbo64"},{"post_id":"ckb6kjx1w0023pspw3k3fcnyb","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2z004bpspwfdmv9sm3"},{"post_id":"ckb6kjx1w0023pspw3k3fcnyb","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2z004cpspw0veb5wbu"},{"post_id":"ckb6kjx1y0027pspwetyq5y1e","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2z004dpspw02r67r49"},{"post_id":"ckb6kjx1y0027pspwetyq5y1e","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx2z004epspwbsst85b7"},{"post_id":"ckb6kjx16000hpspw2uny17st","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2z004fpspw1qmshnsz"},{"post_id":"ckb6kjx16000hpspw2uny17st","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx2z004gpspwc9wrdst5"},{"post_id":"ckb6kjx20002bpspw18hzh69t","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx2z004hpspw67hl4lnp"},{"post_id":"ckb6kjx20002bpspw18hzh69t","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx30004ipspwbixt08nx"},{"post_id":"ckb6kjx21002fpspwcw4u62gj","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx30004jpspw988l1gce"},{"post_id":"ckb6kjx21002fpspwcw4u62gj","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx30004kpspwfdlngvhl"},{"post_id":"ckb6kjx18000kpspwe95l09a2","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx30004lpspw6ewr6673"},{"post_id":"ckb6kjx18000kpspwe95l09a2","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx31004mpspwa5233z59"},{"post_id":"ckb6kjx23002jpspw4t4wb6gt","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx31004npspwbi1c2480"},{"post_id":"ckb6kjx25002npspw5xlnawes","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx31004opspwelne7f1k"},{"post_id":"ckb6kjx25002npspw5xlnawes","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx31004ppspw3j75cw2a"},{"post_id":"ckb6kjx19000mpspw6zfgeru3","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx31004qpspw9jf83vmf"},{"post_id":"ckb6kjx19000mpspw6zfgeru3","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx32004rpspw7wpodoii"},{"post_id":"ckb6kjx28002rpspw3yqi9a4e","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx32004spspwdtf451pr"},{"post_id":"ckb6kjx28002rpspw3yqi9a4e","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx32004tpspw234a2jbi"},{"post_id":"ckb6kjx29002vpspw1cubgv0v","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx32004upspwdz2536dj"},{"post_id":"ckb6kjx29002vpspw1cubgv0v","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx32004vpspwbl2b923t"},{"post_id":"ckb6kjx1l001cpspw1uoef0xj","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx32004wpspwd4e60qv1"},{"post_id":"ckb6kjx1l001cpspw1uoef0xj","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx32004xpspwh5rsbj9b"},{"post_id":"ckb6kjx2b002ypspw456m42jd","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx32004ypspw4eme6apg"},{"post_id":"ckb6kjx2b002ypspw456m42jd","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx32004zpspw379ueuat"},{"post_id":"ckb6kjx2d0032pspw4os11k1y","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx320050pspwf4ur6le1"},{"post_id":"ckb6kjx2d0032pspw4os11k1y","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx330051pspw2t2l0cyl"},{"post_id":"ckb6kjx2e0035pspwgmuo8z3t","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx330052pspw0uqed4nw"},{"post_id":"ckb6kjx2e0035pspwgmuo8z3t","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx330053pspw40l50cww"},{"post_id":"ckb6kjx2g0038pspwdubi2elg","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx330054pspw2liuhu0s"},{"post_id":"ckb6kjx2g0038pspwdubi2elg","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx330055pspw5tk443kl"},{"post_id":"ckb6kjx2h003bpspw60ochjvr","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx330056pspw8z7k0dkr"},{"post_id":"ckb6kjx2h003bpspw60ochjvr","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx330057pspw6iq865hw"},{"post_id":"ckb6kjx2p003epspw9cxx6amn","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx340058pspw40200vqg"},{"post_id":"ckb6kjx2p003epspw9cxx6amn","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx340059pspw13xucz9q"},{"post_id":"ckb6kjx2r003ipspwhkp620sq","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx34005apspwazcxcuw4"},{"post_id":"ckb6kjx2r003ipspwhkp620sq","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"ckb6kjx34005bpspw4m0id3w4"},{"post_id":"ckb6kjx2s003lpspw1bw8bt16","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx34005cpspwbfxp9czh"},{"post_id":"ckb6kjx2s003lpspw1bw8bt16","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx34005dpspwemhfcrpk"},{"post_id":"ckb6kjx2t003opspw5ytn19f7","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx34005epspwcvhm52eo"},{"post_id":"ckb6kjx2t003opspw5ytn19f7","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx34005fpspw5wsz96lr"},{"post_id":"ckb6kjx3m005gpspw4k40h9y9","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx3r005lpspw5xnf15v7"},{"post_id":"ckb6kjx3m005gpspw4k40h9y9","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx3s005npspw06b77l4w"},{"post_id":"ckb6kjx3o005hpspwbe456bdz","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckb6kjx3s005opspwe28y1ymm"},{"post_id":"ckb6kjx3o005hpspwbe456bdz","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"ckb6kjx3s005ppspw1s4kf5k5"},{"post_id":"cks61rjb80000t9pwds973don","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cks62wwj000041apwdsfogejr"},{"post_id":"cks61rjb80000t9pwds973don","category_id":"ckb6kjx1u001ypspw3eumb0st","_id":"cks62wwj000051apw18qj073v"},{"post_id":"cksvfui170000uypweqv495e4","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cksvfui1f0002uypw1zov7htz"},{"post_id":"cksvfui170000uypweqv495e4","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cksvfui1f0003uypw8o585v37"},{"post_id":"cksvrx3oh0000l7pw1quf1jeg","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cksvrx3oo0002l7pw3uta7k2z"},{"post_id":"ckzzj6zab000091pw2jya4s38","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"ckzzj6zai000291pwa5eeb87d"},{"post_id":"ckzzj6zab000091pw2jya4s38","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"ckzzj6zai000391pw6zs40723"},{"post_id":"cl04zol9c0000wapw6aed1kz5","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl04zol9j0002wapw89hpd2gf"},{"post_id":"cl04zol9c0000wapw6aed1kz5","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"cl04zol9j0003wapwdwbyfbkp"},{"post_id":"cl0thwv490000ddpwhjzmhwm5","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl0thwv4m0002ddpwef5pbb3b"},{"post_id":"cl0thwv490000ddpwhjzmhwm5","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"cl0thwv4m0003ddpw5gqmhu1l"},{"post_id":"cl0wdedrh0000ahpwa4vk9qec","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl0wdedrn0002ahpwaly30xzn"},{"post_id":"cl0wdedrh0000ahpwa4vk9qec","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl0wdedrn0003ahpwafo94jnc"},{"post_id":"cl0yvnymy0000odpwcijo38n3","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl0yvnyn40002odpw4p8sdh5f"},{"post_id":"cl0yvnymy0000odpwcijo38n3","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl0yvnyn40003odpwd5kg0ka8"},{"post_id":"cl1kb3py8000049pw95ta6d9q","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl1sm9q9d00015lpwan6b59zr"},{"post_id":"cl1kb3py8000049pw95ta6d9q","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl1sm9q9e00025lpwbmr9gi60"},{"post_id":"cl1sm9q9900005lpw9ika9wsn","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl1smhyg500018jpw4rh1hjsg"},{"post_id":"cl1sm9q9900005lpw9ika9wsn","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl1smhyg600028jpwg05mg6ff"},{"post_id":"cl230lz700000ljpwc9wdh9ae","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl230lz770002ljpwdafqeyc0"},{"post_id":"cl230lz700000ljpwc9wdh9ae","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl230lz780003ljpw12wj8nz0"},{"post_id":"cl2bucyo30000c6pw6jy708g6","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl2bucyoh0002c6pw157leu60"},{"post_id":"cl2bucyo30000c6pw6jy708g6","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl2bucyoh0003c6pwhqkigr5j"},{"post_id":"cl3y0qc1b00009lpw71fr7fbh","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl3y0qc1k00029lpw4gak79kg"},{"post_id":"cl3y0qc1b00009lpw71fr7fbh","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cl3y0qc1k00039lpw7700drsh"},{"post_id":"cl72zyh9u0000vapwdofk4rsx","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cl72zyhae0003vapwaa5203r6"},{"post_id":"cl72zyh9u0000vapwdofk4rsx","category_id":"cl72zyha10002vapw9fdvdopm","_id":"cl72zyhae0004vapwgn9i9mw9"},{"post_id":"cl9kyxn0d0000ghpw8hqugh84","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"clfd8mhuw0001wxpw99367g03"},{"post_id":"cl9kyxn0d0000ghpw8hqugh84","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"clfd8mhvb0003wxpw44z49a3w"},{"post_id":"cl9uzmasr0000ljpwg0r7h06y","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"clfd8mhvc0004wxpwf6ox5aib"},{"post_id":"cl9uzmasr0000ljpwg0r7h06y","category_id":"cl72zyha10002vapw9fdvdopm","_id":"clfd8mhvc0005wxpw0r5leiay"},{"post_id":"clfd8mhus0000wxpwgs2ab4en","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"clfd8mhvd0007wxpw1qa67tng"},{"post_id":"clfd8mhus0000wxpwgs2ab4en","category_id":"ckb6kjx1d000tpspwehryfe9u","_id":"clfd8mhvd0008wxpwebdzcrcj"},{"post_id":"cm6pplgvy00006kw39se6emv9","category_id":"ckb6kjx0q0002pspwafuu2w0i","_id":"cm6pplgw200036kw3gzf7h0zn"},{"post_id":"cm6pplgvy00006kw39se6emv9","category_id":"ckb6kjx16000ipspw7vp1d2bx","_id":"cm6pplgw200046kw32zcm1z4l"}],"PostTag":[{"post_id":"ckb6kjx0i0000pspwcdj2ctyo","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx0z0009pspw0guq354j"},{"post_id":"ckb6kjx0z000apspwcpls7nig","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"ckb6kjx14000epspwepdhdgqo"},{"post_id":"ckb6kjx0o0001pspw17udh8q0","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"ckb6kjx15000gpspw9x5rgus9"},{"post_id":"ckb6kjx0t0004pspw9zrmhk3u","tag_id":"ckb6kjx14000dpspwdte2apjp","_id":"ckb6kjx19000lpspw3n2z8ihv"},{"post_id":"ckb6kjx16000hpspw2uny17st","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"ckb6kjx1a000opspw3i7jatod"},{"post_id":"ckb6kjx18000kpspwe95l09a2","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"ckb6kjx1c000rpspwa7fsgesq"},{"post_id":"ckb6kjx0v0005pspwfi2f2sy1","tag_id":"ckb6kjx17000jpspw2ap2g7fs","_id":"ckb6kjx1e000vpspwe2hw11ty"},{"post_id":"ckb6kjx19000mpspw6zfgeru3","tag_id":"ckb6kjx14000dpspwdte2apjp","_id":"ckb6kjx1f000zpspwb7xxdfvc"},{"post_id":"ckb6kjx1d000spspw4iwja9yv","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx1h0012pspw84oua5q6"},{"post_id":"ckb6kjx0w0006pspw34az3nez","tag_id":"ckb6kjx1a000ppspw591iek57","_id":"ckb6kjx1j0017pspw1ge56hk8"},{"post_id":"ckb6kjx1e000wpspw5g6e6nnk","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx1k001apspw357ud3zq"},{"post_id":"ckb6kjx1g0010pspwbojab5no","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx1m001epspw6bmwgx8f"},{"post_id":"ckb6kjx12000bpspw5tgrdgrx","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx1o001ipspw3vb3f8x1"},{"post_id":"ckb6kjx12000bpspw5tgrdgrx","tag_id":"ckb6kjx1f000xpspw8qd021if","_id":"ckb6kjx1p001mpspwgt5z0gyb"},{"post_id":"ckb6kjx1j0018pspwdokv5ass","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx1r001qpspwgs8d142w"},{"post_id":"ckb6kjx14000fpspw24pe5poa","tag_id":"ckb6kjx1j0016pspweaa0ewb6","_id":"ckb6kjx1t001upspwhgcw4er8"},{"post_id":"ckb6kjx1l001cpspw1uoef0xj","tag_id":"ckb6kjx14000dpspwdte2apjp","_id":"ckb6kjx1u001xpspwetz3fhoe"},{"post_id":"ckb6kjx1n001gpspwaac38g9t","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"ckb6kjx1w0022pspwh2ed8l85"},{"post_id":"ckb6kjx1b000qpspwel9l37ze","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"ckb6kjx1x0025pspw7p1f7idr"},{"post_id":"ckb6kjx1o001kpspw637wchyx","tag_id":"ckb6kjx1j0016pspweaa0ewb6","_id":"ckb6kjx1z002apspw6olth6nm"},{"post_id":"ckb6kjx1p001opspw1izx5536","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx21002dpspwdclc3a3x"},{"post_id":"ckb6kjx1i0014pspw4c0h91ht","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"ckb6kjx23002ipspwgqh67qrs"},{"post_id":"ckb6kjx1w0023pspw3k3fcnyb","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx24002lpspw78mz4ds9"},{"post_id":"ckb6kjx1s001spspwfulzbhmd","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx27002ppspw3omy1ied"},{"post_id":"ckb6kjx1y0027pspwetyq5y1e","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx29002tpspwgh1d8qvh"},{"post_id":"ckb6kjx20002bpspw18hzh69t","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2b002xpspwbbzm05vs"},{"post_id":"ckb6kjx1t001vpspwa52859ea","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2c0031pspw56wk7f3j"},{"post_id":"ckb6kjx21002fpspwcw4u62gj","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2e0034pspwhd5wghip"},{"post_id":"ckb6kjx1v0020pspwhr717a74","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2f0037pspw6rp088jl"},{"post_id":"ckb6kjx25002npspw5xlnawes","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2h003apspwgmlke386"},{"post_id":"ckb6kjx29002vpspw1cubgv0v","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"ckb6kjx2l003dpspwb3ucchda"},{"post_id":"ckb6kjx23002jpspw4t4wb6gt","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"ckb6kjx2q003gpspwdp5paij7"},{"post_id":"ckb6kjx2b002ypspw456m42jd","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2s003kpspwa6vk8dn6"},{"post_id":"ckb6kjx2d0032pspw4os11k1y","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2t003npspwgnr3hi4r"},{"post_id":"ckb6kjx28002rpspw3yqi9a4e","tag_id":"ckb6kjx2c002zpspw8woc0le5","_id":"ckb6kjx2u003qpspw3oy15il9"},{"post_id":"ckb6kjx2e0035pspwgmuo8z3t","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2w003tpspwddhdbymt"},{"post_id":"ckb6kjx2g0038pspwdubi2elg","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2x003vpspw9i401dmz"},{"post_id":"ckb6kjx2p003epspw9cxx6amn","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"ckb6kjx2x003xpspw76zleg20"},{"post_id":"ckb6kjx2r003ipspwhkp620sq","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2x003zpspw9u0v4dxd"},{"post_id":"ckb6kjx2s003lpspw1bw8bt16","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2y0041pspwb426dn1p"},{"post_id":"ckb6kjx2h003bpspw60ochjvr","tag_id":"ckb6kjx2r003hpspwd47dahga","_id":"ckb6kjx2y0043pspwestee61y"},{"post_id":"ckb6kjx2t003opspw5ytn19f7","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx2y0045pspwba8a6t2i"},{"post_id":"ckb6kjx2t003opspw5ytn19f7","tag_id":"ckb6kjx2c002zpspw8woc0le5","_id":"ckb6kjx2y0047pspwauq5450c"},{"post_id":"ckb6kjx3m005gpspw4k40h9y9","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx3p005ipspwbymw9pjd"},{"post_id":"ckb6kjx3o005hpspwbe456bdz","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"ckb6kjx3r005kpspw5469fffl"},{"post_id":"cks61rjb80000t9pwds973don","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"cks61rjbg0001t9pw19om64na"},{"post_id":"cksvfui170000uypweqv495e4","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"cksvfui1e0001uypwhf2w2x28"},{"post_id":"cksvrx3oh0000l7pw1quf1jeg","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"cksvrx3oo0001l7pw5g9g1j1u"},{"post_id":"ckzzj6zab000091pw2jya4s38","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"ckzzj6zah000191pwejmfh5a7"},{"post_id":"cl04zol9c0000wapw6aed1kz5","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"cl04zol9i0001wapwaq20dfik"},{"post_id":"cl0thwv490000ddpwhjzmhwm5","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl0thwv4l0001ddpw1h5a5b5c"},{"post_id":"cl0wdedrh0000ahpwa4vk9qec","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"cl0wdedrn0001ahpw500u4xsq"},{"post_id":"cl0yvnymy0000odpwcijo38n3","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl0yvnyn40001odpwfrn6bror"},{"post_id":"cl1kb3py8000049pw95ta6d9q","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl1kb3pyp000249pwbm5l6clc"},{"post_id":"cl1sm9q9900005lpw9ika9wsn","tag_id":"ckb6kjx1v001zpspwfmqpdfsj","_id":"cl1smhyg500008jpwdxwidti2"},{"post_id":"cl230lz700000ljpwc9wdh9ae","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"cl230lz760001ljpw4svgdu7w"},{"post_id":"cl2bucyo30000c6pw6jy708g6","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl2bucyog0001c6pw9np88olk"},{"post_id":"cl3y0qc1b00009lpw71fr7fbh","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl3y0qc1j00019lpw3fjw9qah"},{"post_id":"cl72zyh9u0000vapwdofk4rsx","tag_id":"ckb6kjx1m001fpspwcuftabd0","_id":"cl72zyha10001vapw2kt1bdd8"},{"post_id":"cl9kyxn0d0000ghpw8hqugh84","tag_id":"ckb6kjx0s0003pspwew888q2v","_id":"cl9kyxn0k0001ghpw1nbe8i4d"},{"post_id":"cl9uzmasr0000ljpwg0r7h06y","tag_id":"cl9uzmatb0002ljpw1o9ocr5h","_id":"cl9uzmatd0003ljpw9qex8bvb"},{"post_id":"clfd8mhus0000wxpwgs2ab4en","tag_id":"clfd8mhuw0002wxpwccm1c2nq","_id":"clfd8mhvc0006wxpw8nki5eq1"},{"post_id":"cm6pplgvy00006kw39se6emv9","tag_id":"ckb6kjx0x0008pspw2daa1lup","_id":"cm6pplgw100016kw31qaoa79z"},{"post_id":"cm6pplgvy00006kw39se6emv9","tag_id":"ckb6kjx27002qpspw07oy1tt9","_id":"cm6pplgw200026kw3g4p7hwd8"}],"Tag":[{"name":"shell","_id":"ckb6kjx0s0003pspwew888q2v"},{"name":"system","_id":"ckb6kjx0x0008pspw2daa1lup"},{"name":"sql","_id":"ckb6kjx14000dpspwdte2apjp"},{"name":"software","_id":"ckb6kjx17000jpspw2ap2g7fs"},{"name":"url","_id":"ckb6kjx1a000ppspw591iek57"},{"name":"grep","_id":"ckb6kjx1f000xpspw8qd021if"},{"name":"vim","_id":"ckb6kjx1j0016pspweaa0ewb6"},{"name":"program","_id":"ckb6kjx1m001fpspwcuftabd0"},{"name":"postgresql","_id":"ckb6kjx1v001zpspwfmqpdfsj"},{"name":"network","_id":"ckb6kjx27002qpspw07oy1tt9"},{"name":"docker","_id":"ckb6kjx2c002zpspw8woc0le5"},{"name":"kubenetes","_id":"ckb6kjx2r003hpspwd47dahga"},{"name":"javascript","_id":"cl9uzmatb0002ljpw1o9ocr5h"},{"name":"other","_id":"clfd8mhuw0002wxpwccm1c2nq"}]}}